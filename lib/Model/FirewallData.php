<?php
/**
 * FirewallData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FirewallData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FirewallData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'firewall_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'firewall_enabled' => 'bool',
        'firewall_logging_enabled' => 'bool',
        'inbound' => '\Swagger\Client\Model\FirewallInboundRule[]',
        'outbound' => '\Swagger\Client\Model\FirewallOutboundRule[]',
        'services' => '\Swagger\Client\Model\FirewallDataServices'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'firewall_enabled' => null,
        'firewall_logging_enabled' => null,
        'inbound' => null,
        'outbound' => null,
        'services' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'firewall_enabled' => 'firewall_enabled',
        'firewall_logging_enabled' => 'firewall_logging_enabled',
        'inbound' => 'inbound',
        'outbound' => 'outbound',
        'services' => 'services'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'firewall_enabled' => 'setFirewallEnabled',
        'firewall_logging_enabled' => 'setFirewallLoggingEnabled',
        'inbound' => 'setInbound',
        'outbound' => 'setOutbound',
        'services' => 'setServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'firewall_enabled' => 'getFirewallEnabled',
        'firewall_logging_enabled' => 'getFirewallLoggingEnabled',
        'inbound' => 'getInbound',
        'outbound' => 'getOutbound',
        'services' => 'getServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['firewall_enabled'] = isset($data['firewall_enabled']) ? $data['firewall_enabled'] : null;
        $this->container['firewall_logging_enabled'] = isset($data['firewall_logging_enabled']) ? $data['firewall_logging_enabled'] : null;
        $this->container['inbound'] = isset($data['inbound']) ? $data['inbound'] : null;
        $this->container['outbound'] = isset($data['outbound']) ? $data['outbound'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['firewall_enabled'] === null) {
            $invalidProperties[] = "'firewall_enabled' can't be null";
        }
        if ($this->container['firewall_logging_enabled'] === null) {
            $invalidProperties[] = "'firewall_logging_enabled' can't be null";
        }
        if ($this->container['inbound'] === null) {
            $invalidProperties[] = "'inbound' can't be null";
        }
        if ($this->container['outbound'] === null) {
            $invalidProperties[] = "'outbound' can't be null";
        }
        if ($this->container['services'] === null) {
            $invalidProperties[] = "'services' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['firewall_enabled'] === null) {
            return false;
        }
        if ($this->container['firewall_logging_enabled'] === null) {
            return false;
        }
        if ($this->container['inbound'] === null) {
            return false;
        }
        if ($this->container['outbound'] === null) {
            return false;
        }
        if ($this->container['services'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets firewall_enabled
     *
     * @return bool
     */
    public function getFirewallEnabled()
    {
        return $this->container['firewall_enabled'];
    }

    /**
     * Sets firewall_enabled
     *
     * @param bool $firewall_enabled firewall_enabled
     *
     * @return $this
     */
    public function setFirewallEnabled($firewall_enabled)
    {
        $this->container['firewall_enabled'] = $firewall_enabled;

        return $this;
    }

    /**
     * Gets firewall_logging_enabled
     *
     * @return bool
     */
    public function getFirewallLoggingEnabled()
    {
        return $this->container['firewall_logging_enabled'];
    }

    /**
     * Sets firewall_logging_enabled
     *
     * @param bool $firewall_logging_enabled firewall_logging_enabled
     *
     * @return $this
     */
    public function setFirewallLoggingEnabled($firewall_logging_enabled)
    {
        $this->container['firewall_logging_enabled'] = $firewall_logging_enabled;

        return $this;
    }

    /**
     * Gets inbound
     *
     * @return \Swagger\Client\Model\FirewallInboundRule[]
     */
    public function getInbound()
    {
        return $this->container['inbound'];
    }

    /**
     * Sets inbound
     *
     * @param \Swagger\Client\Model\FirewallInboundRule[] $inbound inbound
     *
     * @return $this
     */
    public function setInbound($inbound)
    {
        $this->container['inbound'] = $inbound;

        return $this;
    }

    /**
     * Gets outbound
     *
     * @return \Swagger\Client\Model\FirewallOutboundRule[]
     */
    public function getOutbound()
    {
        return $this->container['outbound'];
    }

    /**
     * Sets outbound
     *
     * @param \Swagger\Client\Model\FirewallOutboundRule[] $outbound outbound
     *
     * @return $this
     */
    public function setOutbound($outbound)
    {
        $this->container['outbound'] = $outbound;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \Swagger\Client\Model\FirewallDataServices
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \Swagger\Client\Model\FirewallDataServices $services services
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


