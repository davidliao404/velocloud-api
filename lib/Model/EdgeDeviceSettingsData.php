<?php
/**
 * EdgeDeviceSettingsData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdgeDeviceSettingsData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdgeDeviceSettingsData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'edgeDeviceSettingsData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bgp' => '\Swagger\Client\Model\EdgeDeviceSettingsDataBgp',
        'lan' => '\Swagger\Client\Model\EdgeDeviceSettingsDataLan',
        'routed_interfaces' => '\Swagger\Client\Model\EdgeDeviceSettingsDataRoutedInterfaces[]',
        'routes' => '\Swagger\Client\Model\EdgeDeviceSettingsDataRoutes',
        'ha' => '\Swagger\Client\Model\EdgeDeviceSettingsDataHa',
        'dns' => '\Swagger\Client\Model\EdgeDeviceSettingsDataDns',
        'netflow' => '\Swagger\Client\Model\EdgeDeviceSettingsDataNetflow',
        'vqm' => '\Swagger\Client\Model\EdgeDeviceSettingsDataVqm',
        'vrrp' => '\Swagger\Client\Model\EdgeDeviceSettingsDataVrrp',
        'snmp' => '\Swagger\Client\Model\EdgeDeviceSettingsDataSnmp',
        'multi_source_qos' => '\Swagger\Client\Model\EdgeDeviceSettingsDataMultiSourceQos'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bgp' => null,
        'lan' => null,
        'routed_interfaces' => null,
        'routes' => null,
        'ha' => null,
        'dns' => null,
        'netflow' => null,
        'vqm' => null,
        'vrrp' => null,
        'snmp' => null,
        'multi_source_qos' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bgp' => 'bgp',
        'lan' => 'lan',
        'routed_interfaces' => 'routedInterfaces',
        'routes' => 'routes',
        'ha' => 'ha',
        'dns' => 'dns',
        'netflow' => 'netflow',
        'vqm' => 'vqm',
        'vrrp' => 'vrrp',
        'snmp' => 'snmp',
        'multi_source_qos' => 'multiSourceQos'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bgp' => 'setBgp',
        'lan' => 'setLan',
        'routed_interfaces' => 'setRoutedInterfaces',
        'routes' => 'setRoutes',
        'ha' => 'setHa',
        'dns' => 'setDns',
        'netflow' => 'setNetflow',
        'vqm' => 'setVqm',
        'vrrp' => 'setVrrp',
        'snmp' => 'setSnmp',
        'multi_source_qos' => 'setMultiSourceQos'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bgp' => 'getBgp',
        'lan' => 'getLan',
        'routed_interfaces' => 'getRoutedInterfaces',
        'routes' => 'getRoutes',
        'ha' => 'getHa',
        'dns' => 'getDns',
        'netflow' => 'getNetflow',
        'vqm' => 'getVqm',
        'vrrp' => 'getVrrp',
        'snmp' => 'getSnmp',
        'multi_source_qos' => 'getMultiSourceQos'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bgp'] = isset($data['bgp']) ? $data['bgp'] : null;
        $this->container['lan'] = isset($data['lan']) ? $data['lan'] : null;
        $this->container['routed_interfaces'] = isset($data['routed_interfaces']) ? $data['routed_interfaces'] : null;
        $this->container['routes'] = isset($data['routes']) ? $data['routes'] : null;
        $this->container['ha'] = isset($data['ha']) ? $data['ha'] : null;
        $this->container['dns'] = isset($data['dns']) ? $data['dns'] : null;
        $this->container['netflow'] = isset($data['netflow']) ? $data['netflow'] : null;
        $this->container['vqm'] = isset($data['vqm']) ? $data['vqm'] : null;
        $this->container['vrrp'] = isset($data['vrrp']) ? $data['vrrp'] : null;
        $this->container['snmp'] = isset($data['snmp']) ? $data['snmp'] : null;
        $this->container['multi_source_qos'] = isset($data['multi_source_qos']) ? $data['multi_source_qos'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets bgp
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataBgp
     */
    public function getBgp()
    {
        return $this->container['bgp'];
    }

    /**
     * Sets bgp
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataBgp $bgp bgp
     *
     * @return $this
     */
    public function setBgp($bgp)
    {
        $this->container['bgp'] = $bgp;

        return $this;
    }

    /**
     * Gets lan
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataLan
     */
    public function getLan()
    {
        return $this->container['lan'];
    }

    /**
     * Sets lan
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataLan $lan lan
     *
     * @return $this
     */
    public function setLan($lan)
    {
        $this->container['lan'] = $lan;

        return $this;
    }

    /**
     * Gets routed_interfaces
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataRoutedInterfaces[]
     */
    public function getRoutedInterfaces()
    {
        return $this->container['routed_interfaces'];
    }

    /**
     * Sets routed_interfaces
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataRoutedInterfaces[] $routed_interfaces routed_interfaces
     *
     * @return $this
     */
    public function setRoutedInterfaces($routed_interfaces)
    {
        $this->container['routed_interfaces'] = $routed_interfaces;

        return $this;
    }

    /**
     * Gets routes
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataRoutes
     */
    public function getRoutes()
    {
        return $this->container['routes'];
    }

    /**
     * Sets routes
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataRoutes $routes routes
     *
     * @return $this
     */
    public function setRoutes($routes)
    {
        $this->container['routes'] = $routes;

        return $this;
    }

    /**
     * Gets ha
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataHa
     */
    public function getHa()
    {
        return $this->container['ha'];
    }

    /**
     * Sets ha
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataHa $ha ha
     *
     * @return $this
     */
    public function setHa($ha)
    {
        $this->container['ha'] = $ha;

        return $this;
    }

    /**
     * Gets dns
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataDns
     */
    public function getDns()
    {
        return $this->container['dns'];
    }

    /**
     * Sets dns
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataDns $dns dns
     *
     * @return $this
     */
    public function setDns($dns)
    {
        $this->container['dns'] = $dns;

        return $this;
    }

    /**
     * Gets netflow
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataNetflow
     */
    public function getNetflow()
    {
        return $this->container['netflow'];
    }

    /**
     * Sets netflow
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataNetflow $netflow netflow
     *
     * @return $this
     */
    public function setNetflow($netflow)
    {
        $this->container['netflow'] = $netflow;

        return $this;
    }

    /**
     * Gets vqm
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataVqm
     */
    public function getVqm()
    {
        return $this->container['vqm'];
    }

    /**
     * Sets vqm
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataVqm $vqm vqm
     *
     * @return $this
     */
    public function setVqm($vqm)
    {
        $this->container['vqm'] = $vqm;

        return $this;
    }

    /**
     * Gets vrrp
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataVrrp
     */
    public function getVrrp()
    {
        return $this->container['vrrp'];
    }

    /**
     * Sets vrrp
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataVrrp $vrrp vrrp
     *
     * @return $this
     */
    public function setVrrp($vrrp)
    {
        $this->container['vrrp'] = $vrrp;

        return $this;
    }

    /**
     * Gets snmp
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataSnmp
     */
    public function getSnmp()
    {
        return $this->container['snmp'];
    }

    /**
     * Sets snmp
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataSnmp $snmp snmp
     *
     * @return $this
     */
    public function setSnmp($snmp)
    {
        $this->container['snmp'] = $snmp;

        return $this;
    }

    /**
     * Gets multi_source_qos
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataMultiSourceQos
     */
    public function getMultiSourceQos()
    {
        return $this->container['multi_source_qos'];
    }

    /**
     * Sets multi_source_qos
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataMultiSourceQos $multi_source_qos multi_source_qos
     *
     * @return $this
     */
    public function setMultiSourceQos($multi_source_qos)
    {
        $this->container['multi_source_qos'] = $multi_source_qos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


