<?php
/**
 * EdgeDeviceSettingsDataLanNetworks
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdgeDeviceSettingsDataLanNetworks Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdgeDeviceSettingsDataLanNetworks implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'edgeDeviceSettingsData_lan_networks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'space' => 'string',
        'guest' => 'bool',
        'secure' => 'bool',
        'advertise' => 'bool',
        'cost' => 'int',
        'dhcp' => '\Swagger\Client\Model\EdgeDeviceSettingsDataLanDhcp',
        'static_reserved' => 'int',
        'netmask' => 'string',
        'cidr_prefix' => 'int',
        'cidr_ip' => 'string',
        'base_dhcp_addr' => 'int',
        'num_dhcp_addr' => 'int',
        'name' => 'string',
        'interfaces' => 'string[]',
        'vlan_id' => 'int',
        'management_ip' => 'string',
        'disabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'space' => null,
        'guest' => null,
        'secure' => null,
        'advertise' => null,
        'cost' => null,
        'dhcp' => null,
        'static_reserved' => null,
        'netmask' => null,
        'cidr_prefix' => null,
        'cidr_ip' => null,
        'base_dhcp_addr' => null,
        'num_dhcp_addr' => null,
        'name' => null,
        'interfaces' => null,
        'vlan_id' => null,
        'management_ip' => null,
        'disabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'space' => 'space',
        'guest' => 'guest',
        'secure' => 'secure',
        'advertise' => 'advertise',
        'cost' => 'cost',
        'dhcp' => 'dhcp',
        'static_reserved' => 'staticReserved',
        'netmask' => 'netmask',
        'cidr_prefix' => 'cidrPrefix',
        'cidr_ip' => 'cidrIp',
        'base_dhcp_addr' => 'baseDhcpAddr',
        'num_dhcp_addr' => 'numDhcpAddr',
        'name' => 'name',
        'interfaces' => 'interfaces',
        'vlan_id' => 'vlanId',
        'management_ip' => 'managementIp',
        'disabled' => 'disabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'space' => 'setSpace',
        'guest' => 'setGuest',
        'secure' => 'setSecure',
        'advertise' => 'setAdvertise',
        'cost' => 'setCost',
        'dhcp' => 'setDhcp',
        'static_reserved' => 'setStaticReserved',
        'netmask' => 'setNetmask',
        'cidr_prefix' => 'setCidrPrefix',
        'cidr_ip' => 'setCidrIp',
        'base_dhcp_addr' => 'setBaseDhcpAddr',
        'num_dhcp_addr' => 'setNumDhcpAddr',
        'name' => 'setName',
        'interfaces' => 'setInterfaces',
        'vlan_id' => 'setVlanId',
        'management_ip' => 'setManagementIp',
        'disabled' => 'setDisabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'space' => 'getSpace',
        'guest' => 'getGuest',
        'secure' => 'getSecure',
        'advertise' => 'getAdvertise',
        'cost' => 'getCost',
        'dhcp' => 'getDhcp',
        'static_reserved' => 'getStaticReserved',
        'netmask' => 'getNetmask',
        'cidr_prefix' => 'getCidrPrefix',
        'cidr_ip' => 'getCidrIp',
        'base_dhcp_addr' => 'getBaseDhcpAddr',
        'num_dhcp_addr' => 'getNumDhcpAddr',
        'name' => 'getName',
        'interfaces' => 'getInterfaces',
        'vlan_id' => 'getVlanId',
        'management_ip' => 'getManagementIp',
        'disabled' => 'getDisabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['space'] = isset($data['space']) ? $data['space'] : null;
        $this->container['guest'] = isset($data['guest']) ? $data['guest'] : null;
        $this->container['secure'] = isset($data['secure']) ? $data['secure'] : null;
        $this->container['advertise'] = isset($data['advertise']) ? $data['advertise'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['dhcp'] = isset($data['dhcp']) ? $data['dhcp'] : null;
        $this->container['static_reserved'] = isset($data['static_reserved']) ? $data['static_reserved'] : null;
        $this->container['netmask'] = isset($data['netmask']) ? $data['netmask'] : null;
        $this->container['cidr_prefix'] = isset($data['cidr_prefix']) ? $data['cidr_prefix'] : null;
        $this->container['cidr_ip'] = isset($data['cidr_ip']) ? $data['cidr_ip'] : null;
        $this->container['base_dhcp_addr'] = isset($data['base_dhcp_addr']) ? $data['base_dhcp_addr'] : null;
        $this->container['num_dhcp_addr'] = isset($data['num_dhcp_addr']) ? $data['num_dhcp_addr'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['interfaces'] = isset($data['interfaces']) ? $data['interfaces'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
        $this->container['management_ip'] = isset($data['management_ip']) ? $data['management_ip'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets space
     *
     * @return string
     */
    public function getSpace()
    {
        return $this->container['space'];
    }

    /**
     * Sets space
     *
     * @param string $space space
     *
     * @return $this
     */
    public function setSpace($space)
    {
        $this->container['space'] = $space;

        return $this;
    }

    /**
     * Gets guest
     *
     * @return bool
     */
    public function getGuest()
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     *
     * @param bool $guest guest
     *
     * @return $this
     */
    public function setGuest($guest)
    {
        $this->container['guest'] = $guest;

        return $this;
    }

    /**
     * Gets secure
     *
     * @return bool
     */
    public function getSecure()
    {
        return $this->container['secure'];
    }

    /**
     * Sets secure
     *
     * @param bool $secure secure
     *
     * @return $this
     */
    public function setSecure($secure)
    {
        $this->container['secure'] = $secure;

        return $this;
    }

    /**
     * Gets advertise
     *
     * @return bool
     */
    public function getAdvertise()
    {
        return $this->container['advertise'];
    }

    /**
     * Sets advertise
     *
     * @param bool $advertise advertise
     *
     * @return $this
     */
    public function setAdvertise($advertise)
    {
        $this->container['advertise'] = $advertise;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return int
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param int $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets dhcp
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataLanDhcp
     */
    public function getDhcp()
    {
        return $this->container['dhcp'];
    }

    /**
     * Sets dhcp
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataLanDhcp $dhcp dhcp
     *
     * @return $this
     */
    public function setDhcp($dhcp)
    {
        $this->container['dhcp'] = $dhcp;

        return $this;
    }

    /**
     * Gets static_reserved
     *
     * @return int
     */
    public function getStaticReserved()
    {
        return $this->container['static_reserved'];
    }

    /**
     * Sets static_reserved
     *
     * @param int $static_reserved static_reserved
     *
     * @return $this
     */
    public function setStaticReserved($static_reserved)
    {
        $this->container['static_reserved'] = $static_reserved;

        return $this;
    }

    /**
     * Gets netmask
     *
     * @return string
     */
    public function getNetmask()
    {
        return $this->container['netmask'];
    }

    /**
     * Sets netmask
     *
     * @param string $netmask netmask
     *
     * @return $this
     */
    public function setNetmask($netmask)
    {
        $this->container['netmask'] = $netmask;

        return $this;
    }

    /**
     * Gets cidr_prefix
     *
     * @return int
     */
    public function getCidrPrefix()
    {
        return $this->container['cidr_prefix'];
    }

    /**
     * Sets cidr_prefix
     *
     * @param int $cidr_prefix cidr_prefix
     *
     * @return $this
     */
    public function setCidrPrefix($cidr_prefix)
    {
        $this->container['cidr_prefix'] = $cidr_prefix;

        return $this;
    }

    /**
     * Gets cidr_ip
     *
     * @return string
     */
    public function getCidrIp()
    {
        return $this->container['cidr_ip'];
    }

    /**
     * Sets cidr_ip
     *
     * @param string $cidr_ip cidr_ip
     *
     * @return $this
     */
    public function setCidrIp($cidr_ip)
    {
        $this->container['cidr_ip'] = $cidr_ip;

        return $this;
    }

    /**
     * Gets base_dhcp_addr
     *
     * @return int
     */
    public function getBaseDhcpAddr()
    {
        return $this->container['base_dhcp_addr'];
    }

    /**
     * Sets base_dhcp_addr
     *
     * @param int $base_dhcp_addr base_dhcp_addr
     *
     * @return $this
     */
    public function setBaseDhcpAddr($base_dhcp_addr)
    {
        $this->container['base_dhcp_addr'] = $base_dhcp_addr;

        return $this;
    }

    /**
     * Gets num_dhcp_addr
     *
     * @return int
     */
    public function getNumDhcpAddr()
    {
        return $this->container['num_dhcp_addr'];
    }

    /**
     * Sets num_dhcp_addr
     *
     * @param int $num_dhcp_addr num_dhcp_addr
     *
     * @return $this
     */
    public function setNumDhcpAddr($num_dhcp_addr)
    {
        $this->container['num_dhcp_addr'] = $num_dhcp_addr;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets interfaces
     *
     * @return string[]
     */
    public function getInterfaces()
    {
        return $this->container['interfaces'];
    }

    /**
     * Sets interfaces
     *
     * @param string[] $interfaces interfaces
     *
     * @return $this
     */
    public function setInterfaces($interfaces)
    {
        $this->container['interfaces'] = $interfaces;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int $vlan_id vlan_id
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets management_ip
     *
     * @return string
     */
    public function getManagementIp()
    {
        return $this->container['management_ip'];
    }

    /**
     * Sets management_ip
     *
     * @param string $management_ip management_ip
     *
     * @return $this
     */
    public function setManagementIp($management_ip)
    {
        $this->container['management_ip'] = $management_ip;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


