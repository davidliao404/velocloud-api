<?php
/**
 * GatewaySite
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GatewaySite Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GatewaySite implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'gateway_site';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'city' => 'string',
        'contact_email' => 'string',
        'contact_mobile' => 'string',
        'contact_name' => 'string',
        'contact_phone' => 'string',
        'country' => 'string',
        'lat' => 'float',
        'lon' => 'float',
        'name' => 'string',
        'postal_code' => 'string',
        'state' => 'string',
        'street_address' => 'string',
        'street_address2' => 'string',
        'id' => 'int',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'timezone' => 'string',
        'locale' => 'string',
        'shipping_same_as_location' => 'int',
        'shipping_contact_name' => 'string',
        'shipping_address' => 'string',
        'shipping_address2' => 'string',
        'shipping_city' => 'string',
        'shipping_state' => 'string',
        'shipping_postal_code' => 'string',
        'shipping_country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'city' => null,
        'contact_email' => 'email',
        'contact_mobile' => null,
        'contact_name' => null,
        'contact_phone' => null,
        'country' => null,
        'lat' => null,
        'lon' => null,
        'name' => null,
        'postal_code' => null,
        'state' => null,
        'street_address' => null,
        'street_address2' => null,
        'id' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'timezone' => null,
        'locale' => null,
        'shipping_same_as_location' => null,
        'shipping_contact_name' => null,
        'shipping_address' => null,
        'shipping_address2' => null,
        'shipping_city' => null,
        'shipping_state' => null,
        'shipping_postal_code' => null,
        'shipping_country' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'city' => 'city',
        'contact_email' => 'contactEmail',
        'contact_mobile' => 'contactMobile',
        'contact_name' => 'contactName',
        'contact_phone' => 'contactPhone',
        'country' => 'country',
        'lat' => 'lat',
        'lon' => 'lon',
        'name' => 'name',
        'postal_code' => 'postalCode',
        'state' => 'state',
        'street_address' => 'streetAddress',
        'street_address2' => 'streetAddress2',
        'id' => 'id',
        'created' => 'created',
        'modified' => 'modified',
        'timezone' => 'timezone',
        'locale' => 'locale',
        'shipping_same_as_location' => 'shippingSameAsLocation',
        'shipping_contact_name' => 'shippingContactName',
        'shipping_address' => 'shippingAddress',
        'shipping_address2' => 'shippingAddress2',
        'shipping_city' => 'shippingCity',
        'shipping_state' => 'shippingState',
        'shipping_postal_code' => 'shippingPostalCode',
        'shipping_country' => 'shippingCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'city' => 'setCity',
        'contact_email' => 'setContactEmail',
        'contact_mobile' => 'setContactMobile',
        'contact_name' => 'setContactName',
        'contact_phone' => 'setContactPhone',
        'country' => 'setCountry',
        'lat' => 'setLat',
        'lon' => 'setLon',
        'name' => 'setName',
        'postal_code' => 'setPostalCode',
        'state' => 'setState',
        'street_address' => 'setStreetAddress',
        'street_address2' => 'setStreetAddress2',
        'id' => 'setId',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'timezone' => 'setTimezone',
        'locale' => 'setLocale',
        'shipping_same_as_location' => 'setShippingSameAsLocation',
        'shipping_contact_name' => 'setShippingContactName',
        'shipping_address' => 'setShippingAddress',
        'shipping_address2' => 'setShippingAddress2',
        'shipping_city' => 'setShippingCity',
        'shipping_state' => 'setShippingState',
        'shipping_postal_code' => 'setShippingPostalCode',
        'shipping_country' => 'setShippingCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'city' => 'getCity',
        'contact_email' => 'getContactEmail',
        'contact_mobile' => 'getContactMobile',
        'contact_name' => 'getContactName',
        'contact_phone' => 'getContactPhone',
        'country' => 'getCountry',
        'lat' => 'getLat',
        'lon' => 'getLon',
        'name' => 'getName',
        'postal_code' => 'getPostalCode',
        'state' => 'getState',
        'street_address' => 'getStreetAddress',
        'street_address2' => 'getStreetAddress2',
        'id' => 'getId',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'timezone' => 'getTimezone',
        'locale' => 'getLocale',
        'shipping_same_as_location' => 'getShippingSameAsLocation',
        'shipping_contact_name' => 'getShippingContactName',
        'shipping_address' => 'getShippingAddress',
        'shipping_address2' => 'getShippingAddress2',
        'shipping_city' => 'getShippingCity',
        'shipping_state' => 'getShippingState',
        'shipping_postal_code' => 'getShippingPostalCode',
        'shipping_country' => 'getShippingCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['contact_mobile'] = isset($data['contact_mobile']) ? $data['contact_mobile'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['contact_phone'] = isset($data['contact_phone']) ? $data['contact_phone'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['lon'] = isset($data['lon']) ? $data['lon'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['street_address'] = isset($data['street_address']) ? $data['street_address'] : null;
        $this->container['street_address2'] = isset($data['street_address2']) ? $data['street_address2'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['shipping_same_as_location'] = isset($data['shipping_same_as_location']) ? $data['shipping_same_as_location'] : null;
        $this->container['shipping_contact_name'] = isset($data['shipping_contact_name']) ? $data['shipping_contact_name'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['shipping_address2'] = isset($data['shipping_address2']) ? $data['shipping_address2'] : null;
        $this->container['shipping_city'] = isset($data['shipping_city']) ? $data['shipping_city'] : null;
        $this->container['shipping_state'] = isset($data['shipping_state']) ? $data['shipping_state'] : null;
        $this->container['shipping_postal_code'] = isset($data['shipping_postal_code']) ? $data['shipping_postal_code'] : null;
        $this->container['shipping_country'] = isset($data['shipping_country']) ? $data['shipping_country'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email contact_email
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_mobile
     *
     * @return string
     */
    public function getContactMobile()
    {
        return $this->container['contact_mobile'];
    }

    /**
     * Sets contact_mobile
     *
     * @param string $contact_mobile contact_mobile
     *
     * @return $this
     */
    public function setContactMobile($contact_mobile)
    {
        $this->container['contact_mobile'] = $contact_mobile;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name contact_name
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_phone
     *
     * @return string
     */
    public function getContactPhone()
    {
        return $this->container['contact_phone'];
    }

    /**
     * Sets contact_phone
     *
     * @param string $contact_phone contact_phone
     *
     * @return $this
     */
    public function setContactPhone($contact_phone)
    {
        $this->container['contact_phone'] = $contact_phone;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return float
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param float $lat lat
     *
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return float
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param float $lon lon
     *
     * @return $this
     */
    public function setLon($lon)
    {
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets street_address
     *
     * @return string
     */
    public function getStreetAddress()
    {
        return $this->container['street_address'];
    }

    /**
     * Sets street_address
     *
     * @param string $street_address street_address
     *
     * @return $this
     */
    public function setStreetAddress($street_address)
    {
        $this->container['street_address'] = $street_address;

        return $this;
    }

    /**
     * Gets street_address2
     *
     * @return string
     */
    public function getStreetAddress2()
    {
        return $this->container['street_address2'];
    }

    /**
     * Sets street_address2
     *
     * @param string $street_address2 street_address2
     *
     * @return $this
     */
    public function setStreetAddress2($street_address2)
    {
        $this->container['street_address2'] = $street_address2;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets shipping_same_as_location
     *
     * @return int
     */
    public function getShippingSameAsLocation()
    {
        return $this->container['shipping_same_as_location'];
    }

    /**
     * Sets shipping_same_as_location
     *
     * @param int $shipping_same_as_location shipping_same_as_location
     *
     * @return $this
     */
    public function setShippingSameAsLocation($shipping_same_as_location)
    {
        $this->container['shipping_same_as_location'] = $shipping_same_as_location;

        return $this;
    }

    /**
     * Gets shipping_contact_name
     *
     * @return string
     */
    public function getShippingContactName()
    {
        return $this->container['shipping_contact_name'];
    }

    /**
     * Sets shipping_contact_name
     *
     * @param string $shipping_contact_name shipping_contact_name
     *
     * @return $this
     */
    public function setShippingContactName($shipping_contact_name)
    {
        $this->container['shipping_contact_name'] = $shipping_contact_name;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return string
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param string $shipping_address shipping_address
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_address2
     *
     * @return string
     */
    public function getShippingAddress2()
    {
        return $this->container['shipping_address2'];
    }

    /**
     * Sets shipping_address2
     *
     * @param string $shipping_address2 shipping_address2
     *
     * @return $this
     */
    public function setShippingAddress2($shipping_address2)
    {
        $this->container['shipping_address2'] = $shipping_address2;

        return $this;
    }

    /**
     * Gets shipping_city
     *
     * @return string
     */
    public function getShippingCity()
    {
        return $this->container['shipping_city'];
    }

    /**
     * Sets shipping_city
     *
     * @param string $shipping_city shipping_city
     *
     * @return $this
     */
    public function setShippingCity($shipping_city)
    {
        $this->container['shipping_city'] = $shipping_city;

        return $this;
    }

    /**
     * Gets shipping_state
     *
     * @return string
     */
    public function getShippingState()
    {
        return $this->container['shipping_state'];
    }

    /**
     * Sets shipping_state
     *
     * @param string $shipping_state shipping_state
     *
     * @return $this
     */
    public function setShippingState($shipping_state)
    {
        $this->container['shipping_state'] = $shipping_state;

        return $this;
    }

    /**
     * Gets shipping_postal_code
     *
     * @return string
     */
    public function getShippingPostalCode()
    {
        return $this->container['shipping_postal_code'];
    }

    /**
     * Sets shipping_postal_code
     *
     * @param string $shipping_postal_code shipping_postal_code
     *
     * @return $this
     */
    public function setShippingPostalCode($shipping_postal_code)
    {
        $this->container['shipping_postal_code'] = $shipping_postal_code;

        return $this;
    }

    /**
     * Gets shipping_country
     *
     * @return string
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     *
     * @param string $shipping_country shipping_country
     *
     * @return $this
     */
    public function setShippingCountry($shipping_country)
    {
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


