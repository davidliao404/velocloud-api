<?php
/**
 * ImageUpdateData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ImageUpdateData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImageUpdateData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'image_update_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'build_number' => 'string',
        'profile_device_family' => 'string',
        'profile_version' => 'string',
        'software_package_id' => 'int',
        'software_package_name' => 'string',
        'version' => 'string',
        'window_duration_mins' => 'int',
        'windowed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'build_number' => null,
        'profile_device_family' => null,
        'profile_version' => null,
        'software_package_id' => null,
        'software_package_name' => null,
        'version' => null,
        'window_duration_mins' => null,
        'windowed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'build_number' => 'buildNumber',
        'profile_device_family' => 'profileDeviceFamily',
        'profile_version' => 'profileVersion',
        'software_package_id' => 'softwarePackageId',
        'software_package_name' => 'softwarePackageName',
        'version' => 'version',
        'window_duration_mins' => 'windowDurationMins',
        'windowed' => 'windowed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'build_number' => 'setBuildNumber',
        'profile_device_family' => 'setProfileDeviceFamily',
        'profile_version' => 'setProfileVersion',
        'software_package_id' => 'setSoftwarePackageId',
        'software_package_name' => 'setSoftwarePackageName',
        'version' => 'setVersion',
        'window_duration_mins' => 'setWindowDurationMins',
        'windowed' => 'setWindowed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'build_number' => 'getBuildNumber',
        'profile_device_family' => 'getProfileDeviceFamily',
        'profile_version' => 'getProfileVersion',
        'software_package_id' => 'getSoftwarePackageId',
        'software_package_name' => 'getSoftwarePackageName',
        'version' => 'getVersion',
        'window_duration_mins' => 'getWindowDurationMins',
        'windowed' => 'getWindowed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['build_number'] = isset($data['build_number']) ? $data['build_number'] : null;
        $this->container['profile_device_family'] = isset($data['profile_device_family']) ? $data['profile_device_family'] : null;
        $this->container['profile_version'] = isset($data['profile_version']) ? $data['profile_version'] : null;
        $this->container['software_package_id'] = isset($data['software_package_id']) ? $data['software_package_id'] : null;
        $this->container['software_package_name'] = isset($data['software_package_name']) ? $data['software_package_name'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['window_duration_mins'] = isset($data['window_duration_mins']) ? $data['window_duration_mins'] : null;
        $this->container['windowed'] = isset($data['windowed']) ? $data['windowed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets build_number
     *
     * @return string
     */
    public function getBuildNumber()
    {
        return $this->container['build_number'];
    }

    /**
     * Sets build_number
     *
     * @param string $build_number build_number
     *
     * @return $this
     */
    public function setBuildNumber($build_number)
    {
        $this->container['build_number'] = $build_number;

        return $this;
    }

    /**
     * Gets profile_device_family
     *
     * @return string
     */
    public function getProfileDeviceFamily()
    {
        return $this->container['profile_device_family'];
    }

    /**
     * Sets profile_device_family
     *
     * @param string $profile_device_family profile_device_family
     *
     * @return $this
     */
    public function setProfileDeviceFamily($profile_device_family)
    {
        $this->container['profile_device_family'] = $profile_device_family;

        return $this;
    }

    /**
     * Gets profile_version
     *
     * @return string
     */
    public function getProfileVersion()
    {
        return $this->container['profile_version'];
    }

    /**
     * Sets profile_version
     *
     * @param string $profile_version profile_version
     *
     * @return $this
     */
    public function setProfileVersion($profile_version)
    {
        $this->container['profile_version'] = $profile_version;

        return $this;
    }

    /**
     * Gets software_package_id
     *
     * @return int
     */
    public function getSoftwarePackageId()
    {
        return $this->container['software_package_id'];
    }

    /**
     * Sets software_package_id
     *
     * @param int $software_package_id software_package_id
     *
     * @return $this
     */
    public function setSoftwarePackageId($software_package_id)
    {
        $this->container['software_package_id'] = $software_package_id;

        return $this;
    }

    /**
     * Gets software_package_name
     *
     * @return string
     */
    public function getSoftwarePackageName()
    {
        return $this->container['software_package_name'];
    }

    /**
     * Sets software_package_name
     *
     * @param string $software_package_name software_package_name
     *
     * @return $this
     */
    public function setSoftwarePackageName($software_package_name)
    {
        $this->container['software_package_name'] = $software_package_name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets window_duration_mins
     *
     * @return int
     */
    public function getWindowDurationMins()
    {
        return $this->container['window_duration_mins'];
    }

    /**
     * Sets window_duration_mins
     *
     * @param int $window_duration_mins window_duration_mins
     *
     * @return $this
     */
    public function setWindowDurationMins($window_duration_mins)
    {
        $this->container['window_duration_mins'] = $window_duration_mins;

        return $this;
    }

    /**
     * Gets windowed
     *
     * @return bool
     */
    public function getWindowed()
    {
        return $this->container['windowed'];
    }

    /**
     * Sets windowed
     *
     * @param bool $windowed windowed
     *
     * @return $this
     */
    public function setWindowed($windowed)
    {
        $this->container['windowed'] = $windowed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


