<?php
/**
 * ConfigurationGetConfigurationModules
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConfigurationGetConfigurationModules Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigurationGetConfigurationModules implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'configuration_get_configuration_modules';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'configuration_id' => 'int',
        'enterprise_id' => 'int',
        'no_data' => 'bool',
        'modules' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'configuration_id' => null,
        'enterprise_id' => null,
        'no_data' => null,
        'modules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'configuration_id' => 'configurationId',
        'enterprise_id' => 'enterpriseId',
        'no_data' => 'noData',
        'modules' => 'modules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'configuration_id' => 'setConfigurationId',
        'enterprise_id' => 'setEnterpriseId',
        'no_data' => 'setNoData',
        'modules' => 'setModules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'configuration_id' => 'getConfigurationId',
        'enterprise_id' => 'getEnterpriseId',
        'no_data' => 'getNoData',
        'modules' => 'getModules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODULES_IMAGE_UPDATE = 'imageUpdate';
    const MODULES_CONTROL_PLANE = 'controlPlane';
    const MODULES_MANAGEMENT_PLANE = 'managementPlane';
    const MODULES_FIREWALL = 'firewall';
    const MODULES_QOS = 'QOS';
    const MODULES_DEVICE_SETTINGS = 'deviceSettings';
    const MODULES_WAN = 'WAN';
    const MODULES_META_DATA = 'metaData';
    const MODULES_PROPERTIES = 'properties';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModulesAllowableValues()
    {
        return [
            self::MODULES_IMAGE_UPDATE,
            self::MODULES_CONTROL_PLANE,
            self::MODULES_MANAGEMENT_PLANE,
            self::MODULES_FIREWALL,
            self::MODULES_QOS,
            self::MODULES_DEVICE_SETTINGS,
            self::MODULES_WAN,
            self::MODULES_META_DATA,
            self::MODULES_PROPERTIES,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['configuration_id'] = isset($data['configuration_id']) ? $data['configuration_id'] : null;
        $this->container['enterprise_id'] = isset($data['enterprise_id']) ? $data['enterprise_id'] : null;
        $this->container['no_data'] = isset($data['no_data']) ? $data['no_data'] : null;
        $this->container['modules'] = isset($data['modules']) ? $data['modules'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['configuration_id'] === null) {
            $invalidProperties[] = "'configuration_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['configuration_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets configuration_id
     *
     * @return int
     */
    public function getConfigurationId()
    {
        return $this->container['configuration_id'];
    }

    /**
     * Sets configuration_id
     *
     * @param int $configuration_id configuration_id
     *
     * @return $this
     */
    public function setConfigurationId($configuration_id)
    {
        $this->container['configuration_id'] = $configuration_id;

        return $this;
    }

    /**
     * Gets enterprise_id
     *
     * @return int
     */
    public function getEnterpriseId()
    {
        return $this->container['enterprise_id'];
    }

    /**
     * Sets enterprise_id
     *
     * @param int $enterprise_id enterprise_id
     *
     * @return $this
     */
    public function setEnterpriseId($enterprise_id)
    {
        $this->container['enterprise_id'] = $enterprise_id;

        return $this;
    }

    /**
     * Gets no_data
     *
     * @return bool
     */
    public function getNoData()
    {
        return $this->container['no_data'];
    }

    /**
     * Sets no_data
     *
     * @param bool $no_data no_data
     *
     * @return $this
     */
    public function setNoData($no_data)
    {
        $this->container['no_data'] = $no_data;

        return $this;
    }

    /**
     * Gets modules
     *
     * @return string[]
     */
    public function getModules()
    {
        return $this->container['modules'];
    }

    /**
     * Sets modules
     *
     * @param string[] $modules modules
     *
     * @return $this
     */
    public function setModules($modules)
    {
        $allowedValues = $this->getModulesAllowableValues();
        if (!is_null($modules) && array_diff($modules, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'modules', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['modules'] = $modules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


