<?php
/**
 * EnterpriseGetEnterpriseCapabilitiesResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnterpriseGetEnterpriseCapabilitiesResult Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterpriseGetEnterpriseCapabilitiesResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'enterprise_get_enterprise_capabilities_result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable_bgp' => 'bool',
        'enable_cos_mapping' => 'bool',
        'enable_fw_logs' => 'bool',
        'enable_ospf' => 'bool',
        'enable_pki' => 'bool',
        'enable_service_rate_limiting' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enable_bgp' => null,
        'enable_cos_mapping' => null,
        'enable_fw_logs' => null,
        'enable_ospf' => null,
        'enable_pki' => null,
        'enable_service_rate_limiting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_bgp' => 'enableBGP',
        'enable_cos_mapping' => 'enableCosMapping',
        'enable_fw_logs' => 'enableFwLogs',
        'enable_ospf' => 'enableOSPF',
        'enable_pki' => 'enablePKI',
        'enable_service_rate_limiting' => 'enableServiceRateLimiting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_bgp' => 'setEnableBgp',
        'enable_cos_mapping' => 'setEnableCosMapping',
        'enable_fw_logs' => 'setEnableFwLogs',
        'enable_ospf' => 'setEnableOspf',
        'enable_pki' => 'setEnablePki',
        'enable_service_rate_limiting' => 'setEnableServiceRateLimiting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_bgp' => 'getEnableBgp',
        'enable_cos_mapping' => 'getEnableCosMapping',
        'enable_fw_logs' => 'getEnableFwLogs',
        'enable_ospf' => 'getEnableOspf',
        'enable_pki' => 'getEnablePki',
        'enable_service_rate_limiting' => 'getEnableServiceRateLimiting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_bgp'] = isset($data['enable_bgp']) ? $data['enable_bgp'] : null;
        $this->container['enable_cos_mapping'] = isset($data['enable_cos_mapping']) ? $data['enable_cos_mapping'] : null;
        $this->container['enable_fw_logs'] = isset($data['enable_fw_logs']) ? $data['enable_fw_logs'] : null;
        $this->container['enable_ospf'] = isset($data['enable_ospf']) ? $data['enable_ospf'] : null;
        $this->container['enable_pki'] = isset($data['enable_pki']) ? $data['enable_pki'] : null;
        $this->container['enable_service_rate_limiting'] = isset($data['enable_service_rate_limiting']) ? $data['enable_service_rate_limiting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets enable_bgp
     *
     * @return bool
     */
    public function getEnableBgp()
    {
        return $this->container['enable_bgp'];
    }

    /**
     * Sets enable_bgp
     *
     * @param bool $enable_bgp enable_bgp
     *
     * @return $this
     */
    public function setEnableBgp($enable_bgp)
    {
        $this->container['enable_bgp'] = $enable_bgp;

        return $this;
    }

    /**
     * Gets enable_cos_mapping
     *
     * @return bool
     */
    public function getEnableCosMapping()
    {
        return $this->container['enable_cos_mapping'];
    }

    /**
     * Sets enable_cos_mapping
     *
     * @param bool $enable_cos_mapping enable_cos_mapping
     *
     * @return $this
     */
    public function setEnableCosMapping($enable_cos_mapping)
    {
        $this->container['enable_cos_mapping'] = $enable_cos_mapping;

        return $this;
    }

    /**
     * Gets enable_fw_logs
     *
     * @return bool
     */
    public function getEnableFwLogs()
    {
        return $this->container['enable_fw_logs'];
    }

    /**
     * Sets enable_fw_logs
     *
     * @param bool $enable_fw_logs enable_fw_logs
     *
     * @return $this
     */
    public function setEnableFwLogs($enable_fw_logs)
    {
        $this->container['enable_fw_logs'] = $enable_fw_logs;

        return $this;
    }

    /**
     * Gets enable_ospf
     *
     * @return bool
     */
    public function getEnableOspf()
    {
        return $this->container['enable_ospf'];
    }

    /**
     * Sets enable_ospf
     *
     * @param bool $enable_ospf enable_ospf
     *
     * @return $this
     */
    public function setEnableOspf($enable_ospf)
    {
        $this->container['enable_ospf'] = $enable_ospf;

        return $this;
    }

    /**
     * Gets enable_pki
     *
     * @return bool
     */
    public function getEnablePki()
    {
        return $this->container['enable_pki'];
    }

    /**
     * Sets enable_pki
     *
     * @param bool $enable_pki enable_pki
     *
     * @return $this
     */
    public function setEnablePki($enable_pki)
    {
        $this->container['enable_pki'] = $enable_pki;

        return $this;
    }

    /**
     * Gets enable_service_rate_limiting
     *
     * @return bool
     */
    public function getEnableServiceRateLimiting()
    {
        return $this->container['enable_service_rate_limiting'];
    }

    /**
     * Sets enable_service_rate_limiting
     *
     * @param bool $enable_service_rate_limiting enable_service_rate_limiting
     *
     * @return $this
     */
    public function setEnableServiceRateLimiting($enable_service_rate_limiting)
    {
        $this->container['enable_service_rate_limiting'] = $enable_service_rate_limiting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


