<?php
/**
 * LiveModeDataLinkStatsDataData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LiveModeDataLinkStatsDataData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LiveModeDataLinkStatsDataData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'live_mode_data_link_stats_data_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backup_only' => 'int',
        'best_jitter_ms_rx' => 'int',
        'best_jitter_ms_tx' => 'int',
        'best_latency_ms_rx' => 'int',
        'best_latency_ms_tx' => 'int',
        'best_loss_pct_rx' => 'int',
        'best_loss_pct_tx' => 'int',
        'bps_of_best_path_rx' => 'int',
        'bps_of_best_path_tx' => 'int',
        'control_bytes_rx' => 'int',
        'control_bytes_tx' => 'int',
        'control_packets_rx' => 'int',
        'control_packets_tx' => 'int',
        'destinations' => '\Swagger\Client\Model\Destinations[]',
        'icmp_bytes_rx' => 'int',
        'icmp_bytes_tx' => 'int',
        'icmp_packets_rx' => 'int',
        'icmp_packets_tx' => 'int',
        'interface' => 'string',
        'internal_id' => 'string',
        'local_ip_address' => 'string',
        'logical_id' => 'string',
        'mode' => 'string',
        'mtu' => 'int',
        'name' => 'string',
        'other_bytes_rx' => 'int',
        'other_bytes_tx' => 'int',
        'other_packets_rx' => 'int',
        'other_packets_tx' => 'int',
        'p1_bytes_rx' => 'int',
        'p1_bytes_tx' => 'int',
        'p1_packets_rx' => 'int',
        'p1_packets_tx' => 'int',
        'p2_bytes_rx' => 'int',
        'p2_bytes_tx' => 'int',
        'p2_packets_rx' => 'int',
        'p2_packets_tx' => 'int',
        'p3_bytes_rx' => 'int',
        'p3_bytes_tx' => 'int',
        'p3_packets_rx' => 'int',
        'p3_packets_tx' => 'int',
        'public_ip_address' => 'string',
        'score_rx' => 'int',
        'score_tx' => 'int',
        'signal_strength' => 'int',
        'state' => 'string',
        'tcp_bytes_rx' => 'int',
        'tcp_bytes_tx' => 'int',
        'tcp_packets_rx' => 'int',
        'tcp_packets_tx' => 'int',
        'type' => 'string',
        'udp_bytes_rx' => 'int',
        'udp_bytes_tx' => 'int',
        'udp_hole_punching' => 'int',
        'udp_packets_rx' => 'int',
        'udp_packets_tx' => 'int',
        'vlan_id' => 'int',
        'vpn_state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backup_only' => null,
        'best_jitter_ms_rx' => null,
        'best_jitter_ms_tx' => null,
        'best_latency_ms_rx' => null,
        'best_latency_ms_tx' => null,
        'best_loss_pct_rx' => null,
        'best_loss_pct_tx' => null,
        'bps_of_best_path_rx' => null,
        'bps_of_best_path_tx' => null,
        'control_bytes_rx' => null,
        'control_bytes_tx' => null,
        'control_packets_rx' => null,
        'control_packets_tx' => null,
        'destinations' => null,
        'icmp_bytes_rx' => null,
        'icmp_bytes_tx' => null,
        'icmp_packets_rx' => null,
        'icmp_packets_tx' => null,
        'interface' => null,
        'internal_id' => null,
        'local_ip_address' => null,
        'logical_id' => null,
        'mode' => null,
        'mtu' => null,
        'name' => null,
        'other_bytes_rx' => null,
        'other_bytes_tx' => null,
        'other_packets_rx' => null,
        'other_packets_tx' => null,
        'p1_bytes_rx' => null,
        'p1_bytes_tx' => null,
        'p1_packets_rx' => null,
        'p1_packets_tx' => null,
        'p2_bytes_rx' => null,
        'p2_bytes_tx' => null,
        'p2_packets_rx' => null,
        'p2_packets_tx' => null,
        'p3_bytes_rx' => null,
        'p3_bytes_tx' => null,
        'p3_packets_rx' => null,
        'p3_packets_tx' => null,
        'public_ip_address' => null,
        'score_rx' => null,
        'score_tx' => null,
        'signal_strength' => null,
        'state' => null,
        'tcp_bytes_rx' => null,
        'tcp_bytes_tx' => null,
        'tcp_packets_rx' => null,
        'tcp_packets_tx' => null,
        'type' => null,
        'udp_bytes_rx' => null,
        'udp_bytes_tx' => null,
        'udp_hole_punching' => null,
        'udp_packets_rx' => null,
        'udp_packets_tx' => null,
        'vlan_id' => null,
        'vpn_state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_only' => 'backupOnly',
        'best_jitter_ms_rx' => 'bestJitterMsRx',
        'best_jitter_ms_tx' => 'bestJitterMsTx',
        'best_latency_ms_rx' => 'bestLatencyMsRx',
        'best_latency_ms_tx' => 'bestLatencyMsTx',
        'best_loss_pct_rx' => 'bestLossPctRx',
        'best_loss_pct_tx' => 'bestLossPctTx',
        'bps_of_best_path_rx' => 'bpsOfBestPathRx',
        'bps_of_best_path_tx' => 'bpsOfBestPathTx',
        'control_bytes_rx' => 'controlBytesRx',
        'control_bytes_tx' => 'controlBytesTx',
        'control_packets_rx' => 'controlPacketsRx',
        'control_packets_tx' => 'controlPacketsTx',
        'destinations' => 'destinations',
        'icmp_bytes_rx' => 'icmpBytesRx',
        'icmp_bytes_tx' => 'icmpBytesTx',
        'icmp_packets_rx' => 'icmpPacketsRx',
        'icmp_packets_tx' => 'icmpPacketsTx',
        'interface' => 'interface',
        'internal_id' => 'internalId',
        'local_ip_address' => 'localIpAddress',
        'logical_id' => 'logicalId',
        'mode' => 'mode',
        'mtu' => 'mtu',
        'name' => 'name',
        'other_bytes_rx' => 'otherBytesRx',
        'other_bytes_tx' => 'otherBytesTx',
        'other_packets_rx' => 'otherPacketsRx',
        'other_packets_tx' => 'otherPacketsTx',
        'p1_bytes_rx' => 'p1BytesRx',
        'p1_bytes_tx' => 'p1BytesTx',
        'p1_packets_rx' => 'p1PacketsRx',
        'p1_packets_tx' => 'p1PacketsTx',
        'p2_bytes_rx' => 'p2BytesRx',
        'p2_bytes_tx' => 'p2BytesTx',
        'p2_packets_rx' => 'p2PacketsRx',
        'p2_packets_tx' => 'p2PacketsTx',
        'p3_bytes_rx' => 'p3BytesRx',
        'p3_bytes_tx' => 'p3BytesTx',
        'p3_packets_rx' => 'p3PacketsRx',
        'p3_packets_tx' => 'p3PacketsTx',
        'public_ip_address' => 'publicIpAddress',
        'score_rx' => 'scoreRx',
        'score_tx' => 'scoreTx',
        'signal_strength' => 'signalStrength',
        'state' => 'state',
        'tcp_bytes_rx' => 'tcpBytesRx',
        'tcp_bytes_tx' => 'tcpBytesTx',
        'tcp_packets_rx' => 'tcpPacketsRx',
        'tcp_packets_tx' => 'tcpPacketsTx',
        'type' => 'type',
        'udp_bytes_rx' => 'udpBytesRx',
        'udp_bytes_tx' => 'udpBytesTx',
        'udp_hole_punching' => 'udpHolePunching',
        'udp_packets_rx' => 'udpPacketsRx',
        'udp_packets_tx' => 'udpPacketsTx',
        'vlan_id' => 'vlanId',
        'vpn_state' => 'vpnState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_only' => 'setBackupOnly',
        'best_jitter_ms_rx' => 'setBestJitterMsRx',
        'best_jitter_ms_tx' => 'setBestJitterMsTx',
        'best_latency_ms_rx' => 'setBestLatencyMsRx',
        'best_latency_ms_tx' => 'setBestLatencyMsTx',
        'best_loss_pct_rx' => 'setBestLossPctRx',
        'best_loss_pct_tx' => 'setBestLossPctTx',
        'bps_of_best_path_rx' => 'setBpsOfBestPathRx',
        'bps_of_best_path_tx' => 'setBpsOfBestPathTx',
        'control_bytes_rx' => 'setControlBytesRx',
        'control_bytes_tx' => 'setControlBytesTx',
        'control_packets_rx' => 'setControlPacketsRx',
        'control_packets_tx' => 'setControlPacketsTx',
        'destinations' => 'setDestinations',
        'icmp_bytes_rx' => 'setIcmpBytesRx',
        'icmp_bytes_tx' => 'setIcmpBytesTx',
        'icmp_packets_rx' => 'setIcmpPacketsRx',
        'icmp_packets_tx' => 'setIcmpPacketsTx',
        'interface' => 'setInterface',
        'internal_id' => 'setInternalId',
        'local_ip_address' => 'setLocalIpAddress',
        'logical_id' => 'setLogicalId',
        'mode' => 'setMode',
        'mtu' => 'setMtu',
        'name' => 'setName',
        'other_bytes_rx' => 'setOtherBytesRx',
        'other_bytes_tx' => 'setOtherBytesTx',
        'other_packets_rx' => 'setOtherPacketsRx',
        'other_packets_tx' => 'setOtherPacketsTx',
        'p1_bytes_rx' => 'setP1BytesRx',
        'p1_bytes_tx' => 'setP1BytesTx',
        'p1_packets_rx' => 'setP1PacketsRx',
        'p1_packets_tx' => 'setP1PacketsTx',
        'p2_bytes_rx' => 'setP2BytesRx',
        'p2_bytes_tx' => 'setP2BytesTx',
        'p2_packets_rx' => 'setP2PacketsRx',
        'p2_packets_tx' => 'setP2PacketsTx',
        'p3_bytes_rx' => 'setP3BytesRx',
        'p3_bytes_tx' => 'setP3BytesTx',
        'p3_packets_rx' => 'setP3PacketsRx',
        'p3_packets_tx' => 'setP3PacketsTx',
        'public_ip_address' => 'setPublicIpAddress',
        'score_rx' => 'setScoreRx',
        'score_tx' => 'setScoreTx',
        'signal_strength' => 'setSignalStrength',
        'state' => 'setState',
        'tcp_bytes_rx' => 'setTcpBytesRx',
        'tcp_bytes_tx' => 'setTcpBytesTx',
        'tcp_packets_rx' => 'setTcpPacketsRx',
        'tcp_packets_tx' => 'setTcpPacketsTx',
        'type' => 'setType',
        'udp_bytes_rx' => 'setUdpBytesRx',
        'udp_bytes_tx' => 'setUdpBytesTx',
        'udp_hole_punching' => 'setUdpHolePunching',
        'udp_packets_rx' => 'setUdpPacketsRx',
        'udp_packets_tx' => 'setUdpPacketsTx',
        'vlan_id' => 'setVlanId',
        'vpn_state' => 'setVpnState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_only' => 'getBackupOnly',
        'best_jitter_ms_rx' => 'getBestJitterMsRx',
        'best_jitter_ms_tx' => 'getBestJitterMsTx',
        'best_latency_ms_rx' => 'getBestLatencyMsRx',
        'best_latency_ms_tx' => 'getBestLatencyMsTx',
        'best_loss_pct_rx' => 'getBestLossPctRx',
        'best_loss_pct_tx' => 'getBestLossPctTx',
        'bps_of_best_path_rx' => 'getBpsOfBestPathRx',
        'bps_of_best_path_tx' => 'getBpsOfBestPathTx',
        'control_bytes_rx' => 'getControlBytesRx',
        'control_bytes_tx' => 'getControlBytesTx',
        'control_packets_rx' => 'getControlPacketsRx',
        'control_packets_tx' => 'getControlPacketsTx',
        'destinations' => 'getDestinations',
        'icmp_bytes_rx' => 'getIcmpBytesRx',
        'icmp_bytes_tx' => 'getIcmpBytesTx',
        'icmp_packets_rx' => 'getIcmpPacketsRx',
        'icmp_packets_tx' => 'getIcmpPacketsTx',
        'interface' => 'getInterface',
        'internal_id' => 'getInternalId',
        'local_ip_address' => 'getLocalIpAddress',
        'logical_id' => 'getLogicalId',
        'mode' => 'getMode',
        'mtu' => 'getMtu',
        'name' => 'getName',
        'other_bytes_rx' => 'getOtherBytesRx',
        'other_bytes_tx' => 'getOtherBytesTx',
        'other_packets_rx' => 'getOtherPacketsRx',
        'other_packets_tx' => 'getOtherPacketsTx',
        'p1_bytes_rx' => 'getP1BytesRx',
        'p1_bytes_tx' => 'getP1BytesTx',
        'p1_packets_rx' => 'getP1PacketsRx',
        'p1_packets_tx' => 'getP1PacketsTx',
        'p2_bytes_rx' => 'getP2BytesRx',
        'p2_bytes_tx' => 'getP2BytesTx',
        'p2_packets_rx' => 'getP2PacketsRx',
        'p2_packets_tx' => 'getP2PacketsTx',
        'p3_bytes_rx' => 'getP3BytesRx',
        'p3_bytes_tx' => 'getP3BytesTx',
        'p3_packets_rx' => 'getP3PacketsRx',
        'p3_packets_tx' => 'getP3PacketsTx',
        'public_ip_address' => 'getPublicIpAddress',
        'score_rx' => 'getScoreRx',
        'score_tx' => 'getScoreTx',
        'signal_strength' => 'getSignalStrength',
        'state' => 'getState',
        'tcp_bytes_rx' => 'getTcpBytesRx',
        'tcp_bytes_tx' => 'getTcpBytesTx',
        'tcp_packets_rx' => 'getTcpPacketsRx',
        'tcp_packets_tx' => 'getTcpPacketsTx',
        'type' => 'getType',
        'udp_bytes_rx' => 'getUdpBytesRx',
        'udp_bytes_tx' => 'getUdpBytesTx',
        'udp_hole_punching' => 'getUdpHolePunching',
        'udp_packets_rx' => 'getUdpPacketsRx',
        'udp_packets_tx' => 'getUdpPacketsTx',
        'vlan_id' => 'getVlanId',
        'vpn_state' => 'getVpnState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODE__PUBLIC = 'PUBLIC';
    const MODE__PRIVATE = 'PRIVATE';
    const STATE_UNKNOWN = 'UNKNOWN';
    const STATE_STABLE = 'STABLE';
    const STATE_UNSTABLE = 'UNSTABLE';
    const STATE_DISCONNECTED = 'DISCONNECTED';
    const STATE_QUIET = 'QUIET';
    const STATE_INITIAL = 'INITIAL';
    const STATE_STANDBY = 'STANDBY';
    const TYPE_WIRED = 'WIRED';
    const TYPE_WIRELESS = 'WIRELESS';
    const VPN_STATE_UNKNOWN = 'UNKNOWN';
    const VPN_STATE_STABLE = 'STABLE';
    const VPN_STATE_UNSTABLE = 'UNSTABLE';
    const VPN_STATE_DEAD = 'DEAD';
    const VPN_STATE_STANDBY = 'STANDBY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE__PUBLIC,
            self::MODE__PRIVATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_UNKNOWN,
            self::STATE_STABLE,
            self::STATE_UNSTABLE,
            self::STATE_DISCONNECTED,
            self::STATE_QUIET,
            self::STATE_INITIAL,
            self::STATE_STANDBY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_WIRED,
            self::TYPE_WIRELESS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVpnStateAllowableValues()
    {
        return [
            self::VPN_STATE_UNKNOWN,
            self::VPN_STATE_STABLE,
            self::VPN_STATE_UNSTABLE,
            self::VPN_STATE_DEAD,
            self::VPN_STATE_STANDBY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_only'] = isset($data['backup_only']) ? $data['backup_only'] : null;
        $this->container['best_jitter_ms_rx'] = isset($data['best_jitter_ms_rx']) ? $data['best_jitter_ms_rx'] : null;
        $this->container['best_jitter_ms_tx'] = isset($data['best_jitter_ms_tx']) ? $data['best_jitter_ms_tx'] : null;
        $this->container['best_latency_ms_rx'] = isset($data['best_latency_ms_rx']) ? $data['best_latency_ms_rx'] : null;
        $this->container['best_latency_ms_tx'] = isset($data['best_latency_ms_tx']) ? $data['best_latency_ms_tx'] : null;
        $this->container['best_loss_pct_rx'] = isset($data['best_loss_pct_rx']) ? $data['best_loss_pct_rx'] : null;
        $this->container['best_loss_pct_tx'] = isset($data['best_loss_pct_tx']) ? $data['best_loss_pct_tx'] : null;
        $this->container['bps_of_best_path_rx'] = isset($data['bps_of_best_path_rx']) ? $data['bps_of_best_path_rx'] : null;
        $this->container['bps_of_best_path_tx'] = isset($data['bps_of_best_path_tx']) ? $data['bps_of_best_path_tx'] : null;
        $this->container['control_bytes_rx'] = isset($data['control_bytes_rx']) ? $data['control_bytes_rx'] : null;
        $this->container['control_bytes_tx'] = isset($data['control_bytes_tx']) ? $data['control_bytes_tx'] : null;
        $this->container['control_packets_rx'] = isset($data['control_packets_rx']) ? $data['control_packets_rx'] : null;
        $this->container['control_packets_tx'] = isset($data['control_packets_tx']) ? $data['control_packets_tx'] : null;
        $this->container['destinations'] = isset($data['destinations']) ? $data['destinations'] : null;
        $this->container['icmp_bytes_rx'] = isset($data['icmp_bytes_rx']) ? $data['icmp_bytes_rx'] : null;
        $this->container['icmp_bytes_tx'] = isset($data['icmp_bytes_tx']) ? $data['icmp_bytes_tx'] : null;
        $this->container['icmp_packets_rx'] = isset($data['icmp_packets_rx']) ? $data['icmp_packets_rx'] : null;
        $this->container['icmp_packets_tx'] = isset($data['icmp_packets_tx']) ? $data['icmp_packets_tx'] : null;
        $this->container['interface'] = isset($data['interface']) ? $data['interface'] : null;
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['local_ip_address'] = isset($data['local_ip_address']) ? $data['local_ip_address'] : null;
        $this->container['logical_id'] = isset($data['logical_id']) ? $data['logical_id'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['mtu'] = isset($data['mtu']) ? $data['mtu'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['other_bytes_rx'] = isset($data['other_bytes_rx']) ? $data['other_bytes_rx'] : null;
        $this->container['other_bytes_tx'] = isset($data['other_bytes_tx']) ? $data['other_bytes_tx'] : null;
        $this->container['other_packets_rx'] = isset($data['other_packets_rx']) ? $data['other_packets_rx'] : null;
        $this->container['other_packets_tx'] = isset($data['other_packets_tx']) ? $data['other_packets_tx'] : null;
        $this->container['p1_bytes_rx'] = isset($data['p1_bytes_rx']) ? $data['p1_bytes_rx'] : null;
        $this->container['p1_bytes_tx'] = isset($data['p1_bytes_tx']) ? $data['p1_bytes_tx'] : null;
        $this->container['p1_packets_rx'] = isset($data['p1_packets_rx']) ? $data['p1_packets_rx'] : null;
        $this->container['p1_packets_tx'] = isset($data['p1_packets_tx']) ? $data['p1_packets_tx'] : null;
        $this->container['p2_bytes_rx'] = isset($data['p2_bytes_rx']) ? $data['p2_bytes_rx'] : null;
        $this->container['p2_bytes_tx'] = isset($data['p2_bytes_tx']) ? $data['p2_bytes_tx'] : null;
        $this->container['p2_packets_rx'] = isset($data['p2_packets_rx']) ? $data['p2_packets_rx'] : null;
        $this->container['p2_packets_tx'] = isset($data['p2_packets_tx']) ? $data['p2_packets_tx'] : null;
        $this->container['p3_bytes_rx'] = isset($data['p3_bytes_rx']) ? $data['p3_bytes_rx'] : null;
        $this->container['p3_bytes_tx'] = isset($data['p3_bytes_tx']) ? $data['p3_bytes_tx'] : null;
        $this->container['p3_packets_rx'] = isset($data['p3_packets_rx']) ? $data['p3_packets_rx'] : null;
        $this->container['p3_packets_tx'] = isset($data['p3_packets_tx']) ? $data['p3_packets_tx'] : null;
        $this->container['public_ip_address'] = isset($data['public_ip_address']) ? $data['public_ip_address'] : null;
        $this->container['score_rx'] = isset($data['score_rx']) ? $data['score_rx'] : null;
        $this->container['score_tx'] = isset($data['score_tx']) ? $data['score_tx'] : null;
        $this->container['signal_strength'] = isset($data['signal_strength']) ? $data['signal_strength'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['tcp_bytes_rx'] = isset($data['tcp_bytes_rx']) ? $data['tcp_bytes_rx'] : null;
        $this->container['tcp_bytes_tx'] = isset($data['tcp_bytes_tx']) ? $data['tcp_bytes_tx'] : null;
        $this->container['tcp_packets_rx'] = isset($data['tcp_packets_rx']) ? $data['tcp_packets_rx'] : null;
        $this->container['tcp_packets_tx'] = isset($data['tcp_packets_tx']) ? $data['tcp_packets_tx'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['udp_bytes_rx'] = isset($data['udp_bytes_rx']) ? $data['udp_bytes_rx'] : null;
        $this->container['udp_bytes_tx'] = isset($data['udp_bytes_tx']) ? $data['udp_bytes_tx'] : null;
        $this->container['udp_hole_punching'] = isset($data['udp_hole_punching']) ? $data['udp_hole_punching'] : null;
        $this->container['udp_packets_rx'] = isset($data['udp_packets_rx']) ? $data['udp_packets_rx'] : null;
        $this->container['udp_packets_tx'] = isset($data['udp_packets_tx']) ? $data['udp_packets_tx'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
        $this->container['vpn_state'] = isset($data['vpn_state']) ? $data['vpn_state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeAllowableValues();
        if (!in_array($this->container['mode'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVpnStateAllowableValues();
        if (!in_array($this->container['vpn_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vpn_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getModeAllowableValues();
        if (!in_array($this->container['mode'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getVpnStateAllowableValues();
        if (!in_array($this->container['vpn_state'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets backup_only
     *
     * @return int
     */
    public function getBackupOnly()
    {
        return $this->container['backup_only'];
    }

    /**
     * Sets backup_only
     *
     * @param int $backup_only backup_only
     *
     * @return $this
     */
    public function setBackupOnly($backup_only)
    {
        $this->container['backup_only'] = $backup_only;

        return $this;
    }

    /**
     * Gets best_jitter_ms_rx
     *
     * @return int
     */
    public function getBestJitterMsRx()
    {
        return $this->container['best_jitter_ms_rx'];
    }

    /**
     * Sets best_jitter_ms_rx
     *
     * @param int $best_jitter_ms_rx best_jitter_ms_rx
     *
     * @return $this
     */
    public function setBestJitterMsRx($best_jitter_ms_rx)
    {
        $this->container['best_jitter_ms_rx'] = $best_jitter_ms_rx;

        return $this;
    }

    /**
     * Gets best_jitter_ms_tx
     *
     * @return int
     */
    public function getBestJitterMsTx()
    {
        return $this->container['best_jitter_ms_tx'];
    }

    /**
     * Sets best_jitter_ms_tx
     *
     * @param int $best_jitter_ms_tx best_jitter_ms_tx
     *
     * @return $this
     */
    public function setBestJitterMsTx($best_jitter_ms_tx)
    {
        $this->container['best_jitter_ms_tx'] = $best_jitter_ms_tx;

        return $this;
    }

    /**
     * Gets best_latency_ms_rx
     *
     * @return int
     */
    public function getBestLatencyMsRx()
    {
        return $this->container['best_latency_ms_rx'];
    }

    /**
     * Sets best_latency_ms_rx
     *
     * @param int $best_latency_ms_rx best_latency_ms_rx
     *
     * @return $this
     */
    public function setBestLatencyMsRx($best_latency_ms_rx)
    {
        $this->container['best_latency_ms_rx'] = $best_latency_ms_rx;

        return $this;
    }

    /**
     * Gets best_latency_ms_tx
     *
     * @return int
     */
    public function getBestLatencyMsTx()
    {
        return $this->container['best_latency_ms_tx'];
    }

    /**
     * Sets best_latency_ms_tx
     *
     * @param int $best_latency_ms_tx best_latency_ms_tx
     *
     * @return $this
     */
    public function setBestLatencyMsTx($best_latency_ms_tx)
    {
        $this->container['best_latency_ms_tx'] = $best_latency_ms_tx;

        return $this;
    }

    /**
     * Gets best_loss_pct_rx
     *
     * @return int
     */
    public function getBestLossPctRx()
    {
        return $this->container['best_loss_pct_rx'];
    }

    /**
     * Sets best_loss_pct_rx
     *
     * @param int $best_loss_pct_rx best_loss_pct_rx
     *
     * @return $this
     */
    public function setBestLossPctRx($best_loss_pct_rx)
    {
        $this->container['best_loss_pct_rx'] = $best_loss_pct_rx;

        return $this;
    }

    /**
     * Gets best_loss_pct_tx
     *
     * @return int
     */
    public function getBestLossPctTx()
    {
        return $this->container['best_loss_pct_tx'];
    }

    /**
     * Sets best_loss_pct_tx
     *
     * @param int $best_loss_pct_tx best_loss_pct_tx
     *
     * @return $this
     */
    public function setBestLossPctTx($best_loss_pct_tx)
    {
        $this->container['best_loss_pct_tx'] = $best_loss_pct_tx;

        return $this;
    }

    /**
     * Gets bps_of_best_path_rx
     *
     * @return int
     */
    public function getBpsOfBestPathRx()
    {
        return $this->container['bps_of_best_path_rx'];
    }

    /**
     * Sets bps_of_best_path_rx
     *
     * @param int $bps_of_best_path_rx bps_of_best_path_rx
     *
     * @return $this
     */
    public function setBpsOfBestPathRx($bps_of_best_path_rx)
    {
        $this->container['bps_of_best_path_rx'] = $bps_of_best_path_rx;

        return $this;
    }

    /**
     * Gets bps_of_best_path_tx
     *
     * @return int
     */
    public function getBpsOfBestPathTx()
    {
        return $this->container['bps_of_best_path_tx'];
    }

    /**
     * Sets bps_of_best_path_tx
     *
     * @param int $bps_of_best_path_tx bps_of_best_path_tx
     *
     * @return $this
     */
    public function setBpsOfBestPathTx($bps_of_best_path_tx)
    {
        $this->container['bps_of_best_path_tx'] = $bps_of_best_path_tx;

        return $this;
    }

    /**
     * Gets control_bytes_rx
     *
     * @return int
     */
    public function getControlBytesRx()
    {
        return $this->container['control_bytes_rx'];
    }

    /**
     * Sets control_bytes_rx
     *
     * @param int $control_bytes_rx control_bytes_rx
     *
     * @return $this
     */
    public function setControlBytesRx($control_bytes_rx)
    {
        $this->container['control_bytes_rx'] = $control_bytes_rx;

        return $this;
    }

    /**
     * Gets control_bytes_tx
     *
     * @return int
     */
    public function getControlBytesTx()
    {
        return $this->container['control_bytes_tx'];
    }

    /**
     * Sets control_bytes_tx
     *
     * @param int $control_bytes_tx control_bytes_tx
     *
     * @return $this
     */
    public function setControlBytesTx($control_bytes_tx)
    {
        $this->container['control_bytes_tx'] = $control_bytes_tx;

        return $this;
    }

    /**
     * Gets control_packets_rx
     *
     * @return int
     */
    public function getControlPacketsRx()
    {
        return $this->container['control_packets_rx'];
    }

    /**
     * Sets control_packets_rx
     *
     * @param int $control_packets_rx control_packets_rx
     *
     * @return $this
     */
    public function setControlPacketsRx($control_packets_rx)
    {
        $this->container['control_packets_rx'] = $control_packets_rx;

        return $this;
    }

    /**
     * Gets control_packets_tx
     *
     * @return int
     */
    public function getControlPacketsTx()
    {
        return $this->container['control_packets_tx'];
    }

    /**
     * Sets control_packets_tx
     *
     * @param int $control_packets_tx control_packets_tx
     *
     * @return $this
     */
    public function setControlPacketsTx($control_packets_tx)
    {
        $this->container['control_packets_tx'] = $control_packets_tx;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return \Swagger\Client\Model\Destinations[]
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \Swagger\Client\Model\Destinations[] $destinations destinations
     *
     * @return $this
     */
    public function setDestinations($destinations)
    {
        $this->container['destinations'] = $destinations;

        return $this;
    }

    /**
     * Gets icmp_bytes_rx
     *
     * @return int
     */
    public function getIcmpBytesRx()
    {
        return $this->container['icmp_bytes_rx'];
    }

    /**
     * Sets icmp_bytes_rx
     *
     * @param int $icmp_bytes_rx icmp_bytes_rx
     *
     * @return $this
     */
    public function setIcmpBytesRx($icmp_bytes_rx)
    {
        $this->container['icmp_bytes_rx'] = $icmp_bytes_rx;

        return $this;
    }

    /**
     * Gets icmp_bytes_tx
     *
     * @return int
     */
    public function getIcmpBytesTx()
    {
        return $this->container['icmp_bytes_tx'];
    }

    /**
     * Sets icmp_bytes_tx
     *
     * @param int $icmp_bytes_tx icmp_bytes_tx
     *
     * @return $this
     */
    public function setIcmpBytesTx($icmp_bytes_tx)
    {
        $this->container['icmp_bytes_tx'] = $icmp_bytes_tx;

        return $this;
    }

    /**
     * Gets icmp_packets_rx
     *
     * @return int
     */
    public function getIcmpPacketsRx()
    {
        return $this->container['icmp_packets_rx'];
    }

    /**
     * Sets icmp_packets_rx
     *
     * @param int $icmp_packets_rx icmp_packets_rx
     *
     * @return $this
     */
    public function setIcmpPacketsRx($icmp_packets_rx)
    {
        $this->container['icmp_packets_rx'] = $icmp_packets_rx;

        return $this;
    }

    /**
     * Gets icmp_packets_tx
     *
     * @return int
     */
    public function getIcmpPacketsTx()
    {
        return $this->container['icmp_packets_tx'];
    }

    /**
     * Sets icmp_packets_tx
     *
     * @param int $icmp_packets_tx icmp_packets_tx
     *
     * @return $this
     */
    public function setIcmpPacketsTx($icmp_packets_tx)
    {
        $this->container['icmp_packets_tx'] = $icmp_packets_tx;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string $interface interface
     *
     * @return $this
     */
    public function setInterface($interface)
    {
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id internal_id
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets local_ip_address
     *
     * @return string
     */
    public function getLocalIpAddress()
    {
        return $this->container['local_ip_address'];
    }

    /**
     * Sets local_ip_address
     *
     * @param string $local_ip_address local_ip_address
     *
     * @return $this
     */
    public function setLocalIpAddress($local_ip_address)
    {
        $this->container['local_ip_address'] = $local_ip_address;

        return $this;
    }

    /**
     * Gets logical_id
     *
     * @return string
     */
    public function getLogicalId()
    {
        return $this->container['logical_id'];
    }

    /**
     * Sets logical_id
     *
     * @param string $logical_id logical_id
     *
     * @return $this
     */
    public function setLogicalId($logical_id)
    {
        $this->container['logical_id'] = $logical_id;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets mtu
     *
     * @return int
     */
    public function getMtu()
    {
        return $this->container['mtu'];
    }

    /**
     * Sets mtu
     *
     * @param int $mtu mtu
     *
     * @return $this
     */
    public function setMtu($mtu)
    {
        $this->container['mtu'] = $mtu;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets other_bytes_rx
     *
     * @return int
     */
    public function getOtherBytesRx()
    {
        return $this->container['other_bytes_rx'];
    }

    /**
     * Sets other_bytes_rx
     *
     * @param int $other_bytes_rx other_bytes_rx
     *
     * @return $this
     */
    public function setOtherBytesRx($other_bytes_rx)
    {
        $this->container['other_bytes_rx'] = $other_bytes_rx;

        return $this;
    }

    /**
     * Gets other_bytes_tx
     *
     * @return int
     */
    public function getOtherBytesTx()
    {
        return $this->container['other_bytes_tx'];
    }

    /**
     * Sets other_bytes_tx
     *
     * @param int $other_bytes_tx other_bytes_tx
     *
     * @return $this
     */
    public function setOtherBytesTx($other_bytes_tx)
    {
        $this->container['other_bytes_tx'] = $other_bytes_tx;

        return $this;
    }

    /**
     * Gets other_packets_rx
     *
     * @return int
     */
    public function getOtherPacketsRx()
    {
        return $this->container['other_packets_rx'];
    }

    /**
     * Sets other_packets_rx
     *
     * @param int $other_packets_rx other_packets_rx
     *
     * @return $this
     */
    public function setOtherPacketsRx($other_packets_rx)
    {
        $this->container['other_packets_rx'] = $other_packets_rx;

        return $this;
    }

    /**
     * Gets other_packets_tx
     *
     * @return int
     */
    public function getOtherPacketsTx()
    {
        return $this->container['other_packets_tx'];
    }

    /**
     * Sets other_packets_tx
     *
     * @param int $other_packets_tx other_packets_tx
     *
     * @return $this
     */
    public function setOtherPacketsTx($other_packets_tx)
    {
        $this->container['other_packets_tx'] = $other_packets_tx;

        return $this;
    }

    /**
     * Gets p1_bytes_rx
     *
     * @return int
     */
    public function getP1BytesRx()
    {
        return $this->container['p1_bytes_rx'];
    }

    /**
     * Sets p1_bytes_rx
     *
     * @param int $p1_bytes_rx p1_bytes_rx
     *
     * @return $this
     */
    public function setP1BytesRx($p1_bytes_rx)
    {
        $this->container['p1_bytes_rx'] = $p1_bytes_rx;

        return $this;
    }

    /**
     * Gets p1_bytes_tx
     *
     * @return int
     */
    public function getP1BytesTx()
    {
        return $this->container['p1_bytes_tx'];
    }

    /**
     * Sets p1_bytes_tx
     *
     * @param int $p1_bytes_tx p1_bytes_tx
     *
     * @return $this
     */
    public function setP1BytesTx($p1_bytes_tx)
    {
        $this->container['p1_bytes_tx'] = $p1_bytes_tx;

        return $this;
    }

    /**
     * Gets p1_packets_rx
     *
     * @return int
     */
    public function getP1PacketsRx()
    {
        return $this->container['p1_packets_rx'];
    }

    /**
     * Sets p1_packets_rx
     *
     * @param int $p1_packets_rx p1_packets_rx
     *
     * @return $this
     */
    public function setP1PacketsRx($p1_packets_rx)
    {
        $this->container['p1_packets_rx'] = $p1_packets_rx;

        return $this;
    }

    /**
     * Gets p1_packets_tx
     *
     * @return int
     */
    public function getP1PacketsTx()
    {
        return $this->container['p1_packets_tx'];
    }

    /**
     * Sets p1_packets_tx
     *
     * @param int $p1_packets_tx p1_packets_tx
     *
     * @return $this
     */
    public function setP1PacketsTx($p1_packets_tx)
    {
        $this->container['p1_packets_tx'] = $p1_packets_tx;

        return $this;
    }

    /**
     * Gets p2_bytes_rx
     *
     * @return int
     */
    public function getP2BytesRx()
    {
        return $this->container['p2_bytes_rx'];
    }

    /**
     * Sets p2_bytes_rx
     *
     * @param int $p2_bytes_rx p2_bytes_rx
     *
     * @return $this
     */
    public function setP2BytesRx($p2_bytes_rx)
    {
        $this->container['p2_bytes_rx'] = $p2_bytes_rx;

        return $this;
    }

    /**
     * Gets p2_bytes_tx
     *
     * @return int
     */
    public function getP2BytesTx()
    {
        return $this->container['p2_bytes_tx'];
    }

    /**
     * Sets p2_bytes_tx
     *
     * @param int $p2_bytes_tx p2_bytes_tx
     *
     * @return $this
     */
    public function setP2BytesTx($p2_bytes_tx)
    {
        $this->container['p2_bytes_tx'] = $p2_bytes_tx;

        return $this;
    }

    /**
     * Gets p2_packets_rx
     *
     * @return int
     */
    public function getP2PacketsRx()
    {
        return $this->container['p2_packets_rx'];
    }

    /**
     * Sets p2_packets_rx
     *
     * @param int $p2_packets_rx p2_packets_rx
     *
     * @return $this
     */
    public function setP2PacketsRx($p2_packets_rx)
    {
        $this->container['p2_packets_rx'] = $p2_packets_rx;

        return $this;
    }

    /**
     * Gets p2_packets_tx
     *
     * @return int
     */
    public function getP2PacketsTx()
    {
        return $this->container['p2_packets_tx'];
    }

    /**
     * Sets p2_packets_tx
     *
     * @param int $p2_packets_tx p2_packets_tx
     *
     * @return $this
     */
    public function setP2PacketsTx($p2_packets_tx)
    {
        $this->container['p2_packets_tx'] = $p2_packets_tx;

        return $this;
    }

    /**
     * Gets p3_bytes_rx
     *
     * @return int
     */
    public function getP3BytesRx()
    {
        return $this->container['p3_bytes_rx'];
    }

    /**
     * Sets p3_bytes_rx
     *
     * @param int $p3_bytes_rx p3_bytes_rx
     *
     * @return $this
     */
    public function setP3BytesRx($p3_bytes_rx)
    {
        $this->container['p3_bytes_rx'] = $p3_bytes_rx;

        return $this;
    }

    /**
     * Gets p3_bytes_tx
     *
     * @return int
     */
    public function getP3BytesTx()
    {
        return $this->container['p3_bytes_tx'];
    }

    /**
     * Sets p3_bytes_tx
     *
     * @param int $p3_bytes_tx p3_bytes_tx
     *
     * @return $this
     */
    public function setP3BytesTx($p3_bytes_tx)
    {
        $this->container['p3_bytes_tx'] = $p3_bytes_tx;

        return $this;
    }

    /**
     * Gets p3_packets_rx
     *
     * @return int
     */
    public function getP3PacketsRx()
    {
        return $this->container['p3_packets_rx'];
    }

    /**
     * Sets p3_packets_rx
     *
     * @param int $p3_packets_rx p3_packets_rx
     *
     * @return $this
     */
    public function setP3PacketsRx($p3_packets_rx)
    {
        $this->container['p3_packets_rx'] = $p3_packets_rx;

        return $this;
    }

    /**
     * Gets p3_packets_tx
     *
     * @return int
     */
    public function getP3PacketsTx()
    {
        return $this->container['p3_packets_tx'];
    }

    /**
     * Sets p3_packets_tx
     *
     * @param int $p3_packets_tx p3_packets_tx
     *
     * @return $this
     */
    public function setP3PacketsTx($p3_packets_tx)
    {
        $this->container['p3_packets_tx'] = $p3_packets_tx;

        return $this;
    }

    /**
     * Gets public_ip_address
     *
     * @return string
     */
    public function getPublicIpAddress()
    {
        return $this->container['public_ip_address'];
    }

    /**
     * Sets public_ip_address
     *
     * @param string $public_ip_address public_ip_address
     *
     * @return $this
     */
    public function setPublicIpAddress($public_ip_address)
    {
        $this->container['public_ip_address'] = $public_ip_address;

        return $this;
    }

    /**
     * Gets score_rx
     *
     * @return int
     */
    public function getScoreRx()
    {
        return $this->container['score_rx'];
    }

    /**
     * Sets score_rx
     *
     * @param int $score_rx score_rx
     *
     * @return $this
     */
    public function setScoreRx($score_rx)
    {
        $this->container['score_rx'] = $score_rx;

        return $this;
    }

    /**
     * Gets score_tx
     *
     * @return int
     */
    public function getScoreTx()
    {
        return $this->container['score_tx'];
    }

    /**
     * Sets score_tx
     *
     * @param int $score_tx score_tx
     *
     * @return $this
     */
    public function setScoreTx($score_tx)
    {
        $this->container['score_tx'] = $score_tx;

        return $this;
    }

    /**
     * Gets signal_strength
     *
     * @return int
     */
    public function getSignalStrength()
    {
        return $this->container['signal_strength'];
    }

    /**
     * Sets signal_strength
     *
     * @param int $signal_strength signal_strength
     *
     * @return $this
     */
    public function setSignalStrength($signal_strength)
    {
        $this->container['signal_strength'] = $signal_strength;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tcp_bytes_rx
     *
     * @return int
     */
    public function getTcpBytesRx()
    {
        return $this->container['tcp_bytes_rx'];
    }

    /**
     * Sets tcp_bytes_rx
     *
     * @param int $tcp_bytes_rx tcp_bytes_rx
     *
     * @return $this
     */
    public function setTcpBytesRx($tcp_bytes_rx)
    {
        $this->container['tcp_bytes_rx'] = $tcp_bytes_rx;

        return $this;
    }

    /**
     * Gets tcp_bytes_tx
     *
     * @return int
     */
    public function getTcpBytesTx()
    {
        return $this->container['tcp_bytes_tx'];
    }

    /**
     * Sets tcp_bytes_tx
     *
     * @param int $tcp_bytes_tx tcp_bytes_tx
     *
     * @return $this
     */
    public function setTcpBytesTx($tcp_bytes_tx)
    {
        $this->container['tcp_bytes_tx'] = $tcp_bytes_tx;

        return $this;
    }

    /**
     * Gets tcp_packets_rx
     *
     * @return int
     */
    public function getTcpPacketsRx()
    {
        return $this->container['tcp_packets_rx'];
    }

    /**
     * Sets tcp_packets_rx
     *
     * @param int $tcp_packets_rx tcp_packets_rx
     *
     * @return $this
     */
    public function setTcpPacketsRx($tcp_packets_rx)
    {
        $this->container['tcp_packets_rx'] = $tcp_packets_rx;

        return $this;
    }

    /**
     * Gets tcp_packets_tx
     *
     * @return int
     */
    public function getTcpPacketsTx()
    {
        return $this->container['tcp_packets_tx'];
    }

    /**
     * Sets tcp_packets_tx
     *
     * @param int $tcp_packets_tx tcp_packets_tx
     *
     * @return $this
     */
    public function setTcpPacketsTx($tcp_packets_tx)
    {
        $this->container['tcp_packets_tx'] = $tcp_packets_tx;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets udp_bytes_rx
     *
     * @return int
     */
    public function getUdpBytesRx()
    {
        return $this->container['udp_bytes_rx'];
    }

    /**
     * Sets udp_bytes_rx
     *
     * @param int $udp_bytes_rx udp_bytes_rx
     *
     * @return $this
     */
    public function setUdpBytesRx($udp_bytes_rx)
    {
        $this->container['udp_bytes_rx'] = $udp_bytes_rx;

        return $this;
    }

    /**
     * Gets udp_bytes_tx
     *
     * @return int
     */
    public function getUdpBytesTx()
    {
        return $this->container['udp_bytes_tx'];
    }

    /**
     * Sets udp_bytes_tx
     *
     * @param int $udp_bytes_tx udp_bytes_tx
     *
     * @return $this
     */
    public function setUdpBytesTx($udp_bytes_tx)
    {
        $this->container['udp_bytes_tx'] = $udp_bytes_tx;

        return $this;
    }

    /**
     * Gets udp_hole_punching
     *
     * @return int
     */
    public function getUdpHolePunching()
    {
        return $this->container['udp_hole_punching'];
    }

    /**
     * Sets udp_hole_punching
     *
     * @param int $udp_hole_punching udp_hole_punching
     *
     * @return $this
     */
    public function setUdpHolePunching($udp_hole_punching)
    {
        $this->container['udp_hole_punching'] = $udp_hole_punching;

        return $this;
    }

    /**
     * Gets udp_packets_rx
     *
     * @return int
     */
    public function getUdpPacketsRx()
    {
        return $this->container['udp_packets_rx'];
    }

    /**
     * Sets udp_packets_rx
     *
     * @param int $udp_packets_rx udp_packets_rx
     *
     * @return $this
     */
    public function setUdpPacketsRx($udp_packets_rx)
    {
        $this->container['udp_packets_rx'] = $udp_packets_rx;

        return $this;
    }

    /**
     * Gets udp_packets_tx
     *
     * @return int
     */
    public function getUdpPacketsTx()
    {
        return $this->container['udp_packets_tx'];
    }

    /**
     * Sets udp_packets_tx
     *
     * @param int $udp_packets_tx udp_packets_tx
     *
     * @return $this
     */
    public function setUdpPacketsTx($udp_packets_tx)
    {
        $this->container['udp_packets_tx'] = $udp_packets_tx;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int $vlan_id vlan_id
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets vpn_state
     *
     * @return string
     */
    public function getVpnState()
    {
        return $this->container['vpn_state'];
    }

    /**
     * Sets vpn_state
     *
     * @param string $vpn_state vpn_state
     *
     * @return $this
     */
    public function setVpnState($vpn_state)
    {
        $allowedValues = $this->getVpnStateAllowableValues();
        if (!is_null($vpn_state) && !in_array($vpn_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vpn_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vpn_state'] = $vpn_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


