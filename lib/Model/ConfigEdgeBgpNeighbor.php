<?php
/**
 * ConfigEdgeBgpNeighbor
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConfigEdgeBgpNeighbor Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigEdgeBgpNeighbor implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'config_edge_bgp_neighbor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'neighbor_as' => 'string',
        'neighbor_ip' => 'string',
        'neighbor_tag' => 'string',
        'inbound_filter' => '\Swagger\Client\Model\ConfigEdgeBgpFilterSet',
        'outbound_filter' => '\Swagger\Client\Model\ConfigEdgeBgpFilterSet',
        'allow_as' => 'bool',
        'connect' => 'string',
        'default_route' => 'bool',
        'holdtime' => 'string',
        'keepalive' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'neighbor_as' => null,
        'neighbor_ip' => null,
        'neighbor_tag' => null,
        'inbound_filter' => null,
        'outbound_filter' => null,
        'allow_as' => null,
        'connect' => null,
        'default_route' => null,
        'holdtime' => null,
        'keepalive' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'neighbor_as' => 'neighborAS',
        'neighbor_ip' => 'neighborIp',
        'neighbor_tag' => 'neighborTag',
        'inbound_filter' => 'inboundFilter',
        'outbound_filter' => 'outboundFilter',
        'allow_as' => 'allowAS',
        'connect' => 'connect',
        'default_route' => 'defaultRoute',
        'holdtime' => 'holdtime',
        'keepalive' => 'keepalive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'neighbor_as' => 'setNeighborAs',
        'neighbor_ip' => 'setNeighborIp',
        'neighbor_tag' => 'setNeighborTag',
        'inbound_filter' => 'setInboundFilter',
        'outbound_filter' => 'setOutboundFilter',
        'allow_as' => 'setAllowAs',
        'connect' => 'setConnect',
        'default_route' => 'setDefaultRoute',
        'holdtime' => 'setHoldtime',
        'keepalive' => 'setKeepalive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'neighbor_as' => 'getNeighborAs',
        'neighbor_ip' => 'getNeighborIp',
        'neighbor_tag' => 'getNeighborTag',
        'inbound_filter' => 'getInboundFilter',
        'outbound_filter' => 'getOutboundFilter',
        'allow_as' => 'getAllowAs',
        'connect' => 'getConnect',
        'default_route' => 'getDefaultRoute',
        'holdtime' => 'getHoldtime',
        'keepalive' => 'getKeepalive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NEIGHBOR_TAG_UPLINK = 'UPLINK';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNeighborTagAllowableValues()
    {
        return [
            self::NEIGHBOR_TAG_UPLINK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['neighbor_as'] = isset($data['neighbor_as']) ? $data['neighbor_as'] : null;
        $this->container['neighbor_ip'] = isset($data['neighbor_ip']) ? $data['neighbor_ip'] : null;
        $this->container['neighbor_tag'] = isset($data['neighbor_tag']) ? $data['neighbor_tag'] : null;
        $this->container['inbound_filter'] = isset($data['inbound_filter']) ? $data['inbound_filter'] : null;
        $this->container['outbound_filter'] = isset($data['outbound_filter']) ? $data['outbound_filter'] : null;
        $this->container['allow_as'] = isset($data['allow_as']) ? $data['allow_as'] : null;
        $this->container['connect'] = isset($data['connect']) ? $data['connect'] : null;
        $this->container['default_route'] = isset($data['default_route']) ? $data['default_route'] : null;
        $this->container['holdtime'] = isset($data['holdtime']) ? $data['holdtime'] : null;
        $this->container['keepalive'] = isset($data['keepalive']) ? $data['keepalive'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNeighborTagAllowableValues();
        if (!in_array($this->container['neighbor_tag'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'neighbor_tag', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getNeighborTagAllowableValues();
        if (!in_array($this->container['neighbor_tag'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets neighbor_as
     *
     * @return string
     */
    public function getNeighborAs()
    {
        return $this->container['neighbor_as'];
    }

    /**
     * Sets neighbor_as
     *
     * @param string $neighbor_as neighbor_as
     *
     * @return $this
     */
    public function setNeighborAs($neighbor_as)
    {
        $this->container['neighbor_as'] = $neighbor_as;

        return $this;
    }

    /**
     * Gets neighbor_ip
     *
     * @return string
     */
    public function getNeighborIp()
    {
        return $this->container['neighbor_ip'];
    }

    /**
     * Sets neighbor_ip
     *
     * @param string $neighbor_ip neighbor_ip
     *
     * @return $this
     */
    public function setNeighborIp($neighbor_ip)
    {
        $this->container['neighbor_ip'] = $neighbor_ip;

        return $this;
    }

    /**
     * Gets neighbor_tag
     *
     * @return string
     */
    public function getNeighborTag()
    {
        return $this->container['neighbor_tag'];
    }

    /**
     * Sets neighbor_tag
     *
     * @param string $neighbor_tag neighbor_tag
     *
     * @return $this
     */
    public function setNeighborTag($neighbor_tag)
    {
        $allowedValues = $this->getNeighborTagAllowableValues();
        if (!is_null($neighbor_tag) && !in_array($neighbor_tag, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'neighbor_tag', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['neighbor_tag'] = $neighbor_tag;

        return $this;
    }

    /**
     * Gets inbound_filter
     *
     * @return \Swagger\Client\Model\ConfigEdgeBgpFilterSet
     */
    public function getInboundFilter()
    {
        return $this->container['inbound_filter'];
    }

    /**
     * Sets inbound_filter
     *
     * @param \Swagger\Client\Model\ConfigEdgeBgpFilterSet $inbound_filter inbound_filter
     *
     * @return $this
     */
    public function setInboundFilter($inbound_filter)
    {
        $this->container['inbound_filter'] = $inbound_filter;

        return $this;
    }

    /**
     * Gets outbound_filter
     *
     * @return \Swagger\Client\Model\ConfigEdgeBgpFilterSet
     */
    public function getOutboundFilter()
    {
        return $this->container['outbound_filter'];
    }

    /**
     * Sets outbound_filter
     *
     * @param \Swagger\Client\Model\ConfigEdgeBgpFilterSet $outbound_filter outbound_filter
     *
     * @return $this
     */
    public function setOutboundFilter($outbound_filter)
    {
        $this->container['outbound_filter'] = $outbound_filter;

        return $this;
    }

    /**
     * Gets allow_as
     *
     * @return bool
     */
    public function getAllowAs()
    {
        return $this->container['allow_as'];
    }

    /**
     * Sets allow_as
     *
     * @param bool $allow_as allow_as
     *
     * @return $this
     */
    public function setAllowAs($allow_as)
    {
        $this->container['allow_as'] = $allow_as;

        return $this;
    }

    /**
     * Gets connect
     *
     * @return string
     */
    public function getConnect()
    {
        return $this->container['connect'];
    }

    /**
     * Sets connect
     *
     * @param string $connect connect
     *
     * @return $this
     */
    public function setConnect($connect)
    {
        $this->container['connect'] = $connect;

        return $this;
    }

    /**
     * Gets default_route
     *
     * @return bool
     */
    public function getDefaultRoute()
    {
        return $this->container['default_route'];
    }

    /**
     * Sets default_route
     *
     * @param bool $default_route default_route
     *
     * @return $this
     */
    public function setDefaultRoute($default_route)
    {
        $this->container['default_route'] = $default_route;

        return $this;
    }

    /**
     * Gets holdtime
     *
     * @return string
     */
    public function getHoldtime()
    {
        return $this->container['holdtime'];
    }

    /**
     * Sets holdtime
     *
     * @param string $holdtime holdtime
     *
     * @return $this
     */
    public function setHoldtime($holdtime)
    {
        $this->container['holdtime'] = $holdtime;

        return $this;
    }

    /**
     * Gets keepalive
     *
     * @return string
     */
    public function getKeepalive()
    {
        return $this->container['keepalive'];
    }

    /**
     * Sets keepalive
     *
     * @param string $keepalive keepalive
     *
     * @return $this
     */
    public function setKeepalive($keepalive)
    {
        $this->container['keepalive'] = $keepalive;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


