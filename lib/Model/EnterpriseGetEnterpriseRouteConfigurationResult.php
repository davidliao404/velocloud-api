<?php
/**
 * EnterpriseGetEnterpriseRouteConfigurationResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnterpriseGetEnterpriseRouteConfigurationResult Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterpriseGetEnterpriseRouteConfigurationResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'enterprise_get_enterprise_route_configuration_result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'operator_id' => 'int',
        'network_id' => 'int',
        'enterprise_id' => 'int',
        'edge_id' => 'int',
        'gateway_id' => 'int',
        'parent_group_id' => 'int',
        'description' => 'string',
        'object' => 'string',
        'name' => 'string',
        'type' => 'string',
        'logical_id' => 'string',
        'alerts_enabled' => 'bool',
        'operator_alerts_enabled' => 'bool',
        'status' => 'string',
        'status_modified' => '\DateTime',
        'previous_data' => 'string',
        'previous_created' => '\DateTime',
        'draft_data' => 'string',
        'draft_created' => '\DateTime',
        'draft_comment' => 'string',
        'data' => 'string',
        'last_contact' => '\DateTime',
        'version' => 'string',
        'modified' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created' => 'date-time',
        'operator_id' => null,
        'network_id' => null,
        'enterprise_id' => null,
        'edge_id' => null,
        'gateway_id' => null,
        'parent_group_id' => null,
        'description' => null,
        'object' => null,
        'name' => null,
        'type' => null,
        'logical_id' => null,
        'alerts_enabled' => null,
        'operator_alerts_enabled' => null,
        'status' => null,
        'status_modified' => 'date-time',
        'previous_data' => null,
        'previous_created' => 'date-time',
        'draft_data' => null,
        'draft_created' => 'date-time',
        'draft_comment' => null,
        'data' => null,
        'last_contact' => 'date-time',
        'version' => null,
        'modified' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'operator_id' => 'operatorId',
        'network_id' => 'networkId',
        'enterprise_id' => 'enterpriseId',
        'edge_id' => 'edgeId',
        'gateway_id' => 'gatewayId',
        'parent_group_id' => 'parentGroupId',
        'description' => 'description',
        'object' => 'object',
        'name' => 'name',
        'type' => 'type',
        'logical_id' => 'logicalId',
        'alerts_enabled' => 'alertsEnabled',
        'operator_alerts_enabled' => 'operatorAlertsEnabled',
        'status' => 'status',
        'status_modified' => 'statusModified',
        'previous_data' => 'previousData',
        'previous_created' => 'previousCreated',
        'draft_data' => 'draftData',
        'draft_created' => 'draftCreated',
        'draft_comment' => 'draftComment',
        'data' => 'data',
        'last_contact' => 'lastContact',
        'version' => 'version',
        'modified' => 'modified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'operator_id' => 'setOperatorId',
        'network_id' => 'setNetworkId',
        'enterprise_id' => 'setEnterpriseId',
        'edge_id' => 'setEdgeId',
        'gateway_id' => 'setGatewayId',
        'parent_group_id' => 'setParentGroupId',
        'description' => 'setDescription',
        'object' => 'setObject',
        'name' => 'setName',
        'type' => 'setType',
        'logical_id' => 'setLogicalId',
        'alerts_enabled' => 'setAlertsEnabled',
        'operator_alerts_enabled' => 'setOperatorAlertsEnabled',
        'status' => 'setStatus',
        'status_modified' => 'setStatusModified',
        'previous_data' => 'setPreviousData',
        'previous_created' => 'setPreviousCreated',
        'draft_data' => 'setDraftData',
        'draft_created' => 'setDraftCreated',
        'draft_comment' => 'setDraftComment',
        'data' => 'setData',
        'last_contact' => 'setLastContact',
        'version' => 'setVersion',
        'modified' => 'setModified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'operator_id' => 'getOperatorId',
        'network_id' => 'getNetworkId',
        'enterprise_id' => 'getEnterpriseId',
        'edge_id' => 'getEdgeId',
        'gateway_id' => 'getGatewayId',
        'parent_group_id' => 'getParentGroupId',
        'description' => 'getDescription',
        'object' => 'getObject',
        'name' => 'getName',
        'type' => 'getType',
        'logical_id' => 'getLogicalId',
        'alerts_enabled' => 'getAlertsEnabled',
        'operator_alerts_enabled' => 'getOperatorAlertsEnabled',
        'status' => 'getStatus',
        'status_modified' => 'getStatusModified',
        'previous_data' => 'getPreviousData',
        'previous_created' => 'getPreviousCreated',
        'draft_data' => 'getDraftData',
        'draft_created' => 'getDraftCreated',
        'draft_comment' => 'getDraftComment',
        'data' => 'getData',
        'last_contact' => 'getLastContact',
        'version' => 'getVersion',
        'modified' => 'getModified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['operator_id'] = isset($data['operator_id']) ? $data['operator_id'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['enterprise_id'] = isset($data['enterprise_id']) ? $data['enterprise_id'] : null;
        $this->container['edge_id'] = isset($data['edge_id']) ? $data['edge_id'] : null;
        $this->container['gateway_id'] = isset($data['gateway_id']) ? $data['gateway_id'] : null;
        $this->container['parent_group_id'] = isset($data['parent_group_id']) ? $data['parent_group_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['object'] = isset($data['object']) ? $data['object'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['logical_id'] = isset($data['logical_id']) ? $data['logical_id'] : null;
        $this->container['alerts_enabled'] = isset($data['alerts_enabled']) ? $data['alerts_enabled'] : null;
        $this->container['operator_alerts_enabled'] = isset($data['operator_alerts_enabled']) ? $data['operator_alerts_enabled'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_modified'] = isset($data['status_modified']) ? $data['status_modified'] : null;
        $this->container['previous_data'] = isset($data['previous_data']) ? $data['previous_data'] : null;
        $this->container['previous_created'] = isset($data['previous_created']) ? $data['previous_created'] : null;
        $this->container['draft_data'] = isset($data['draft_data']) ? $data['draft_data'] : null;
        $this->container['draft_created'] = isset($data['draft_created']) ? $data['draft_created'] : null;
        $this->container['draft_comment'] = isset($data['draft_comment']) ? $data['draft_comment'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['last_contact'] = isset($data['last_contact']) ? $data['last_contact'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['operator_id'] === null) {
            $invalidProperties[] = "'operator_id' can't be null";
        }
        if ($this->container['network_id'] === null) {
            $invalidProperties[] = "'network_id' can't be null";
        }
        if ($this->container['enterprise_id'] === null) {
            $invalidProperties[] = "'enterprise_id' can't be null";
        }
        if ($this->container['edge_id'] === null) {
            $invalidProperties[] = "'edge_id' can't be null";
        }
        if ($this->container['gateway_id'] === null) {
            $invalidProperties[] = "'gateway_id' can't be null";
        }
        if ($this->container['parent_group_id'] === null) {
            $invalidProperties[] = "'parent_group_id' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['object'] === null) {
            $invalidProperties[] = "'object' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['logical_id'] === null) {
            $invalidProperties[] = "'logical_id' can't be null";
        }
        if ($this->container['alerts_enabled'] === null) {
            $invalidProperties[] = "'alerts_enabled' can't be null";
        }
        if ($this->container['operator_alerts_enabled'] === null) {
            $invalidProperties[] = "'operator_alerts_enabled' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['status_modified'] === null) {
            $invalidProperties[] = "'status_modified' can't be null";
        }
        if ($this->container['previous_data'] === null) {
            $invalidProperties[] = "'previous_data' can't be null";
        }
        if ($this->container['previous_created'] === null) {
            $invalidProperties[] = "'previous_created' can't be null";
        }
        if ($this->container['draft_data'] === null) {
            $invalidProperties[] = "'draft_data' can't be null";
        }
        if ($this->container['draft_created'] === null) {
            $invalidProperties[] = "'draft_created' can't be null";
        }
        if ($this->container['draft_comment'] === null) {
            $invalidProperties[] = "'draft_comment' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        if ($this->container['last_contact'] === null) {
            $invalidProperties[] = "'last_contact' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        if ($this->container['operator_id'] === null) {
            return false;
        }
        if ($this->container['network_id'] === null) {
            return false;
        }
        if ($this->container['enterprise_id'] === null) {
            return false;
        }
        if ($this->container['edge_id'] === null) {
            return false;
        }
        if ($this->container['gateway_id'] === null) {
            return false;
        }
        if ($this->container['parent_group_id'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['object'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['logical_id'] === null) {
            return false;
        }
        if ($this->container['alerts_enabled'] === null) {
            return false;
        }
        if ($this->container['operator_alerts_enabled'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['status_modified'] === null) {
            return false;
        }
        if ($this->container['previous_data'] === null) {
            return false;
        }
        if ($this->container['previous_created'] === null) {
            return false;
        }
        if ($this->container['draft_data'] === null) {
            return false;
        }
        if ($this->container['draft_created'] === null) {
            return false;
        }
        if ($this->container['draft_comment'] === null) {
            return false;
        }
        if ($this->container['data'] === null) {
            return false;
        }
        if ($this->container['last_contact'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['modified'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets operator_id
     *
     * @return int
     */
    public function getOperatorId()
    {
        return $this->container['operator_id'];
    }

    /**
     * Sets operator_id
     *
     * @param int $operator_id operator_id
     *
     * @return $this
     */
    public function setOperatorId($operator_id)
    {
        $this->container['operator_id'] = $operator_id;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int $network_id network_id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets enterprise_id
     *
     * @return int
     */
    public function getEnterpriseId()
    {
        return $this->container['enterprise_id'];
    }

    /**
     * Sets enterprise_id
     *
     * @param int $enterprise_id enterprise_id
     *
     * @return $this
     */
    public function setEnterpriseId($enterprise_id)
    {
        $this->container['enterprise_id'] = $enterprise_id;

        return $this;
    }

    /**
     * Gets edge_id
     *
     * @return int
     */
    public function getEdgeId()
    {
        return $this->container['edge_id'];
    }

    /**
     * Sets edge_id
     *
     * @param int $edge_id edge_id
     *
     * @return $this
     */
    public function setEdgeId($edge_id)
    {
        $this->container['edge_id'] = $edge_id;

        return $this;
    }

    /**
     * Gets gateway_id
     *
     * @return int
     */
    public function getGatewayId()
    {
        return $this->container['gateway_id'];
    }

    /**
     * Sets gateway_id
     *
     * @param int $gateway_id gateway_id
     *
     * @return $this
     */
    public function setGatewayId($gateway_id)
    {
        $this->container['gateway_id'] = $gateway_id;

        return $this;
    }

    /**
     * Gets parent_group_id
     *
     * @return int
     */
    public function getParentGroupId()
    {
        return $this->container['parent_group_id'];
    }

    /**
     * Sets parent_group_id
     *
     * @param int $parent_group_id parent_group_id
     *
     * @return $this
     */
    public function setParentGroupId($parent_group_id)
    {
        $this->container['parent_group_id'] = $parent_group_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string $object object
     *
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets logical_id
     *
     * @return string
     */
    public function getLogicalId()
    {
        return $this->container['logical_id'];
    }

    /**
     * Sets logical_id
     *
     * @param string $logical_id logical_id
     *
     * @return $this
     */
    public function setLogicalId($logical_id)
    {
        $this->container['logical_id'] = $logical_id;

        return $this;
    }

    /**
     * Gets alerts_enabled
     *
     * @return bool
     */
    public function getAlertsEnabled()
    {
        return $this->container['alerts_enabled'];
    }

    /**
     * Sets alerts_enabled
     *
     * @param bool $alerts_enabled alerts_enabled
     *
     * @return $this
     */
    public function setAlertsEnabled($alerts_enabled)
    {
        $this->container['alerts_enabled'] = $alerts_enabled;

        return $this;
    }

    /**
     * Gets operator_alerts_enabled
     *
     * @return bool
     */
    public function getOperatorAlertsEnabled()
    {
        return $this->container['operator_alerts_enabled'];
    }

    /**
     * Sets operator_alerts_enabled
     *
     * @param bool $operator_alerts_enabled operator_alerts_enabled
     *
     * @return $this
     */
    public function setOperatorAlertsEnabled($operator_alerts_enabled)
    {
        $this->container['operator_alerts_enabled'] = $operator_alerts_enabled;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_modified
     *
     * @return \DateTime
     */
    public function getStatusModified()
    {
        return $this->container['status_modified'];
    }

    /**
     * Sets status_modified
     *
     * @param \DateTime $status_modified status_modified
     *
     * @return $this
     */
    public function setStatusModified($status_modified)
    {
        $this->container['status_modified'] = $status_modified;

        return $this;
    }

    /**
     * Gets previous_data
     *
     * @return string
     */
    public function getPreviousData()
    {
        return $this->container['previous_data'];
    }

    /**
     * Sets previous_data
     *
     * @param string $previous_data previous_data
     *
     * @return $this
     */
    public function setPreviousData($previous_data)
    {
        $this->container['previous_data'] = $previous_data;

        return $this;
    }

    /**
     * Gets previous_created
     *
     * @return \DateTime
     */
    public function getPreviousCreated()
    {
        return $this->container['previous_created'];
    }

    /**
     * Sets previous_created
     *
     * @param \DateTime $previous_created previous_created
     *
     * @return $this
     */
    public function setPreviousCreated($previous_created)
    {
        $this->container['previous_created'] = $previous_created;

        return $this;
    }

    /**
     * Gets draft_data
     *
     * @return string
     */
    public function getDraftData()
    {
        return $this->container['draft_data'];
    }

    /**
     * Sets draft_data
     *
     * @param string $draft_data draft_data
     *
     * @return $this
     */
    public function setDraftData($draft_data)
    {
        $this->container['draft_data'] = $draft_data;

        return $this;
    }

    /**
     * Gets draft_created
     *
     * @return \DateTime
     */
    public function getDraftCreated()
    {
        return $this->container['draft_created'];
    }

    /**
     * Sets draft_created
     *
     * @param \DateTime $draft_created draft_created
     *
     * @return $this
     */
    public function setDraftCreated($draft_created)
    {
        $this->container['draft_created'] = $draft_created;

        return $this;
    }

    /**
     * Gets draft_comment
     *
     * @return string
     */
    public function getDraftComment()
    {
        return $this->container['draft_comment'];
    }

    /**
     * Sets draft_comment
     *
     * @param string $draft_comment draft_comment
     *
     * @return $this
     */
    public function setDraftComment($draft_comment)
    {
        $this->container['draft_comment'] = $draft_comment;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets last_contact
     *
     * @return \DateTime
     */
    public function getLastContact()
    {
        return $this->container['last_contact'];
    }

    /**
     * Sets last_contact
     *
     * @param \DateTime $last_contact last_contact
     *
     * @return $this
     */
    public function setLastContact($last_contact)
    {
        $this->container['last_contact'] = $last_contact;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


