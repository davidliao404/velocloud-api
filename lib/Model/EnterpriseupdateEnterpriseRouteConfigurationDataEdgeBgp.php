<?php
/**
 * EnterpriseupdateEnterpriseRouteConfigurationDataEdgeBgp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.2.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnterpriseupdateEnterpriseRouteConfigurationDataEdgeBgp Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterpriseupdateEnterpriseRouteConfigurationDataEdgeBgp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'enterpriseupdateEnterpriseRouteConfiguration_data_edge_bgp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'advertise_internal' => 'bool',
        'advertise_external' => 'bool',
        'advertise_neighbor_tags' => '\Swagger\Client\Model\EnterpriseupdateEnterpriseRouteConfigurationDataEdgeBgpAdvertiseNeighborTags'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'advertise_internal' => null,
        'advertise_external' => null,
        'advertise_neighbor_tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advertise_internal' => 'advertiseInternal',
        'advertise_external' => 'advertiseExternal',
        'advertise_neighbor_tags' => 'advertiseNeighborTags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advertise_internal' => 'setAdvertiseInternal',
        'advertise_external' => 'setAdvertiseExternal',
        'advertise_neighbor_tags' => 'setAdvertiseNeighborTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advertise_internal' => 'getAdvertiseInternal',
        'advertise_external' => 'getAdvertiseExternal',
        'advertise_neighbor_tags' => 'getAdvertiseNeighborTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['advertise_internal'] = isset($data['advertise_internal']) ? $data['advertise_internal'] : true;
        $this->container['advertise_external'] = isset($data['advertise_external']) ? $data['advertise_external'] : false;
        $this->container['advertise_neighbor_tags'] = isset($data['advertise_neighbor_tags']) ? $data['advertise_neighbor_tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['advertise_internal'] === null) {
            $invalidProperties[] = "'advertise_internal' can't be null";
        }
        if ($this->container['advertise_external'] === null) {
            $invalidProperties[] = "'advertise_external' can't be null";
        }
        if ($this->container['advertise_neighbor_tags'] === null) {
            $invalidProperties[] = "'advertise_neighbor_tags' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['advertise_internal'] === null) {
            return false;
        }
        if ($this->container['advertise_external'] === null) {
            return false;
        }
        if ($this->container['advertise_neighbor_tags'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets advertise_internal
     *
     * @return bool
     */
    public function getAdvertiseInternal()
    {
        return $this->container['advertise_internal'];
    }

    /**
     * Sets advertise_internal
     *
     * @param bool $advertise_internal advertise_internal
     *
     * @return $this
     */
    public function setAdvertiseInternal($advertise_internal)
    {
        $this->container['advertise_internal'] = $advertise_internal;

        return $this;
    }

    /**
     * Gets advertise_external
     *
     * @return bool
     */
    public function getAdvertiseExternal()
    {
        return $this->container['advertise_external'];
    }

    /**
     * Sets advertise_external
     *
     * @param bool $advertise_external advertise_external
     *
     * @return $this
     */
    public function setAdvertiseExternal($advertise_external)
    {
        $this->container['advertise_external'] = $advertise_external;

        return $this;
    }

    /**
     * Gets advertise_neighbor_tags
     *
     * @return \Swagger\Client\Model\EnterpriseupdateEnterpriseRouteConfigurationDataEdgeBgpAdvertiseNeighborTags
     */
    public function getAdvertiseNeighborTags()
    {
        return $this->container['advertise_neighbor_tags'];
    }

    /**
     * Sets advertise_neighbor_tags
     *
     * @param \Swagger\Client\Model\EnterpriseupdateEnterpriseRouteConfigurationDataEdgeBgpAdvertiseNeighborTags $advertise_neighbor_tags advertise_neighbor_tags
     *
     * @return $this
     */
    public function setAdvertiseNeighborTags($advertise_neighbor_tags)
    {
        $this->container['advertise_neighbor_tags'] = $advertise_neighbor_tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


