<?php
/**
 * InventoryItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.2.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InventoryItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inventory_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'device_serial_number' => 'string',
        'device_uuid' => 'string',
        'model_number' => 'string',
        'site_id' => 'int',
        'description' => 'string',
        'acknowledged' => 'int',
        'edge_id' => 'int',
        'edge' => '\Swagger\Client\Model\InventoryItemEdge',
        'inventory_state' => 'string',
        'inventory_edge_state' => 'string',
        'inventory_action' => 'string',
        'vco_owner_id' => 'int',
        'vco_owner' => '\Swagger\Client\Model\InventoryItemVcoOwner',
        'modified' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'device_serial_number' => null,
        'device_uuid' => null,
        'model_number' => null,
        'site_id' => null,
        'description' => null,
        'acknowledged' => null,
        'edge_id' => null,
        'edge' => null,
        'inventory_state' => null,
        'inventory_edge_state' => null,
        'inventory_action' => null,
        'vco_owner_id' => null,
        'vco_owner' => null,
        'modified' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'device_serial_number' => 'deviceSerialNumber',
        'device_uuid' => 'deviceUuid',
        'model_number' => 'modelNumber',
        'site_id' => 'siteId',
        'description' => 'description',
        'acknowledged' => 'acknowledged',
        'edge_id' => 'edgeId',
        'edge' => 'edge',
        'inventory_state' => 'inventoryState',
        'inventory_edge_state' => 'inventoryEdgeState',
        'inventory_action' => 'inventoryAction',
        'vco_owner_id' => 'vcoOwnerId',
        'vco_owner' => 'vcoOwner',
        'modified' => 'modified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'device_serial_number' => 'setDeviceSerialNumber',
        'device_uuid' => 'setDeviceUuid',
        'model_number' => 'setModelNumber',
        'site_id' => 'setSiteId',
        'description' => 'setDescription',
        'acknowledged' => 'setAcknowledged',
        'edge_id' => 'setEdgeId',
        'edge' => 'setEdge',
        'inventory_state' => 'setInventoryState',
        'inventory_edge_state' => 'setInventoryEdgeState',
        'inventory_action' => 'setInventoryAction',
        'vco_owner_id' => 'setVcoOwnerId',
        'vco_owner' => 'setVcoOwner',
        'modified' => 'setModified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'device_serial_number' => 'getDeviceSerialNumber',
        'device_uuid' => 'getDeviceUuid',
        'model_number' => 'getModelNumber',
        'site_id' => 'getSiteId',
        'description' => 'getDescription',
        'acknowledged' => 'getAcknowledged',
        'edge_id' => 'getEdgeId',
        'edge' => 'getEdge',
        'inventory_state' => 'getInventoryState',
        'inventory_edge_state' => 'getInventoryEdgeState',
        'inventory_action' => 'getInventoryAction',
        'vco_owner_id' => 'getVcoOwnerId',
        'vco_owner' => 'getVcoOwner',
        'modified' => 'getModified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['device_serial_number'] = isset($data['device_serial_number']) ? $data['device_serial_number'] : null;
        $this->container['device_uuid'] = isset($data['device_uuid']) ? $data['device_uuid'] : null;
        $this->container['model_number'] = isset($data['model_number']) ? $data['model_number'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['acknowledged'] = isset($data['acknowledged']) ? $data['acknowledged'] : null;
        $this->container['edge_id'] = isset($data['edge_id']) ? $data['edge_id'] : null;
        $this->container['edge'] = isset($data['edge']) ? $data['edge'] : null;
        $this->container['inventory_state'] = isset($data['inventory_state']) ? $data['inventory_state'] : null;
        $this->container['inventory_edge_state'] = isset($data['inventory_edge_state']) ? $data['inventory_edge_state'] : null;
        $this->container['inventory_action'] = isset($data['inventory_action']) ? $data['inventory_action'] : null;
        $this->container['vco_owner_id'] = isset($data['vco_owner_id']) ? $data['vco_owner_id'] : null;
        $this->container['vco_owner'] = isset($data['vco_owner']) ? $data['vco_owner'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets device_serial_number
     *
     * @return string
     */
    public function getDeviceSerialNumber()
    {
        return $this->container['device_serial_number'];
    }

    /**
     * Sets device_serial_number
     *
     * @param string $device_serial_number device_serial_number
     *
     * @return $this
     */
    public function setDeviceSerialNumber($device_serial_number)
    {
        $this->container['device_serial_number'] = $device_serial_number;

        return $this;
    }

    /**
     * Gets device_uuid
     *
     * @return string
     */
    public function getDeviceUuid()
    {
        return $this->container['device_uuid'];
    }

    /**
     * Sets device_uuid
     *
     * @param string $device_uuid device_uuid
     *
     * @return $this
     */
    public function setDeviceUuid($device_uuid)
    {
        $this->container['device_uuid'] = $device_uuid;

        return $this;
    }

    /**
     * Gets model_number
     *
     * @return string
     */
    public function getModelNumber()
    {
        return $this->container['model_number'];
    }

    /**
     * Sets model_number
     *
     * @param string $model_number model_number
     *
     * @return $this
     */
    public function setModelNumber($model_number)
    {
        $this->container['model_number'] = $model_number;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return int
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param int $site_id site_id
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets acknowledged
     *
     * @return int
     */
    public function getAcknowledged()
    {
        return $this->container['acknowledged'];
    }

    /**
     * Sets acknowledged
     *
     * @param int $acknowledged acknowledged
     *
     * @return $this
     */
    public function setAcknowledged($acknowledged)
    {
        $this->container['acknowledged'] = $acknowledged;

        return $this;
    }

    /**
     * Gets edge_id
     *
     * @return int
     */
    public function getEdgeId()
    {
        return $this->container['edge_id'];
    }

    /**
     * Sets edge_id
     *
     * @param int $edge_id edge_id
     *
     * @return $this
     */
    public function setEdgeId($edge_id)
    {
        $this->container['edge_id'] = $edge_id;

        return $this;
    }

    /**
     * Gets edge
     *
     * @return \Swagger\Client\Model\InventoryItemEdge
     */
    public function getEdge()
    {
        return $this->container['edge'];
    }

    /**
     * Sets edge
     *
     * @param \Swagger\Client\Model\InventoryItemEdge $edge edge
     *
     * @return $this
     */
    public function setEdge($edge)
    {
        $this->container['edge'] = $edge;

        return $this;
    }

    /**
     * Gets inventory_state
     *
     * @return string
     */
    public function getInventoryState()
    {
        return $this->container['inventory_state'];
    }

    /**
     * Sets inventory_state
     *
     * @param string $inventory_state inventory_state
     *
     * @return $this
     */
    public function setInventoryState($inventory_state)
    {
        $this->container['inventory_state'] = $inventory_state;

        return $this;
    }

    /**
     * Gets inventory_edge_state
     *
     * @return string
     */
    public function getInventoryEdgeState()
    {
        return $this->container['inventory_edge_state'];
    }

    /**
     * Sets inventory_edge_state
     *
     * @param string $inventory_edge_state inventory_edge_state
     *
     * @return $this
     */
    public function setInventoryEdgeState($inventory_edge_state)
    {
        $this->container['inventory_edge_state'] = $inventory_edge_state;

        return $this;
    }

    /**
     * Gets inventory_action
     *
     * @return string
     */
    public function getInventoryAction()
    {
        return $this->container['inventory_action'];
    }

    /**
     * Sets inventory_action
     *
     * @param string $inventory_action inventory_action
     *
     * @return $this
     */
    public function setInventoryAction($inventory_action)
    {
        $this->container['inventory_action'] = $inventory_action;

        return $this;
    }

    /**
     * Gets vco_owner_id
     *
     * @return int
     */
    public function getVcoOwnerId()
    {
        return $this->container['vco_owner_id'];
    }

    /**
     * Sets vco_owner_id
     *
     * @param int $vco_owner_id vco_owner_id
     *
     * @return $this
     */
    public function setVcoOwnerId($vco_owner_id)
    {
        $this->container['vco_owner_id'] = $vco_owner_id;

        return $this;
    }

    /**
     * Gets vco_owner
     *
     * @return \Swagger\Client\Model\InventoryItemVcoOwner
     */
    public function getVcoOwner()
    {
        return $this->container['vco_owner'];
    }

    /**
     * Sets vco_owner
     *
     * @param \Swagger\Client\Model\InventoryItemVcoOwner $vco_owner vco_owner
     *
     * @return $this
     */
    public function setVcoOwner($vco_owner)
    {
        $this->container['vco_owner'] = $vco_owner;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


