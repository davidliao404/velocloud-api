<?php
/**
 * DisasterRecoveryGetReplicationStatusResultStateHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DisasterRecoveryGetReplicationStatusResultStateHistory Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DisasterRecoveryGetReplicationStatusResultStateHistory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'disaster_recovery_get_replication_status_result_stateHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from' => 'string',
        'to' => 'string',
        'timestamp' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from' => null,
        'to' => null,
        'timestamp' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from' => 'from',
        'to' => 'to',
        'timestamp' => 'timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from' => 'setFrom',
        'to' => 'setTo',
        'timestamp' => 'setTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from' => 'getFrom',
        'to' => 'getTo',
        'timestamp' => 'getTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FROM_UNCONFIGURED = 'UNCONFIGURED';
    const FROM_ACTIVE_CONFIGURING = 'ACTIVE_CONFIGURING';
    const FROM_ACTIVE_CONFIGURED = 'ACTIVE_CONFIGURED';
    const FROM_LAUNCHING_STANDBY = 'LAUNCHING_STANDBY';
    const FROM_LAUNCHED_STANDBY = 'LAUNCHED_STANDBY';
    const FROM_ACTIVE_WAIT_STANDBY = 'ACTIVE_WAIT_STANDBY';
    const FROM_PENDING_STANDBY_CANDIDATE = 'PENDING_STANDBY_CANDIDATE';
    const FROM_STANDBY_CANDIDATE = 'STANDBY_CANDIDATE';
    const FROM_STANDBY_CONFIG_RQST = 'STANDBY_CONFIG_RQST';
    const FROM_STANDBY_CONFIGURING = 'STANDBY_CONFIGURING';
    const FROM_STANDBY_CONFIGURED = 'STANDBY_CONFIGURED';
    const FROM_PENDING_STANDBY_UNCONFIG = 'PENDING_STANDBY_UNCONFIG';
    const FROM_STANDBY_UNCONFIG = 'STANDBY_UNCONFIG';
    const FROM_PENDING_STANDBY_PROMOTION = 'PENDING_STANDBY_PROMOTION';
    const FROM_STANDBY_PROMOTED = 'STANDBY_PROMOTED';
    const FROM_PENDING_ACTIVE_DEMOTION = 'PENDING_ACTIVE_DEMOTION';
    const FROM_COPYING_DB = 'COPYING_DB';
    const FROM_COPY_DB_DONE = 'COPY_DB_DONE';
    const FROM_COPYING_FILES = 'COPYING_FILES';
    const FROM_COPY_FILES_DONE = 'COPY_FILES_DONE';
    const FROM_SYNC_CONFIGURING = 'SYNC_CONFIGURING';
    const FROM_STANDBY_RUNNING = 'STANDBY_RUNNING';
    const FROM_UPGRADING = 'UPGRADING';
    const FROM_FAILURE_ACTIVE_CONFIGURING = 'FAILURE_ACTIVE_CONFIGURING';
    const FROM_FAILURE_LAUNCHING_STANDBY = 'FAILURE_LAUNCHING_STANDBY';
    const FROM_FAILURE_STANDBY_CONFIGURING = 'FAILURE_STANDBY_CONFIGURING';
    const FROM_FAILURE_GET_STANDBY_CONFIG = 'FAILURE_GET_STANDBY_CONFIG';
    const FROM_FAILURE_COPYING_DB = 'FAILURE_COPYING_DB';
    const FROM_FAILURE_COPYING_FILES = 'FAILURE_COPYING_FILES';
    const FROM_FAILURE_SYNC_CONFIGURING = 'FAILURE_SYNC_CONFIGURING';
    const FROM_FAILURE_SYNCING_FILES = 'FAILURE_SYNCING_FILES';
    const FROM_FAILURE_GET_STANDBY_STATUS = 'FAILURE_GET_STANDBY_STATUS';
    const FROM_FAILURE_GET_ACTIVE_STATUS = 'FAILURE_GET_ACTIVE_STATUS';
    const FROM_FAILURE_MYSQL_ACTIVE_STATUS = 'FAILURE_MYSQL_ACTIVE_STATUS';
    const FROM_FAILURE_MYSQL_STANDBY_STATUS = 'FAILURE_MYSQL_STANDBY_STATUS';
    const FROM_FAILURE_STANDBY_CANDIDATE = 'FAILURE_STANDBY_CANDIDATE';
    const FROM_FAILURE_STANDBY_UNCONFIG = 'FAILURE_STANDBY_UNCONFIG';
    const FROM_FAILURE_STANDBY_PROMOTION = 'FAILURE_STANDBY_PROMOTION';
    const FROM_FAILURE_ACTIVE_DEMOTION = 'FAILURE_ACTIVE_DEMOTION';
    const TO_UNCONFIGURED = 'UNCONFIGURED';
    const TO_ACTIVE_CONFIGURING = 'ACTIVE_CONFIGURING';
    const TO_ACTIVE_CONFIGURED = 'ACTIVE_CONFIGURED';
    const TO_LAUNCHING_STANDBY = 'LAUNCHING_STANDBY';
    const TO_LAUNCHED_STANDBY = 'LAUNCHED_STANDBY';
    const TO_ACTIVE_WAIT_STANDBY = 'ACTIVE_WAIT_STANDBY';
    const TO_PENDING_STANDBY_CANDIDATE = 'PENDING_STANDBY_CANDIDATE';
    const TO_STANDBY_CANDIDATE = 'STANDBY_CANDIDATE';
    const TO_STANDBY_CONFIG_RQST = 'STANDBY_CONFIG_RQST';
    const TO_STANDBY_CONFIGURING = 'STANDBY_CONFIGURING';
    const TO_STANDBY_CONFIGURED = 'STANDBY_CONFIGURED';
    const TO_PENDING_STANDBY_UNCONFIG = 'PENDING_STANDBY_UNCONFIG';
    const TO_STANDBY_UNCONFIG = 'STANDBY_UNCONFIG';
    const TO_PENDING_STANDBY_PROMOTION = 'PENDING_STANDBY_PROMOTION';
    const TO_STANDBY_PROMOTED = 'STANDBY_PROMOTED';
    const TO_PENDING_ACTIVE_DEMOTION = 'PENDING_ACTIVE_DEMOTION';
    const TO_COPYING_DB = 'COPYING_DB';
    const TO_COPY_DB_DONE = 'COPY_DB_DONE';
    const TO_COPYING_FILES = 'COPYING_FILES';
    const TO_COPY_FILES_DONE = 'COPY_FILES_DONE';
    const TO_SYNC_CONFIGURING = 'SYNC_CONFIGURING';
    const TO_STANDBY_RUNNING = 'STANDBY_RUNNING';
    const TO_UPGRADING = 'UPGRADING';
    const TO_FAILURE_ACTIVE_CONFIGURING = 'FAILURE_ACTIVE_CONFIGURING';
    const TO_FAILURE_LAUNCHING_STANDBY = 'FAILURE_LAUNCHING_STANDBY';
    const TO_FAILURE_STANDBY_CONFIGURING = 'FAILURE_STANDBY_CONFIGURING';
    const TO_FAILURE_GET_STANDBY_CONFIG = 'FAILURE_GET_STANDBY_CONFIG';
    const TO_FAILURE_COPYING_DB = 'FAILURE_COPYING_DB';
    const TO_FAILURE_COPYING_FILES = 'FAILURE_COPYING_FILES';
    const TO_FAILURE_SYNC_CONFIGURING = 'FAILURE_SYNC_CONFIGURING';
    const TO_FAILURE_SYNCING_FILES = 'FAILURE_SYNCING_FILES';
    const TO_FAILURE_GET_STANDBY_STATUS = 'FAILURE_GET_STANDBY_STATUS';
    const TO_FAILURE_GET_ACTIVE_STATUS = 'FAILURE_GET_ACTIVE_STATUS';
    const TO_FAILURE_MYSQL_ACTIVE_STATUS = 'FAILURE_MYSQL_ACTIVE_STATUS';
    const TO_FAILURE_MYSQL_STANDBY_STATUS = 'FAILURE_MYSQL_STANDBY_STATUS';
    const TO_FAILURE_STANDBY_CANDIDATE = 'FAILURE_STANDBY_CANDIDATE';
    const TO_FAILURE_STANDBY_UNCONFIG = 'FAILURE_STANDBY_UNCONFIG';
    const TO_FAILURE_STANDBY_PROMOTION = 'FAILURE_STANDBY_PROMOTION';
    const TO_FAILURE_ACTIVE_DEMOTION = 'FAILURE_ACTIVE_DEMOTION';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFromAllowableValues()
    {
        return [
            self::FROM_UNCONFIGURED,
            self::FROM_ACTIVE_CONFIGURING,
            self::FROM_ACTIVE_CONFIGURED,
            self::FROM_LAUNCHING_STANDBY,
            self::FROM_LAUNCHED_STANDBY,
            self::FROM_ACTIVE_WAIT_STANDBY,
            self::FROM_PENDING_STANDBY_CANDIDATE,
            self::FROM_STANDBY_CANDIDATE,
            self::FROM_STANDBY_CONFIG_RQST,
            self::FROM_STANDBY_CONFIGURING,
            self::FROM_STANDBY_CONFIGURED,
            self::FROM_PENDING_STANDBY_UNCONFIG,
            self::FROM_STANDBY_UNCONFIG,
            self::FROM_PENDING_STANDBY_PROMOTION,
            self::FROM_STANDBY_PROMOTED,
            self::FROM_PENDING_ACTIVE_DEMOTION,
            self::FROM_COPYING_DB,
            self::FROM_COPY_DB_DONE,
            self::FROM_COPYING_FILES,
            self::FROM_COPY_FILES_DONE,
            self::FROM_SYNC_CONFIGURING,
            self::FROM_STANDBY_RUNNING,
            self::FROM_UPGRADING,
            self::FROM_FAILURE_ACTIVE_CONFIGURING,
            self::FROM_FAILURE_LAUNCHING_STANDBY,
            self::FROM_FAILURE_STANDBY_CONFIGURING,
            self::FROM_FAILURE_GET_STANDBY_CONFIG,
            self::FROM_FAILURE_COPYING_DB,
            self::FROM_FAILURE_COPYING_FILES,
            self::FROM_FAILURE_SYNC_CONFIGURING,
            self::FROM_FAILURE_SYNCING_FILES,
            self::FROM_FAILURE_GET_STANDBY_STATUS,
            self::FROM_FAILURE_GET_ACTIVE_STATUS,
            self::FROM_FAILURE_MYSQL_ACTIVE_STATUS,
            self::FROM_FAILURE_MYSQL_STANDBY_STATUS,
            self::FROM_FAILURE_STANDBY_CANDIDATE,
            self::FROM_FAILURE_STANDBY_UNCONFIG,
            self::FROM_FAILURE_STANDBY_PROMOTION,
            self::FROM_FAILURE_ACTIVE_DEMOTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getToAllowableValues()
    {
        return [
            self::TO_UNCONFIGURED,
            self::TO_ACTIVE_CONFIGURING,
            self::TO_ACTIVE_CONFIGURED,
            self::TO_LAUNCHING_STANDBY,
            self::TO_LAUNCHED_STANDBY,
            self::TO_ACTIVE_WAIT_STANDBY,
            self::TO_PENDING_STANDBY_CANDIDATE,
            self::TO_STANDBY_CANDIDATE,
            self::TO_STANDBY_CONFIG_RQST,
            self::TO_STANDBY_CONFIGURING,
            self::TO_STANDBY_CONFIGURED,
            self::TO_PENDING_STANDBY_UNCONFIG,
            self::TO_STANDBY_UNCONFIG,
            self::TO_PENDING_STANDBY_PROMOTION,
            self::TO_STANDBY_PROMOTED,
            self::TO_PENDING_ACTIVE_DEMOTION,
            self::TO_COPYING_DB,
            self::TO_COPY_DB_DONE,
            self::TO_COPYING_FILES,
            self::TO_COPY_FILES_DONE,
            self::TO_SYNC_CONFIGURING,
            self::TO_STANDBY_RUNNING,
            self::TO_UPGRADING,
            self::TO_FAILURE_ACTIVE_CONFIGURING,
            self::TO_FAILURE_LAUNCHING_STANDBY,
            self::TO_FAILURE_STANDBY_CONFIGURING,
            self::TO_FAILURE_GET_STANDBY_CONFIG,
            self::TO_FAILURE_COPYING_DB,
            self::TO_FAILURE_COPYING_FILES,
            self::TO_FAILURE_SYNC_CONFIGURING,
            self::TO_FAILURE_SYNCING_FILES,
            self::TO_FAILURE_GET_STANDBY_STATUS,
            self::TO_FAILURE_GET_ACTIVE_STATUS,
            self::TO_FAILURE_MYSQL_ACTIVE_STATUS,
            self::TO_FAILURE_MYSQL_STANDBY_STATUS,
            self::TO_FAILURE_STANDBY_CANDIDATE,
            self::TO_FAILURE_STANDBY_UNCONFIG,
            self::TO_FAILURE_STANDBY_PROMOTION,
            self::TO_FAILURE_ACTIVE_DEMOTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFromAllowableValues();
        if (!in_array($this->container['from'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'from', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getToAllowableValues();
        if (!in_array($this->container['to'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'to', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getFromAllowableValues();
        if (!in_array($this->container['from'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getToAllowableValues();
        if (!in_array($this->container['to'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $allowedValues = $this->getFromAllowableValues();
        if (!is_null($from) && !in_array($from, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'from', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $allowedValues = $this->getToAllowableValues();
        if (!is_null($to) && !in_array($to, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'to', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


