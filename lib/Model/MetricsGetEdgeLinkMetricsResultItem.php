<?php
/**
 * MetricsGetEdgeLinkMetricsResultItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MetricsGetEdgeLinkMetricsResultItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetricsGetEdgeLinkMetricsResultItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'metrics_get_edge_link_metrics_result_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'best_jitter_ms_rx' => 'int',
        'best_jitter_ms_tx' => 'int',
        'best_latency_ms_rx' => 'int',
        'best_latency_ms_tx' => 'int',
        'best_loss_pct_rx' => 'int',
        'best_loss_pct_tx' => 'int',
        'bps_of_best_path_rx' => 'int',
        'bps_of_best_path_tx' => 'int',
        'control_bytes_rx' => 'int',
        'control_bytes_tx' => 'int',
        'control_packets_rx' => 'int',
        'control_packets_tx' => 'int',
        'link' => '\Swagger\Client\Model\Link',
        'link_id' => 'int',
        'name' => 'string',
        'p1_bytes_rx' => 'int',
        'p1_bytes_tx' => 'int',
        'p1_packets_rx' => 'int',
        'p1_packets_tx' => 'int',
        'p2_bytes_rx' => 'int',
        'p2_bytes_tx' => 'int',
        'p2_packets_rx' => 'int',
        'p2_packets_tx' => 'int',
        'p3_bytes_rx' => 'int',
        'p3_bytes_tx' => 'int',
        'p3_packets_rx' => 'int',
        'p3_packets_tx' => 'int',
        'score_rx' => 'int',
        'score_tx' => 'int',
        'signal_strength' => 'int',
        'state' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'best_jitter_ms_rx' => null,
        'best_jitter_ms_tx' => null,
        'best_latency_ms_rx' => null,
        'best_latency_ms_tx' => null,
        'best_loss_pct_rx' => null,
        'best_loss_pct_tx' => null,
        'bps_of_best_path_rx' => null,
        'bps_of_best_path_tx' => null,
        'control_bytes_rx' => null,
        'control_bytes_tx' => null,
        'control_packets_rx' => null,
        'control_packets_tx' => null,
        'link' => null,
        'link_id' => null,
        'name' => null,
        'p1_bytes_rx' => null,
        'p1_bytes_tx' => null,
        'p1_packets_rx' => null,
        'p1_packets_tx' => null,
        'p2_bytes_rx' => null,
        'p2_bytes_tx' => null,
        'p2_packets_rx' => null,
        'p2_packets_tx' => null,
        'p3_bytes_rx' => null,
        'p3_bytes_tx' => null,
        'p3_packets_rx' => null,
        'p3_packets_tx' => null,
        'score_rx' => null,
        'score_tx' => null,
        'signal_strength' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'best_jitter_ms_rx' => 'bestJitterMsRx',
        'best_jitter_ms_tx' => 'bestJitterMsTx',
        'best_latency_ms_rx' => 'bestLatencyMsRx',
        'best_latency_ms_tx' => 'bestLatencyMsTx',
        'best_loss_pct_rx' => 'bestLossPctRx',
        'best_loss_pct_tx' => 'bestLossPctTx',
        'bps_of_best_path_rx' => 'bpsOfBestPathRx',
        'bps_of_best_path_tx' => 'bpsOfBestPathTx',
        'control_bytes_rx' => 'controlBytesRx',
        'control_bytes_tx' => 'controlBytesTx',
        'control_packets_rx' => 'controlPacketsRx',
        'control_packets_tx' => 'controlPacketsTx',
        'link' => 'link',
        'link_id' => 'linkId',
        'name' => 'name',
        'p1_bytes_rx' => 'p1BytesRx',
        'p1_bytes_tx' => 'p1BytesTx',
        'p1_packets_rx' => 'p1PacketsRx',
        'p1_packets_tx' => 'p1PacketsTx',
        'p2_bytes_rx' => 'p2BytesRx',
        'p2_bytes_tx' => 'p2BytesTx',
        'p2_packets_rx' => 'p2PacketsRx',
        'p2_packets_tx' => 'p2PacketsTx',
        'p3_bytes_rx' => 'p3BytesRx',
        'p3_bytes_tx' => 'p3BytesTx',
        'p3_packets_rx' => 'p3PacketsRx',
        'p3_packets_tx' => 'p3PacketsTx',
        'score_rx' => 'scoreRx',
        'score_tx' => 'scoreTx',
        'signal_strength' => 'signalStrength',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'best_jitter_ms_rx' => 'setBestJitterMsRx',
        'best_jitter_ms_tx' => 'setBestJitterMsTx',
        'best_latency_ms_rx' => 'setBestLatencyMsRx',
        'best_latency_ms_tx' => 'setBestLatencyMsTx',
        'best_loss_pct_rx' => 'setBestLossPctRx',
        'best_loss_pct_tx' => 'setBestLossPctTx',
        'bps_of_best_path_rx' => 'setBpsOfBestPathRx',
        'bps_of_best_path_tx' => 'setBpsOfBestPathTx',
        'control_bytes_rx' => 'setControlBytesRx',
        'control_bytes_tx' => 'setControlBytesTx',
        'control_packets_rx' => 'setControlPacketsRx',
        'control_packets_tx' => 'setControlPacketsTx',
        'link' => 'setLink',
        'link_id' => 'setLinkId',
        'name' => 'setName',
        'p1_bytes_rx' => 'setP1BytesRx',
        'p1_bytes_tx' => 'setP1BytesTx',
        'p1_packets_rx' => 'setP1PacketsRx',
        'p1_packets_tx' => 'setP1PacketsTx',
        'p2_bytes_rx' => 'setP2BytesRx',
        'p2_bytes_tx' => 'setP2BytesTx',
        'p2_packets_rx' => 'setP2PacketsRx',
        'p2_packets_tx' => 'setP2PacketsTx',
        'p3_bytes_rx' => 'setP3BytesRx',
        'p3_bytes_tx' => 'setP3BytesTx',
        'p3_packets_rx' => 'setP3PacketsRx',
        'p3_packets_tx' => 'setP3PacketsTx',
        'score_rx' => 'setScoreRx',
        'score_tx' => 'setScoreTx',
        'signal_strength' => 'setSignalStrength',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'best_jitter_ms_rx' => 'getBestJitterMsRx',
        'best_jitter_ms_tx' => 'getBestJitterMsTx',
        'best_latency_ms_rx' => 'getBestLatencyMsRx',
        'best_latency_ms_tx' => 'getBestLatencyMsTx',
        'best_loss_pct_rx' => 'getBestLossPctRx',
        'best_loss_pct_tx' => 'getBestLossPctTx',
        'bps_of_best_path_rx' => 'getBpsOfBestPathRx',
        'bps_of_best_path_tx' => 'getBpsOfBestPathTx',
        'control_bytes_rx' => 'getControlBytesRx',
        'control_bytes_tx' => 'getControlBytesTx',
        'control_packets_rx' => 'getControlPacketsRx',
        'control_packets_tx' => 'getControlPacketsTx',
        'link' => 'getLink',
        'link_id' => 'getLinkId',
        'name' => 'getName',
        'p1_bytes_rx' => 'getP1BytesRx',
        'p1_bytes_tx' => 'getP1BytesTx',
        'p1_packets_rx' => 'getP1PacketsRx',
        'p1_packets_tx' => 'getP1PacketsTx',
        'p2_bytes_rx' => 'getP2BytesRx',
        'p2_bytes_tx' => 'getP2BytesTx',
        'p2_packets_rx' => 'getP2PacketsRx',
        'p2_packets_tx' => 'getP2PacketsTx',
        'p3_bytes_rx' => 'getP3BytesRx',
        'p3_bytes_tx' => 'getP3BytesTx',
        'p3_packets_rx' => 'getP3PacketsRx',
        'p3_packets_tx' => 'getP3PacketsTx',
        'score_rx' => 'getScoreRx',
        'score_tx' => 'getScoreTx',
        'signal_strength' => 'getSignalStrength',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['best_jitter_ms_rx'] = isset($data['best_jitter_ms_rx']) ? $data['best_jitter_ms_rx'] : null;
        $this->container['best_jitter_ms_tx'] = isset($data['best_jitter_ms_tx']) ? $data['best_jitter_ms_tx'] : null;
        $this->container['best_latency_ms_rx'] = isset($data['best_latency_ms_rx']) ? $data['best_latency_ms_rx'] : null;
        $this->container['best_latency_ms_tx'] = isset($data['best_latency_ms_tx']) ? $data['best_latency_ms_tx'] : null;
        $this->container['best_loss_pct_rx'] = isset($data['best_loss_pct_rx']) ? $data['best_loss_pct_rx'] : null;
        $this->container['best_loss_pct_tx'] = isset($data['best_loss_pct_tx']) ? $data['best_loss_pct_tx'] : null;
        $this->container['bps_of_best_path_rx'] = isset($data['bps_of_best_path_rx']) ? $data['bps_of_best_path_rx'] : null;
        $this->container['bps_of_best_path_tx'] = isset($data['bps_of_best_path_tx']) ? $data['bps_of_best_path_tx'] : null;
        $this->container['control_bytes_rx'] = isset($data['control_bytes_rx']) ? $data['control_bytes_rx'] : null;
        $this->container['control_bytes_tx'] = isset($data['control_bytes_tx']) ? $data['control_bytes_tx'] : null;
        $this->container['control_packets_rx'] = isset($data['control_packets_rx']) ? $data['control_packets_rx'] : null;
        $this->container['control_packets_tx'] = isset($data['control_packets_tx']) ? $data['control_packets_tx'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['link_id'] = isset($data['link_id']) ? $data['link_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['p1_bytes_rx'] = isset($data['p1_bytes_rx']) ? $data['p1_bytes_rx'] : null;
        $this->container['p1_bytes_tx'] = isset($data['p1_bytes_tx']) ? $data['p1_bytes_tx'] : null;
        $this->container['p1_packets_rx'] = isset($data['p1_packets_rx']) ? $data['p1_packets_rx'] : null;
        $this->container['p1_packets_tx'] = isset($data['p1_packets_tx']) ? $data['p1_packets_tx'] : null;
        $this->container['p2_bytes_rx'] = isset($data['p2_bytes_rx']) ? $data['p2_bytes_rx'] : null;
        $this->container['p2_bytes_tx'] = isset($data['p2_bytes_tx']) ? $data['p2_bytes_tx'] : null;
        $this->container['p2_packets_rx'] = isset($data['p2_packets_rx']) ? $data['p2_packets_rx'] : null;
        $this->container['p2_packets_tx'] = isset($data['p2_packets_tx']) ? $data['p2_packets_tx'] : null;
        $this->container['p3_bytes_rx'] = isset($data['p3_bytes_rx']) ? $data['p3_bytes_rx'] : null;
        $this->container['p3_bytes_tx'] = isset($data['p3_bytes_tx']) ? $data['p3_bytes_tx'] : null;
        $this->container['p3_packets_rx'] = isset($data['p3_packets_rx']) ? $data['p3_packets_rx'] : null;
        $this->container['p3_packets_tx'] = isset($data['p3_packets_tx']) ? $data['p3_packets_tx'] : null;
        $this->container['score_rx'] = isset($data['score_rx']) ? $data['score_rx'] : null;
        $this->container['score_tx'] = isset($data['score_tx']) ? $data['score_tx'] : null;
        $this->container['signal_strength'] = isset($data['signal_strength']) ? $data['signal_strength'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['link'] === null) {
            $invalidProperties[] = "'link' can't be null";
        }
        if ($this->container['link_id'] === null) {
            $invalidProperties[] = "'link_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['link'] === null) {
            return false;
        }
        if ($this->container['link_id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets best_jitter_ms_rx
     *
     * @return int
     */
    public function getBestJitterMsRx()
    {
        return $this->container['best_jitter_ms_rx'];
    }

    /**
     * Sets best_jitter_ms_rx
     *
     * @param int $best_jitter_ms_rx best_jitter_ms_rx
     *
     * @return $this
     */
    public function setBestJitterMsRx($best_jitter_ms_rx)
    {
        $this->container['best_jitter_ms_rx'] = $best_jitter_ms_rx;

        return $this;
    }

    /**
     * Gets best_jitter_ms_tx
     *
     * @return int
     */
    public function getBestJitterMsTx()
    {
        return $this->container['best_jitter_ms_tx'];
    }

    /**
     * Sets best_jitter_ms_tx
     *
     * @param int $best_jitter_ms_tx best_jitter_ms_tx
     *
     * @return $this
     */
    public function setBestJitterMsTx($best_jitter_ms_tx)
    {
        $this->container['best_jitter_ms_tx'] = $best_jitter_ms_tx;

        return $this;
    }

    /**
     * Gets best_latency_ms_rx
     *
     * @return int
     */
    public function getBestLatencyMsRx()
    {
        return $this->container['best_latency_ms_rx'];
    }

    /**
     * Sets best_latency_ms_rx
     *
     * @param int $best_latency_ms_rx best_latency_ms_rx
     *
     * @return $this
     */
    public function setBestLatencyMsRx($best_latency_ms_rx)
    {
        $this->container['best_latency_ms_rx'] = $best_latency_ms_rx;

        return $this;
    }

    /**
     * Gets best_latency_ms_tx
     *
     * @return int
     */
    public function getBestLatencyMsTx()
    {
        return $this->container['best_latency_ms_tx'];
    }

    /**
     * Sets best_latency_ms_tx
     *
     * @param int $best_latency_ms_tx best_latency_ms_tx
     *
     * @return $this
     */
    public function setBestLatencyMsTx($best_latency_ms_tx)
    {
        $this->container['best_latency_ms_tx'] = $best_latency_ms_tx;

        return $this;
    }

    /**
     * Gets best_loss_pct_rx
     *
     * @return int
     */
    public function getBestLossPctRx()
    {
        return $this->container['best_loss_pct_rx'];
    }

    /**
     * Sets best_loss_pct_rx
     *
     * @param int $best_loss_pct_rx best_loss_pct_rx
     *
     * @return $this
     */
    public function setBestLossPctRx($best_loss_pct_rx)
    {
        $this->container['best_loss_pct_rx'] = $best_loss_pct_rx;

        return $this;
    }

    /**
     * Gets best_loss_pct_tx
     *
     * @return int
     */
    public function getBestLossPctTx()
    {
        return $this->container['best_loss_pct_tx'];
    }

    /**
     * Sets best_loss_pct_tx
     *
     * @param int $best_loss_pct_tx best_loss_pct_tx
     *
     * @return $this
     */
    public function setBestLossPctTx($best_loss_pct_tx)
    {
        $this->container['best_loss_pct_tx'] = $best_loss_pct_tx;

        return $this;
    }

    /**
     * Gets bps_of_best_path_rx
     *
     * @return int
     */
    public function getBpsOfBestPathRx()
    {
        return $this->container['bps_of_best_path_rx'];
    }

    /**
     * Sets bps_of_best_path_rx
     *
     * @param int $bps_of_best_path_rx bps_of_best_path_rx
     *
     * @return $this
     */
    public function setBpsOfBestPathRx($bps_of_best_path_rx)
    {
        $this->container['bps_of_best_path_rx'] = $bps_of_best_path_rx;

        return $this;
    }

    /**
     * Gets bps_of_best_path_tx
     *
     * @return int
     */
    public function getBpsOfBestPathTx()
    {
        return $this->container['bps_of_best_path_tx'];
    }

    /**
     * Sets bps_of_best_path_tx
     *
     * @param int $bps_of_best_path_tx bps_of_best_path_tx
     *
     * @return $this
     */
    public function setBpsOfBestPathTx($bps_of_best_path_tx)
    {
        $this->container['bps_of_best_path_tx'] = $bps_of_best_path_tx;

        return $this;
    }

    /**
     * Gets control_bytes_rx
     *
     * @return int
     */
    public function getControlBytesRx()
    {
        return $this->container['control_bytes_rx'];
    }

    /**
     * Sets control_bytes_rx
     *
     * @param int $control_bytes_rx control_bytes_rx
     *
     * @return $this
     */
    public function setControlBytesRx($control_bytes_rx)
    {
        $this->container['control_bytes_rx'] = $control_bytes_rx;

        return $this;
    }

    /**
     * Gets control_bytes_tx
     *
     * @return int
     */
    public function getControlBytesTx()
    {
        return $this->container['control_bytes_tx'];
    }

    /**
     * Sets control_bytes_tx
     *
     * @param int $control_bytes_tx control_bytes_tx
     *
     * @return $this
     */
    public function setControlBytesTx($control_bytes_tx)
    {
        $this->container['control_bytes_tx'] = $control_bytes_tx;

        return $this;
    }

    /**
     * Gets control_packets_rx
     *
     * @return int
     */
    public function getControlPacketsRx()
    {
        return $this->container['control_packets_rx'];
    }

    /**
     * Sets control_packets_rx
     *
     * @param int $control_packets_rx control_packets_rx
     *
     * @return $this
     */
    public function setControlPacketsRx($control_packets_rx)
    {
        $this->container['control_packets_rx'] = $control_packets_rx;

        return $this;
    }

    /**
     * Gets control_packets_tx
     *
     * @return int
     */
    public function getControlPacketsTx()
    {
        return $this->container['control_packets_tx'];
    }

    /**
     * Sets control_packets_tx
     *
     * @param int $control_packets_tx control_packets_tx
     *
     * @return $this
     */
    public function setControlPacketsTx($control_packets_tx)
    {
        $this->container['control_packets_tx'] = $control_packets_tx;

        return $this;
    }

    /**
     * Gets link
     *
     * @return \Swagger\Client\Model\Link
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param \Swagger\Client\Model\Link $link link
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets link_id
     *
     * @return int
     */
    public function getLinkId()
    {
        return $this->container['link_id'];
    }

    /**
     * Sets link_id
     *
     * @param int $link_id link_id
     *
     * @return $this
     */
    public function setLinkId($link_id)
    {
        $this->container['link_id'] = $link_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets p1_bytes_rx
     *
     * @return int
     */
    public function getP1BytesRx()
    {
        return $this->container['p1_bytes_rx'];
    }

    /**
     * Sets p1_bytes_rx
     *
     * @param int $p1_bytes_rx p1_bytes_rx
     *
     * @return $this
     */
    public function setP1BytesRx($p1_bytes_rx)
    {
        $this->container['p1_bytes_rx'] = $p1_bytes_rx;

        return $this;
    }

    /**
     * Gets p1_bytes_tx
     *
     * @return int
     */
    public function getP1BytesTx()
    {
        return $this->container['p1_bytes_tx'];
    }

    /**
     * Sets p1_bytes_tx
     *
     * @param int $p1_bytes_tx p1_bytes_tx
     *
     * @return $this
     */
    public function setP1BytesTx($p1_bytes_tx)
    {
        $this->container['p1_bytes_tx'] = $p1_bytes_tx;

        return $this;
    }

    /**
     * Gets p1_packets_rx
     *
     * @return int
     */
    public function getP1PacketsRx()
    {
        return $this->container['p1_packets_rx'];
    }

    /**
     * Sets p1_packets_rx
     *
     * @param int $p1_packets_rx p1_packets_rx
     *
     * @return $this
     */
    public function setP1PacketsRx($p1_packets_rx)
    {
        $this->container['p1_packets_rx'] = $p1_packets_rx;

        return $this;
    }

    /**
     * Gets p1_packets_tx
     *
     * @return int
     */
    public function getP1PacketsTx()
    {
        return $this->container['p1_packets_tx'];
    }

    /**
     * Sets p1_packets_tx
     *
     * @param int $p1_packets_tx p1_packets_tx
     *
     * @return $this
     */
    public function setP1PacketsTx($p1_packets_tx)
    {
        $this->container['p1_packets_tx'] = $p1_packets_tx;

        return $this;
    }

    /**
     * Gets p2_bytes_rx
     *
     * @return int
     */
    public function getP2BytesRx()
    {
        return $this->container['p2_bytes_rx'];
    }

    /**
     * Sets p2_bytes_rx
     *
     * @param int $p2_bytes_rx p2_bytes_rx
     *
     * @return $this
     */
    public function setP2BytesRx($p2_bytes_rx)
    {
        $this->container['p2_bytes_rx'] = $p2_bytes_rx;

        return $this;
    }

    /**
     * Gets p2_bytes_tx
     *
     * @return int
     */
    public function getP2BytesTx()
    {
        return $this->container['p2_bytes_tx'];
    }

    /**
     * Sets p2_bytes_tx
     *
     * @param int $p2_bytes_tx p2_bytes_tx
     *
     * @return $this
     */
    public function setP2BytesTx($p2_bytes_tx)
    {
        $this->container['p2_bytes_tx'] = $p2_bytes_tx;

        return $this;
    }

    /**
     * Gets p2_packets_rx
     *
     * @return int
     */
    public function getP2PacketsRx()
    {
        return $this->container['p2_packets_rx'];
    }

    /**
     * Sets p2_packets_rx
     *
     * @param int $p2_packets_rx p2_packets_rx
     *
     * @return $this
     */
    public function setP2PacketsRx($p2_packets_rx)
    {
        $this->container['p2_packets_rx'] = $p2_packets_rx;

        return $this;
    }

    /**
     * Gets p2_packets_tx
     *
     * @return int
     */
    public function getP2PacketsTx()
    {
        return $this->container['p2_packets_tx'];
    }

    /**
     * Sets p2_packets_tx
     *
     * @param int $p2_packets_tx p2_packets_tx
     *
     * @return $this
     */
    public function setP2PacketsTx($p2_packets_tx)
    {
        $this->container['p2_packets_tx'] = $p2_packets_tx;

        return $this;
    }

    /**
     * Gets p3_bytes_rx
     *
     * @return int
     */
    public function getP3BytesRx()
    {
        return $this->container['p3_bytes_rx'];
    }

    /**
     * Sets p3_bytes_rx
     *
     * @param int $p3_bytes_rx p3_bytes_rx
     *
     * @return $this
     */
    public function setP3BytesRx($p3_bytes_rx)
    {
        $this->container['p3_bytes_rx'] = $p3_bytes_rx;

        return $this;
    }

    /**
     * Gets p3_bytes_tx
     *
     * @return int
     */
    public function getP3BytesTx()
    {
        return $this->container['p3_bytes_tx'];
    }

    /**
     * Sets p3_bytes_tx
     *
     * @param int $p3_bytes_tx p3_bytes_tx
     *
     * @return $this
     */
    public function setP3BytesTx($p3_bytes_tx)
    {
        $this->container['p3_bytes_tx'] = $p3_bytes_tx;

        return $this;
    }

    /**
     * Gets p3_packets_rx
     *
     * @return int
     */
    public function getP3PacketsRx()
    {
        return $this->container['p3_packets_rx'];
    }

    /**
     * Sets p3_packets_rx
     *
     * @param int $p3_packets_rx p3_packets_rx
     *
     * @return $this
     */
    public function setP3PacketsRx($p3_packets_rx)
    {
        $this->container['p3_packets_rx'] = $p3_packets_rx;

        return $this;
    }

    /**
     * Gets p3_packets_tx
     *
     * @return int
     */
    public function getP3PacketsTx()
    {
        return $this->container['p3_packets_tx'];
    }

    /**
     * Sets p3_packets_tx
     *
     * @param int $p3_packets_tx p3_packets_tx
     *
     * @return $this
     */
    public function setP3PacketsTx($p3_packets_tx)
    {
        $this->container['p3_packets_tx'] = $p3_packets_tx;

        return $this;
    }

    /**
     * Gets score_rx
     *
     * @return int
     */
    public function getScoreRx()
    {
        return $this->container['score_rx'];
    }

    /**
     * Sets score_rx
     *
     * @param int $score_rx score_rx
     *
     * @return $this
     */
    public function setScoreRx($score_rx)
    {
        $this->container['score_rx'] = $score_rx;

        return $this;
    }

    /**
     * Gets score_tx
     *
     * @return int
     */
    public function getScoreTx()
    {
        return $this->container['score_tx'];
    }

    /**
     * Sets score_tx
     *
     * @param int $score_tx score_tx
     *
     * @return $this
     */
    public function setScoreTx($score_tx)
    {
        $this->container['score_tx'] = $score_tx;

        return $this;
    }

    /**
     * Gets signal_strength
     *
     * @return int
     */
    public function getSignalStrength()
    {
        return $this->container['signal_strength'];
    }

    /**
     * Sets signal_strength
     *
     * @param int $signal_strength signal_strength
     *
     * @return $this
     */
    public function setSignalStrength($signal_strength)
    {
        $this->container['signal_strength'] = $signal_strength;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


