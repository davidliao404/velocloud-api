<?php
/**
 * Link
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Link Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Link implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'link';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'edge_id' => 'int',
        'logical_id' => 'string',
        'internal_id' => 'string',
        'interface' => 'string',
        'mac_address' => 'string',
        'ip_address' => 'string',
        'netmask' => 'string',
        'network_side' => 'string',
        'network_type' => 'string',
        'display_name' => 'string',
        'isp' => 'string',
        'org' => 'string',
        'lat' => 'float',
        'lon' => 'float',
        'last_active' => '\DateTime',
        'state' => 'string',
        'backup_state' => 'string',
        'vpn_state' => 'string',
        'last_event' => '\DateTime',
        'last_event_state' => 'string',
        'alerts_enabled' => 'int',
        'operator_alerts_enabled' => 'int',
        'service_state' => 'string',
        'modified' => '\DateTime',
        'service_groups' => '\Swagger\Client\Model\LinkServiceGroups'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created' => 'date-time',
        'edge_id' => null,
        'logical_id' => null,
        'internal_id' => null,
        'interface' => null,
        'mac_address' => null,
        'ip_address' => null,
        'netmask' => null,
        'network_side' => null,
        'network_type' => null,
        'display_name' => null,
        'isp' => null,
        'org' => null,
        'lat' => null,
        'lon' => null,
        'last_active' => 'date-time',
        'state' => null,
        'backup_state' => null,
        'vpn_state' => null,
        'last_event' => 'date-time',
        'last_event_state' => null,
        'alerts_enabled' => null,
        'operator_alerts_enabled' => null,
        'service_state' => null,
        'modified' => 'date-time',
        'service_groups' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'edge_id' => 'edgeId',
        'logical_id' => 'logicalId',
        'internal_id' => 'internalId',
        'interface' => 'interface',
        'mac_address' => 'macAddress',
        'ip_address' => 'ipAddress',
        'netmask' => 'netmask',
        'network_side' => 'networkSide',
        'network_type' => 'networkType',
        'display_name' => 'displayName',
        'isp' => 'isp',
        'org' => 'org',
        'lat' => 'lat',
        'lon' => 'lon',
        'last_active' => 'lastActive',
        'state' => 'state',
        'backup_state' => 'backupState',
        'vpn_state' => 'vpnState',
        'last_event' => 'lastEvent',
        'last_event_state' => 'lastEventState',
        'alerts_enabled' => 'alertsEnabled',
        'operator_alerts_enabled' => 'operatorAlertsEnabled',
        'service_state' => 'serviceState',
        'modified' => 'modified',
        'service_groups' => 'serviceGroups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'edge_id' => 'setEdgeId',
        'logical_id' => 'setLogicalId',
        'internal_id' => 'setInternalId',
        'interface' => 'setInterface',
        'mac_address' => 'setMacAddress',
        'ip_address' => 'setIpAddress',
        'netmask' => 'setNetmask',
        'network_side' => 'setNetworkSide',
        'network_type' => 'setNetworkType',
        'display_name' => 'setDisplayName',
        'isp' => 'setIsp',
        'org' => 'setOrg',
        'lat' => 'setLat',
        'lon' => 'setLon',
        'last_active' => 'setLastActive',
        'state' => 'setState',
        'backup_state' => 'setBackupState',
        'vpn_state' => 'setVpnState',
        'last_event' => 'setLastEvent',
        'last_event_state' => 'setLastEventState',
        'alerts_enabled' => 'setAlertsEnabled',
        'operator_alerts_enabled' => 'setOperatorAlertsEnabled',
        'service_state' => 'setServiceState',
        'modified' => 'setModified',
        'service_groups' => 'setServiceGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'edge_id' => 'getEdgeId',
        'logical_id' => 'getLogicalId',
        'internal_id' => 'getInternalId',
        'interface' => 'getInterface',
        'mac_address' => 'getMacAddress',
        'ip_address' => 'getIpAddress',
        'netmask' => 'getNetmask',
        'network_side' => 'getNetworkSide',
        'network_type' => 'getNetworkType',
        'display_name' => 'getDisplayName',
        'isp' => 'getIsp',
        'org' => 'getOrg',
        'lat' => 'getLat',
        'lon' => 'getLon',
        'last_active' => 'getLastActive',
        'state' => 'getState',
        'backup_state' => 'getBackupState',
        'vpn_state' => 'getVpnState',
        'last_event' => 'getLastEvent',
        'last_event_state' => 'getLastEventState',
        'alerts_enabled' => 'getAlertsEnabled',
        'operator_alerts_enabled' => 'getOperatorAlertsEnabled',
        'service_state' => 'getServiceState',
        'modified' => 'getModified',
        'service_groups' => 'getServiceGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NETWORK_SIDE_UNKOWN = 'UNKOWN';
    const NETWORK_SIDE_WAN = 'WAN';
    const NETWORK_SIDE_LAN = 'LAN';
    const NETWORK_TYPE_UNKNOWN = 'UNKNOWN';
    const NETWORK_TYPE_WIRELESS = 'WIRELESS';
    const NETWORK_TYPE_ETHERNET = 'ETHERNET';
    const NETWORK_TYPE_WIFI = 'WIFI';
    const STATE_UNKNOWN = 'UNKNOWN';
    const STATE_STABLE = 'STABLE';
    const STATE_UNSTABLE = 'UNSTABLE';
    const STATE_DISCONNECTED = 'DISCONNECTED';
    const STATE_QUIET = 'QUIET';
    const STATE_INITIAL = 'INITIAL';
    const STATE_STANDBY = 'STANDBY';
    const BACKUP_STATE_UNCONFIGURED = 'UNCONFIGURED';
    const BACKUP_STATE_STANDBY = 'STANDBY';
    const BACKUP_STATE_ACTIVE = 'ACTIVE';
    const VPN_STATE_UNKNOWN = 'UNKNOWN';
    const VPN_STATE_STABLE = 'STABLE';
    const VPN_STATE_UNSTABLE = 'UNSTABLE';
    const VPN_STATE_DEAD = 'DEAD';
    const VPN_STATE_STANDBY = 'STANDBY';
    const LAST_EVENT_STATE_UNKNOWN = 'UNKNOWN';
    const LAST_EVENT_STATE_STABLE = 'STABLE';
    const LAST_EVENT_STATE_UNSTABLE = 'UNSTABLE';
    const LAST_EVENT_STATE_DISCONNECTED = 'DISCONNECTED';
    const LAST_EVENT_STATE_QUIET = 'QUIET';
    const LAST_EVENT_STATE_INITIAL = 'INITIAL';
    const LAST_EVENT_STATE_STANDBY = 'STANDBY';
    const SERVICE_STATE_IN_SERVICE = 'IN_SERVICE';
    const SERVICE_STATE_OUT_OF_SERVICE = 'OUT_OF_SERVICE';
    const SERVICE_STATE_HISTORICAL = 'HISTORICAL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkSideAllowableValues()
    {
        return [
            self::NETWORK_SIDE_UNKOWN,
            self::NETWORK_SIDE_WAN,
            self::NETWORK_SIDE_LAN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkTypeAllowableValues()
    {
        return [
            self::NETWORK_TYPE_UNKNOWN,
            self::NETWORK_TYPE_WIRELESS,
            self::NETWORK_TYPE_ETHERNET,
            self::NETWORK_TYPE_WIFI,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_UNKNOWN,
            self::STATE_STABLE,
            self::STATE_UNSTABLE,
            self::STATE_DISCONNECTED,
            self::STATE_QUIET,
            self::STATE_INITIAL,
            self::STATE_STANDBY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBackupStateAllowableValues()
    {
        return [
            self::BACKUP_STATE_UNCONFIGURED,
            self::BACKUP_STATE_STANDBY,
            self::BACKUP_STATE_ACTIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVpnStateAllowableValues()
    {
        return [
            self::VPN_STATE_UNKNOWN,
            self::VPN_STATE_STABLE,
            self::VPN_STATE_UNSTABLE,
            self::VPN_STATE_DEAD,
            self::VPN_STATE_STANDBY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastEventStateAllowableValues()
    {
        return [
            self::LAST_EVENT_STATE_UNKNOWN,
            self::LAST_EVENT_STATE_STABLE,
            self::LAST_EVENT_STATE_UNSTABLE,
            self::LAST_EVENT_STATE_DISCONNECTED,
            self::LAST_EVENT_STATE_QUIET,
            self::LAST_EVENT_STATE_INITIAL,
            self::LAST_EVENT_STATE_STANDBY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceStateAllowableValues()
    {
        return [
            self::SERVICE_STATE_IN_SERVICE,
            self::SERVICE_STATE_OUT_OF_SERVICE,
            self::SERVICE_STATE_HISTORICAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['edge_id'] = isset($data['edge_id']) ? $data['edge_id'] : null;
        $this->container['logical_id'] = isset($data['logical_id']) ? $data['logical_id'] : null;
        $this->container['internal_id'] = isset($data['internal_id']) ? $data['internal_id'] : null;
        $this->container['interface'] = isset($data['interface']) ? $data['interface'] : null;
        $this->container['mac_address'] = isset($data['mac_address']) ? $data['mac_address'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['netmask'] = isset($data['netmask']) ? $data['netmask'] : null;
        $this->container['network_side'] = isset($data['network_side']) ? $data['network_side'] : null;
        $this->container['network_type'] = isset($data['network_type']) ? $data['network_type'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['isp'] = isset($data['isp']) ? $data['isp'] : null;
        $this->container['org'] = isset($data['org']) ? $data['org'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['lon'] = isset($data['lon']) ? $data['lon'] : null;
        $this->container['last_active'] = isset($data['last_active']) ? $data['last_active'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['backup_state'] = isset($data['backup_state']) ? $data['backup_state'] : null;
        $this->container['vpn_state'] = isset($data['vpn_state']) ? $data['vpn_state'] : null;
        $this->container['last_event'] = isset($data['last_event']) ? $data['last_event'] : null;
        $this->container['last_event_state'] = isset($data['last_event_state']) ? $data['last_event_state'] : null;
        $this->container['alerts_enabled'] = isset($data['alerts_enabled']) ? $data['alerts_enabled'] : null;
        $this->container['operator_alerts_enabled'] = isset($data['operator_alerts_enabled']) ? $data['operator_alerts_enabled'] : null;
        $this->container['service_state'] = isset($data['service_state']) ? $data['service_state'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['service_groups'] = isset($data['service_groups']) ? $data['service_groups'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['edge_id'] === null) {
            $invalidProperties[] = "'edge_id' can't be null";
        }
        if ($this->container['logical_id'] === null) {
            $invalidProperties[] = "'logical_id' can't be null";
        }
        if ($this->container['internal_id'] === null) {
            $invalidProperties[] = "'internal_id' can't be null";
        }
        if ($this->container['interface'] === null) {
            $invalidProperties[] = "'interface' can't be null";
        }
        if ($this->container['mac_address'] === null) {
            $invalidProperties[] = "'mac_address' can't be null";
        }
        if ($this->container['ip_address'] === null) {
            $invalidProperties[] = "'ip_address' can't be null";
        }
        if ($this->container['netmask'] === null) {
            $invalidProperties[] = "'netmask' can't be null";
        }
        if ($this->container['network_side'] === null) {
            $invalidProperties[] = "'network_side' can't be null";
        }
        $allowedValues = $this->getNetworkSideAllowableValues();
        if (!in_array($this->container['network_side'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'network_side', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['network_type'] === null) {
            $invalidProperties[] = "'network_type' can't be null";
        }
        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!in_array($this->container['network_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'network_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['isp'] === null) {
            $invalidProperties[] = "'isp' can't be null";
        }
        if ($this->container['org'] === null) {
            $invalidProperties[] = "'org' can't be null";
        }
        if ($this->container['lat'] === null) {
            $invalidProperties[] = "'lat' can't be null";
        }
        if ($this->container['lon'] === null) {
            $invalidProperties[] = "'lon' can't be null";
        }
        if ($this->container['last_active'] === null) {
            $invalidProperties[] = "'last_active' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['backup_state'] === null) {
            $invalidProperties[] = "'backup_state' can't be null";
        }
        $allowedValues = $this->getBackupStateAllowableValues();
        if (!in_array($this->container['backup_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'backup_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['vpn_state'] === null) {
            $invalidProperties[] = "'vpn_state' can't be null";
        }
        $allowedValues = $this->getVpnStateAllowableValues();
        if (!in_array($this->container['vpn_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vpn_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['last_event'] === null) {
            $invalidProperties[] = "'last_event' can't be null";
        }
        if ($this->container['last_event_state'] === null) {
            $invalidProperties[] = "'last_event_state' can't be null";
        }
        $allowedValues = $this->getLastEventStateAllowableValues();
        if (!in_array($this->container['last_event_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'last_event_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['alerts_enabled'] === null) {
            $invalidProperties[] = "'alerts_enabled' can't be null";
        }
        if ($this->container['operator_alerts_enabled'] === null) {
            $invalidProperties[] = "'operator_alerts_enabled' can't be null";
        }
        if ($this->container['service_state'] === null) {
            $invalidProperties[] = "'service_state' can't be null";
        }
        $allowedValues = $this->getServiceStateAllowableValues();
        if (!in_array($this->container['service_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'service_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        if ($this->container['edge_id'] === null) {
            return false;
        }
        if ($this->container['logical_id'] === null) {
            return false;
        }
        if ($this->container['internal_id'] === null) {
            return false;
        }
        if ($this->container['interface'] === null) {
            return false;
        }
        if ($this->container['mac_address'] === null) {
            return false;
        }
        if ($this->container['ip_address'] === null) {
            return false;
        }
        if ($this->container['netmask'] === null) {
            return false;
        }
        if ($this->container['network_side'] === null) {
            return false;
        }
        $allowedValues = $this->getNetworkSideAllowableValues();
        if (!in_array($this->container['network_side'], $allowedValues)) {
            return false;
        }
        if ($this->container['network_type'] === null) {
            return false;
        }
        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!in_array($this->container['network_type'], $allowedValues)) {
            return false;
        }
        if ($this->container['display_name'] === null) {
            return false;
        }
        if ($this->container['isp'] === null) {
            return false;
        }
        if ($this->container['org'] === null) {
            return false;
        }
        if ($this->container['lat'] === null) {
            return false;
        }
        if ($this->container['lon'] === null) {
            return false;
        }
        if ($this->container['last_active'] === null) {
            return false;
        }
        if ($this->container['state'] === null) {
            return false;
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            return false;
        }
        if ($this->container['backup_state'] === null) {
            return false;
        }
        $allowedValues = $this->getBackupStateAllowableValues();
        if (!in_array($this->container['backup_state'], $allowedValues)) {
            return false;
        }
        if ($this->container['vpn_state'] === null) {
            return false;
        }
        $allowedValues = $this->getVpnStateAllowableValues();
        if (!in_array($this->container['vpn_state'], $allowedValues)) {
            return false;
        }
        if ($this->container['last_event'] === null) {
            return false;
        }
        if ($this->container['last_event_state'] === null) {
            return false;
        }
        $allowedValues = $this->getLastEventStateAllowableValues();
        if (!in_array($this->container['last_event_state'], $allowedValues)) {
            return false;
        }
        if ($this->container['alerts_enabled'] === null) {
            return false;
        }
        if ($this->container['operator_alerts_enabled'] === null) {
            return false;
        }
        if ($this->container['service_state'] === null) {
            return false;
        }
        $allowedValues = $this->getServiceStateAllowableValues();
        if (!in_array($this->container['service_state'], $allowedValues)) {
            return false;
        }
        if ($this->container['modified'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets edge_id
     *
     * @return int
     */
    public function getEdgeId()
    {
        return $this->container['edge_id'];
    }

    /**
     * Sets edge_id
     *
     * @param int $edge_id edge_id
     *
     * @return $this
     */
    public function setEdgeId($edge_id)
    {
        $this->container['edge_id'] = $edge_id;

        return $this;
    }

    /**
     * Gets logical_id
     *
     * @return string
     */
    public function getLogicalId()
    {
        return $this->container['logical_id'];
    }

    /**
     * Sets logical_id
     *
     * @param string $logical_id logical_id
     *
     * @return $this
     */
    public function setLogicalId($logical_id)
    {
        $this->container['logical_id'] = $logical_id;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string $internal_id internal_id
     *
     * @return $this
     */
    public function setInternalId($internal_id)
    {
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string $interface interface
     *
     * @return $this
     */
    public function setInterface($interface)
    {
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets mac_address
     *
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     *
     * @param string $mac_address mac_address
     *
     * @return $this
     */
    public function setMacAddress($mac_address)
    {
        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets netmask
     *
     * @return string
     */
    public function getNetmask()
    {
        return $this->container['netmask'];
    }

    /**
     * Sets netmask
     *
     * @param string $netmask netmask
     *
     * @return $this
     */
    public function setNetmask($netmask)
    {
        $this->container['netmask'] = $netmask;

        return $this;
    }

    /**
     * Gets network_side
     *
     * @return string
     */
    public function getNetworkSide()
    {
        return $this->container['network_side'];
    }

    /**
     * Sets network_side
     *
     * @param string $network_side network_side
     *
     * @return $this
     */
    public function setNetworkSide($network_side)
    {
        $allowedValues = $this->getNetworkSideAllowableValues();
        if (!in_array($network_side, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'network_side', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_side'] = $network_side;

        return $this;
    }

    /**
     * Gets network_type
     *
     * @return string
     */
    public function getNetworkType()
    {
        return $this->container['network_type'];
    }

    /**
     * Sets network_type
     *
     * @param string $network_type network_type
     *
     * @return $this
     */
    public function setNetworkType($network_type)
    {
        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!in_array($network_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'network_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_type'] = $network_type;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets isp
     *
     * @return string
     */
    public function getIsp()
    {
        return $this->container['isp'];
    }

    /**
     * Sets isp
     *
     * @param string $isp isp
     *
     * @return $this
     */
    public function setIsp($isp)
    {
        $this->container['isp'] = $isp;

        return $this;
    }

    /**
     * Gets org
     *
     * @return string
     */
    public function getOrg()
    {
        return $this->container['org'];
    }

    /**
     * Sets org
     *
     * @param string $org org
     *
     * @return $this
     */
    public function setOrg($org)
    {
        $this->container['org'] = $org;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return float
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param float $lat lat
     *
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return float
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param float $lon lon
     *
     * @return $this
     */
    public function setLon($lon)
    {
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets last_active
     *
     * @return \DateTime
     */
    public function getLastActive()
    {
        return $this->container['last_active'];
    }

    /**
     * Sets last_active
     *
     * @param \DateTime $last_active last_active
     *
     * @return $this
     */
    public function setLastActive($last_active)
    {
        $this->container['last_active'] = $last_active;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets backup_state
     *
     * @return string
     */
    public function getBackupState()
    {
        return $this->container['backup_state'];
    }

    /**
     * Sets backup_state
     *
     * @param string $backup_state backup_state
     *
     * @return $this
     */
    public function setBackupState($backup_state)
    {
        $allowedValues = $this->getBackupStateAllowableValues();
        if (!in_array($backup_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'backup_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['backup_state'] = $backup_state;

        return $this;
    }

    /**
     * Gets vpn_state
     *
     * @return string
     */
    public function getVpnState()
    {
        return $this->container['vpn_state'];
    }

    /**
     * Sets vpn_state
     *
     * @param string $vpn_state vpn_state
     *
     * @return $this
     */
    public function setVpnState($vpn_state)
    {
        $allowedValues = $this->getVpnStateAllowableValues();
        if (!in_array($vpn_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vpn_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vpn_state'] = $vpn_state;

        return $this;
    }

    /**
     * Gets last_event
     *
     * @return \DateTime
     */
    public function getLastEvent()
    {
        return $this->container['last_event'];
    }

    /**
     * Sets last_event
     *
     * @param \DateTime $last_event last_event
     *
     * @return $this
     */
    public function setLastEvent($last_event)
    {
        $this->container['last_event'] = $last_event;

        return $this;
    }

    /**
     * Gets last_event_state
     *
     * @return string
     */
    public function getLastEventState()
    {
        return $this->container['last_event_state'];
    }

    /**
     * Sets last_event_state
     *
     * @param string $last_event_state last_event_state
     *
     * @return $this
     */
    public function setLastEventState($last_event_state)
    {
        $allowedValues = $this->getLastEventStateAllowableValues();
        if (!in_array($last_event_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'last_event_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['last_event_state'] = $last_event_state;

        return $this;
    }

    /**
     * Gets alerts_enabled
     *
     * @return int
     */
    public function getAlertsEnabled()
    {
        return $this->container['alerts_enabled'];
    }

    /**
     * Sets alerts_enabled
     *
     * @param int $alerts_enabled alerts_enabled
     *
     * @return $this
     */
    public function setAlertsEnabled($alerts_enabled)
    {
        $this->container['alerts_enabled'] = $alerts_enabled;

        return $this;
    }

    /**
     * Gets operator_alerts_enabled
     *
     * @return int
     */
    public function getOperatorAlertsEnabled()
    {
        return $this->container['operator_alerts_enabled'];
    }

    /**
     * Sets operator_alerts_enabled
     *
     * @param int $operator_alerts_enabled operator_alerts_enabled
     *
     * @return $this
     */
    public function setOperatorAlertsEnabled($operator_alerts_enabled)
    {
        $this->container['operator_alerts_enabled'] = $operator_alerts_enabled;

        return $this;
    }

    /**
     * Gets service_state
     *
     * @return string
     */
    public function getServiceState()
    {
        return $this->container['service_state'];
    }

    /**
     * Sets service_state
     *
     * @param string $service_state service_state
     *
     * @return $this
     */
    public function setServiceState($service_state)
    {
        $allowedValues = $this->getServiceStateAllowableValues();
        if (!in_array($service_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_state'] = $service_state;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets service_groups
     *
     * @return \Swagger\Client\Model\LinkServiceGroups
     */
    public function getServiceGroups()
    {
        return $this->container['service_groups'];
    }

    /**
     * Sets service_groups
     *
     * @param \Swagger\Client\Model\LinkServiceGroups $service_groups service_groups
     *
     * @return $this
     */
    public function setServiceGroups($service_groups)
    {
        $this->container['service_groups'] = $service_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


