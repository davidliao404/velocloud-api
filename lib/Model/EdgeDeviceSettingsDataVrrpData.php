<?php
/**
 * EdgeDeviceSettingsDataVrrpData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdgeDeviceSettingsDataVrrpData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdgeDeviceSettingsDataVrrpData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'edgeDeviceSettingsData_vrrp_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cidr_ip' => 'string',
        'interface' => 'string',
        'interval' => 'int',
        'preempt' => 'bool',
        'preempt_delay' => 'int',
        'priority' => 'int',
        'subinterface_id' => 'int',
        'vlan_id' => 'int',
        'vrid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cidr_ip' => null,
        'interface' => null,
        'interval' => null,
        'preempt' => null,
        'preempt_delay' => null,
        'priority' => null,
        'subinterface_id' => null,
        'vlan_id' => null,
        'vrid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cidr_ip' => 'cidrIp',
        'interface' => 'interface',
        'interval' => 'interval',
        'preempt' => 'preempt',
        'preempt_delay' => 'preemptDelay',
        'priority' => 'priority',
        'subinterface_id' => 'subinterfaceId',
        'vlan_id' => 'vlanId',
        'vrid' => 'vrid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cidr_ip' => 'setCidrIp',
        'interface' => 'setInterface',
        'interval' => 'setInterval',
        'preempt' => 'setPreempt',
        'preempt_delay' => 'setPreemptDelay',
        'priority' => 'setPriority',
        'subinterface_id' => 'setSubinterfaceId',
        'vlan_id' => 'setVlanId',
        'vrid' => 'setVrid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cidr_ip' => 'getCidrIp',
        'interface' => 'getInterface',
        'interval' => 'getInterval',
        'preempt' => 'getPreempt',
        'preempt_delay' => 'getPreemptDelay',
        'priority' => 'getPriority',
        'subinterface_id' => 'getSubinterfaceId',
        'vlan_id' => 'getVlanId',
        'vrid' => 'getVrid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cidr_ip'] = isset($data['cidr_ip']) ? $data['cidr_ip'] : null;
        $this->container['interface'] = isset($data['interface']) ? $data['interface'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['preempt'] = isset($data['preempt']) ? $data['preempt'] : null;
        $this->container['preempt_delay'] = isset($data['preempt_delay']) ? $data['preempt_delay'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['subinterface_id'] = isset($data['subinterface_id']) ? $data['subinterface_id'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
        $this->container['vrid'] = isset($data['vrid']) ? $data['vrid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets cidr_ip
     *
     * @return string
     */
    public function getCidrIp()
    {
        return $this->container['cidr_ip'];
    }

    /**
     * Sets cidr_ip
     *
     * @param string $cidr_ip cidr_ip
     *
     * @return $this
     */
    public function setCidrIp($cidr_ip)
    {
        $this->container['cidr_ip'] = $cidr_ip;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string $interface interface
     *
     * @return $this
     */
    public function setInterface($interface)
    {
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets preempt
     *
     * @return bool
     */
    public function getPreempt()
    {
        return $this->container['preempt'];
    }

    /**
     * Sets preempt
     *
     * @param bool $preempt preempt
     *
     * @return $this
     */
    public function setPreempt($preempt)
    {
        $this->container['preempt'] = $preempt;

        return $this;
    }

    /**
     * Gets preempt_delay
     *
     * @return int
     */
    public function getPreemptDelay()
    {
        return $this->container['preempt_delay'];
    }

    /**
     * Sets preempt_delay
     *
     * @param int $preempt_delay preempt_delay
     *
     * @return $this
     */
    public function setPreemptDelay($preempt_delay)
    {
        $this->container['preempt_delay'] = $preempt_delay;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets subinterface_id
     *
     * @return int
     */
    public function getSubinterfaceId()
    {
        return $this->container['subinterface_id'];
    }

    /**
     * Sets subinterface_id
     *
     * @param int $subinterface_id subinterface_id
     *
     * @return $this
     */
    public function setSubinterfaceId($subinterface_id)
    {
        $this->container['subinterface_id'] = $subinterface_id;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int $vlan_id vlan_id
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets vrid
     *
     * @return int
     */
    public function getVrid()
    {
        return $this->container['vrid'];
    }

    /**
     * Sets vrid
     *
     * @param int $vrid vrid
     *
     * @return $this
     */
    public function setVrid($vrid)
    {
        $this->container['vrid'] = $vrid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


