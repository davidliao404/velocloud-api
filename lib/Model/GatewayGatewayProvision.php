<?php
/**
 * GatewayGatewayProvision
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GatewayGatewayProvision Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GatewayGatewayProvision implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'gateway_gateway_provision';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'network_id' => 'int',
        'ip_address' => 'string',
        'gateway_pool_id' => 'int',
        'dns_name' => 'string',
        'name' => 'string',
        'description' => 'string',
        'is_load_balanced' => 'bool',
        'private_ip_address' => 'string',
        'roles' => '\Swagger\Client\Model\GatewayRolesObject',
        'site' => '\Swagger\Client\Model\SiteObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'network_id' => null,
        'ip_address' => null,
        'gateway_pool_id' => null,
        'dns_name' => null,
        'name' => null,
        'description' => null,
        'is_load_balanced' => null,
        'private_ip_address' => null,
        'roles' => null,
        'site' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'network_id' => 'networkId',
        'ip_address' => 'ipAddress',
        'gateway_pool_id' => 'gatewayPoolId',
        'dns_name' => 'dnsName',
        'name' => 'name',
        'description' => 'description',
        'is_load_balanced' => 'isLoadBalanced',
        'private_ip_address' => 'privateIpAddress',
        'roles' => 'roles',
        'site' => 'site'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'network_id' => 'setNetworkId',
        'ip_address' => 'setIpAddress',
        'gateway_pool_id' => 'setGatewayPoolId',
        'dns_name' => 'setDnsName',
        'name' => 'setName',
        'description' => 'setDescription',
        'is_load_balanced' => 'setIsLoadBalanced',
        'private_ip_address' => 'setPrivateIpAddress',
        'roles' => 'setRoles',
        'site' => 'setSite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'network_id' => 'getNetworkId',
        'ip_address' => 'getIpAddress',
        'gateway_pool_id' => 'getGatewayPoolId',
        'dns_name' => 'getDnsName',
        'name' => 'getName',
        'description' => 'getDescription',
        'is_load_balanced' => 'getIsLoadBalanced',
        'private_ip_address' => 'getPrivateIpAddress',
        'roles' => 'getRoles',
        'site' => 'getSite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['gateway_pool_id'] = isset($data['gateway_pool_id']) ? $data['gateway_pool_id'] : null;
        $this->container['dns_name'] = isset($data['dns_name']) ? $data['dns_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_load_balanced'] = isset($data['is_load_balanced']) ? $data['is_load_balanced'] : null;
        $this->container['private_ip_address'] = isset($data['private_ip_address']) ? $data['private_ip_address'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['network_id'] === null) {
            $invalidProperties[] = "'network_id' can't be null";
        }
        if ($this->container['ip_address'] === null) {
            $invalidProperties[] = "'ip_address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['network_id'] === null) {
            return false;
        }
        if ($this->container['ip_address'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets network_id
     *
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int $network_id network_id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets gateway_pool_id
     *
     * @return int
     */
    public function getGatewayPoolId()
    {
        return $this->container['gateway_pool_id'];
    }

    /**
     * Sets gateway_pool_id
     *
     * @param int $gateway_pool_id gateway_pool_id
     *
     * @return $this
     */
    public function setGatewayPoolId($gateway_pool_id)
    {
        $this->container['gateway_pool_id'] = $gateway_pool_id;

        return $this;
    }

    /**
     * Gets dns_name
     *
     * @return string
     */
    public function getDnsName()
    {
        return $this->container['dns_name'];
    }

    /**
     * Sets dns_name
     *
     * @param string $dns_name dns_name
     *
     * @return $this
     */
    public function setDnsName($dns_name)
    {
        $this->container['dns_name'] = $dns_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_load_balanced
     *
     * @return bool
     */
    public function getIsLoadBalanced()
    {
        return $this->container['is_load_balanced'];
    }

    /**
     * Sets is_load_balanced
     *
     * @param bool $is_load_balanced is_load_balanced
     *
     * @return $this
     */
    public function setIsLoadBalanced($is_load_balanced)
    {
        $this->container['is_load_balanced'] = $is_load_balanced;

        return $this;
    }

    /**
     * Gets private_ip_address
     *
     * @return string
     */
    public function getPrivateIpAddress()
    {
        return $this->container['private_ip_address'];
    }

    /**
     * Sets private_ip_address
     *
     * @param string $private_ip_address private_ip_address
     *
     * @return $this
     */
    public function setPrivateIpAddress($private_ip_address)
    {
        $this->container['private_ip_address'] = $private_ip_address;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \Swagger\Client\Model\GatewayRolesObject
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \Swagger\Client\Model\GatewayRolesObject $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets site
     *
     * @return \Swagger\Client\Model\SiteObject
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param \Swagger\Client\Model\SiteObject $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


