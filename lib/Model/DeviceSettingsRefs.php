<?php
/**
 * DeviceSettingsRefs
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeviceSettingsRefs Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceSettingsRefs implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'deviceSettingsRefs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'device_settingssegment' => '\Swagger\Client\Model\Segment',
        'device_settingsdnsprimary_provider' => '\Swagger\Client\Model\Dns',
        'device_settingsdnsbackup_provider' => '\Swagger\Client\Model\Dns',
        'device_settingsdnsprivate_providers' => '\Swagger\Client\Model\Dns[]',
        'device_settingslanallocation' => '\Swagger\Client\Model\EnterpriseServiceNetwork'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'device_settingssegment' => null,
        'device_settingsdnsprimary_provider' => null,
        'device_settingsdnsbackup_provider' => null,
        'device_settingsdnsprivate_providers' => null,
        'device_settingslanallocation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'device_settingssegment' => 'deviceSettings:segment',
        'device_settingsdnsprimary_provider' => 'deviceSettings:dns:primaryProvider',
        'device_settingsdnsbackup_provider' => 'deviceSettings:dns:backupProvider',
        'device_settingsdnsprivate_providers' => 'deviceSettings:dns:privateProviders',
        'device_settingslanallocation' => 'deviceSettings:lan:allocation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'device_settingssegment' => 'setDeviceSettingssegment',
        'device_settingsdnsprimary_provider' => 'setDeviceSettingsdnsprimaryProvider',
        'device_settingsdnsbackup_provider' => 'setDeviceSettingsdnsbackupProvider',
        'device_settingsdnsprivate_providers' => 'setDeviceSettingsdnsprivateProviders',
        'device_settingslanallocation' => 'setDeviceSettingslanallocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'device_settingssegment' => 'getDeviceSettingssegment',
        'device_settingsdnsprimary_provider' => 'getDeviceSettingsdnsprimaryProvider',
        'device_settingsdnsbackup_provider' => 'getDeviceSettingsdnsbackupProvider',
        'device_settingsdnsprivate_providers' => 'getDeviceSettingsdnsprivateProviders',
        'device_settingslanallocation' => 'getDeviceSettingslanallocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['device_settingssegment'] = isset($data['device_settingssegment']) ? $data['device_settingssegment'] : null;
        $this->container['device_settingsdnsprimary_provider'] = isset($data['device_settingsdnsprimary_provider']) ? $data['device_settingsdnsprimary_provider'] : null;
        $this->container['device_settingsdnsbackup_provider'] = isset($data['device_settingsdnsbackup_provider']) ? $data['device_settingsdnsbackup_provider'] : null;
        $this->container['device_settingsdnsprivate_providers'] = isset($data['device_settingsdnsprivate_providers']) ? $data['device_settingsdnsprivate_providers'] : null;
        $this->container['device_settingslanallocation'] = isset($data['device_settingslanallocation']) ? $data['device_settingslanallocation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets device_settingssegment
     *
     * @return \Swagger\Client\Model\Segment
     */
    public function getDeviceSettingssegment()
    {
        return $this->container['device_settingssegment'];
    }

    /**
     * Sets device_settingssegment
     *
     * @param \Swagger\Client\Model\Segment $device_settingssegment device_settingssegment
     *
     * @return $this
     */
    public function setDeviceSettingssegment($device_settingssegment)
    {
        $this->container['device_settingssegment'] = $device_settingssegment;

        return $this;
    }

    /**
     * Gets device_settingsdnsprimary_provider
     *
     * @return \Swagger\Client\Model\Dns
     */
    public function getDeviceSettingsdnsprimaryProvider()
    {
        return $this->container['device_settingsdnsprimary_provider'];
    }

    /**
     * Sets device_settingsdnsprimary_provider
     *
     * @param \Swagger\Client\Model\Dns $device_settingsdnsprimary_provider device_settingsdnsprimary_provider
     *
     * @return $this
     */
    public function setDeviceSettingsdnsprimaryProvider($device_settingsdnsprimary_provider)
    {
        $this->container['device_settingsdnsprimary_provider'] = $device_settingsdnsprimary_provider;

        return $this;
    }

    /**
     * Gets device_settingsdnsbackup_provider
     *
     * @return \Swagger\Client\Model\Dns
     */
    public function getDeviceSettingsdnsbackupProvider()
    {
        return $this->container['device_settingsdnsbackup_provider'];
    }

    /**
     * Sets device_settingsdnsbackup_provider
     *
     * @param \Swagger\Client\Model\Dns $device_settingsdnsbackup_provider device_settingsdnsbackup_provider
     *
     * @return $this
     */
    public function setDeviceSettingsdnsbackupProvider($device_settingsdnsbackup_provider)
    {
        $this->container['device_settingsdnsbackup_provider'] = $device_settingsdnsbackup_provider;

        return $this;
    }

    /**
     * Gets device_settingsdnsprivate_providers
     *
     * @return \Swagger\Client\Model\Dns[]
     */
    public function getDeviceSettingsdnsprivateProviders()
    {
        return $this->container['device_settingsdnsprivate_providers'];
    }

    /**
     * Sets device_settingsdnsprivate_providers
     *
     * @param \Swagger\Client\Model\Dns[] $device_settingsdnsprivate_providers device_settingsdnsprivate_providers
     *
     * @return $this
     */
    public function setDeviceSettingsdnsprivateProviders($device_settingsdnsprivate_providers)
    {
        $this->container['device_settingsdnsprivate_providers'] = $device_settingsdnsprivate_providers;

        return $this;
    }

    /**
     * Gets device_settingslanallocation
     *
     * @return \Swagger\Client\Model\EnterpriseServiceNetwork
     */
    public function getDeviceSettingslanallocation()
    {
        return $this->container['device_settingslanallocation'];
    }

    /**
     * Sets device_settingslanallocation
     *
     * @param \Swagger\Client\Model\EnterpriseServiceNetwork $device_settingslanallocation device_settingslanallocation
     *
     * @return $this
     */
    public function setDeviceSettingslanallocation($device_settingslanallocation)
    {
        $this->container['device_settingslanallocation'] = $device_settingslanallocation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


