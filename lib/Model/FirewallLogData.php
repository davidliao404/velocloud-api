<?php
/**
 * FirewallLogData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FirewallLogData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FirewallLogData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'firewall_log_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'edge_id' => 'int',
        'timestamp' => '\DateTime',
        'allow' => 'int',
        'rule_logical_id' => 'string',
        'interface' => 'string',
        'protocol' => 'string',
        'source_ip' => 'string',
        'source_port' => 'int',
        'dest_ip' => 'string',
        'dest_port' => 'int',
        'icmp_type' => 'string',
        'length' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'edge_id' => null,
        'timestamp' => 'date-time',
        'allow' => null,
        'rule_logical_id' => null,
        'interface' => null,
        'protocol' => null,
        'source_ip' => null,
        'source_port' => null,
        'dest_ip' => null,
        'dest_port' => null,
        'icmp_type' => null,
        'length' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'edge_id' => 'edgeId',
        'timestamp' => 'timestamp',
        'allow' => 'allow',
        'rule_logical_id' => 'ruleLogicalId',
        'interface' => 'interface',
        'protocol' => 'protocol',
        'source_ip' => 'sourceIp',
        'source_port' => 'sourcePort',
        'dest_ip' => 'destIp',
        'dest_port' => 'destPort',
        'icmp_type' => 'icmpType',
        'length' => 'length'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'edge_id' => 'setEdgeId',
        'timestamp' => 'setTimestamp',
        'allow' => 'setAllow',
        'rule_logical_id' => 'setRuleLogicalId',
        'interface' => 'setInterface',
        'protocol' => 'setProtocol',
        'source_ip' => 'setSourceIp',
        'source_port' => 'setSourcePort',
        'dest_ip' => 'setDestIp',
        'dest_port' => 'setDestPort',
        'icmp_type' => 'setIcmpType',
        'length' => 'setLength'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'edge_id' => 'getEdgeId',
        'timestamp' => 'getTimestamp',
        'allow' => 'getAllow',
        'rule_logical_id' => 'getRuleLogicalId',
        'interface' => 'getInterface',
        'protocol' => 'getProtocol',
        'source_ip' => 'getSourceIp',
        'source_port' => 'getSourcePort',
        'dest_ip' => 'getDestIp',
        'dest_port' => 'getDestPort',
        'icmp_type' => 'getIcmpType',
        'length' => 'getLength'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROTOCOL_ICMP = 'ICMP';
    const PROTOCOL_TCP = 'TCP';
    const PROTOCOL_UDP = 'UDP';
    const PROTOCOL_GRE = 'GRE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_ICMP,
            self::PROTOCOL_TCP,
            self::PROTOCOL_UDP,
            self::PROTOCOL_GRE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['edge_id'] = isset($data['edge_id']) ? $data['edge_id'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['allow'] = isset($data['allow']) ? $data['allow'] : null;
        $this->container['rule_logical_id'] = isset($data['rule_logical_id']) ? $data['rule_logical_id'] : null;
        $this->container['interface'] = isset($data['interface']) ? $data['interface'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['source_ip'] = isset($data['source_ip']) ? $data['source_ip'] : null;
        $this->container['source_port'] = isset($data['source_port']) ? $data['source_port'] : null;
        $this->container['dest_ip'] = isset($data['dest_ip']) ? $data['dest_ip'] : null;
        $this->container['dest_port'] = isset($data['dest_port']) ? $data['dest_port'] : null;
        $this->container['icmp_type'] = isset($data['icmp_type']) ? $data['icmp_type'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProtocolAllowableValues();
        if (!in_array($this->container['protocol'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'protocol', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getProtocolAllowableValues();
        if (!in_array($this->container['protocol'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets edge_id
     *
     * @return int
     */
    public function getEdgeId()
    {
        return $this->container['edge_id'];
    }

    /**
     * Sets edge_id
     *
     * @param int $edge_id edge_id
     *
     * @return $this
     */
    public function setEdgeId($edge_id)
    {
        $this->container['edge_id'] = $edge_id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets allow
     *
     * @return int
     */
    public function getAllow()
    {
        return $this->container['allow'];
    }

    /**
     * Sets allow
     *
     * @param int $allow allow
     *
     * @return $this
     */
    public function setAllow($allow)
    {
        $this->container['allow'] = $allow;

        return $this;
    }

    /**
     * Gets rule_logical_id
     *
     * @return string
     */
    public function getRuleLogicalId()
    {
        return $this->container['rule_logical_id'];
    }

    /**
     * Sets rule_logical_id
     *
     * @param string $rule_logical_id rule_logical_id
     *
     * @return $this
     */
    public function setRuleLogicalId($rule_logical_id)
    {
        $this->container['rule_logical_id'] = $rule_logical_id;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string $interface interface
     *
     * @return $this
     */
    public function setInterface($interface)
    {
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($protocol) && !in_array($protocol, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'protocol', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets source_ip
     *
     * @return string
     */
    public function getSourceIp()
    {
        return $this->container['source_ip'];
    }

    /**
     * Sets source_ip
     *
     * @param string $source_ip source_ip
     *
     * @return $this
     */
    public function setSourceIp($source_ip)
    {
        $this->container['source_ip'] = $source_ip;

        return $this;
    }

    /**
     * Gets source_port
     *
     * @return int
     */
    public function getSourcePort()
    {
        return $this->container['source_port'];
    }

    /**
     * Sets source_port
     *
     * @param int $source_port source_port
     *
     * @return $this
     */
    public function setSourcePort($source_port)
    {
        $this->container['source_port'] = $source_port;

        return $this;
    }

    /**
     * Gets dest_ip
     *
     * @return string
     */
    public function getDestIp()
    {
        return $this->container['dest_ip'];
    }

    /**
     * Sets dest_ip
     *
     * @param string $dest_ip dest_ip
     *
     * @return $this
     */
    public function setDestIp($dest_ip)
    {
        $this->container['dest_ip'] = $dest_ip;

        return $this;
    }

    /**
     * Gets dest_port
     *
     * @return int
     */
    public function getDestPort()
    {
        return $this->container['dest_port'];
    }

    /**
     * Sets dest_port
     *
     * @param int $dest_port dest_port
     *
     * @return $this
     */
    public function setDestPort($dest_port)
    {
        $this->container['dest_port'] = $dest_port;

        return $this;
    }

    /**
     * Gets icmp_type
     *
     * @return string
     */
    public function getIcmpType()
    {
        return $this->container['icmp_type'];
    }

    /**
     * Sets icmp_type
     *
     * @param string $icmp_type icmp_type
     *
     * @return $this
     */
    public function setIcmpType($icmp_type)
    {
        $this->container['icmp_type'] = $icmp_type;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


