<?php
/**
 * EdgeQOSDataMatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdgeQOSDataMatch Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdgeQOSDataMatch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'edgeQOSData_match';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'appid' => 'int',
        'classid' => 'int',
        'dscp' => 'int',
        'sip' => 'string',
        'sport_high' => 'int',
        'sport_low' => 'int',
        'ssm' => 'string',
        'svlan' => 'int',
        'os_version' => 'int',
        'hostname' => 'string',
        'dip' => 'string',
        'dport_low' => 'int',
        'dport_high' => 'int',
        'dsm' => 'string',
        'dvlan' => 'int',
        'proto' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'appid' => null,
        'classid' => null,
        'dscp' => null,
        'sip' => null,
        'sport_high' => null,
        'sport_low' => null,
        'ssm' => null,
        'svlan' => null,
        'os_version' => null,
        'hostname' => null,
        'dip' => null,
        'dport_low' => null,
        'dport_high' => null,
        'dsm' => null,
        'dvlan' => null,
        'proto' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appid' => 'appid',
        'classid' => 'classid',
        'dscp' => 'dscp',
        'sip' => 'sip',
        'sport_high' => 'sport_high',
        'sport_low' => 'sport_low',
        'ssm' => 'ssm',
        'svlan' => 'svlan',
        'os_version' => 'os_version',
        'hostname' => 'hostname',
        'dip' => 'dip',
        'dport_low' => 'dport_low',
        'dport_high' => 'dport_high',
        'dsm' => 'dsm',
        'dvlan' => 'dvlan',
        'proto' => 'proto'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appid' => 'setAppid',
        'classid' => 'setClassid',
        'dscp' => 'setDscp',
        'sip' => 'setSip',
        'sport_high' => 'setSportHigh',
        'sport_low' => 'setSportLow',
        'ssm' => 'setSsm',
        'svlan' => 'setSvlan',
        'os_version' => 'setOsVersion',
        'hostname' => 'setHostname',
        'dip' => 'setDip',
        'dport_low' => 'setDportLow',
        'dport_high' => 'setDportHigh',
        'dsm' => 'setDsm',
        'dvlan' => 'setDvlan',
        'proto' => 'setProto'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appid' => 'getAppid',
        'classid' => 'getClassid',
        'dscp' => 'getDscp',
        'sip' => 'getSip',
        'sport_high' => 'getSportHigh',
        'sport_low' => 'getSportLow',
        'ssm' => 'getSsm',
        'svlan' => 'getSvlan',
        'os_version' => 'getOsVersion',
        'hostname' => 'getHostname',
        'dip' => 'getDip',
        'dport_low' => 'getDportLow',
        'dport_high' => 'getDportHigh',
        'dsm' => 'getDsm',
        'dvlan' => 'getDvlan',
        'proto' => 'getProto'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appid'] = isset($data['appid']) ? $data['appid'] : null;
        $this->container['classid'] = isset($data['classid']) ? $data['classid'] : null;
        $this->container['dscp'] = isset($data['dscp']) ? $data['dscp'] : null;
        $this->container['sip'] = isset($data['sip']) ? $data['sip'] : null;
        $this->container['sport_high'] = isset($data['sport_high']) ? $data['sport_high'] : null;
        $this->container['sport_low'] = isset($data['sport_low']) ? $data['sport_low'] : null;
        $this->container['ssm'] = isset($data['ssm']) ? $data['ssm'] : null;
        $this->container['svlan'] = isset($data['svlan']) ? $data['svlan'] : null;
        $this->container['os_version'] = isset($data['os_version']) ? $data['os_version'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['dip'] = isset($data['dip']) ? $data['dip'] : null;
        $this->container['dport_low'] = isset($data['dport_low']) ? $data['dport_low'] : null;
        $this->container['dport_high'] = isset($data['dport_high']) ? $data['dport_high'] : null;
        $this->container['dsm'] = isset($data['dsm']) ? $data['dsm'] : null;
        $this->container['dvlan'] = isset($data['dvlan']) ? $data['dvlan'] : null;
        $this->container['proto'] = isset($data['proto']) ? $data['proto'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets appid
     *
     * @return int
     */
    public function getAppid()
    {
        return $this->container['appid'];
    }

    /**
     * Sets appid
     *
     * @param int $appid appid
     *
     * @return $this
     */
    public function setAppid($appid)
    {
        $this->container['appid'] = $appid;

        return $this;
    }

    /**
     * Gets classid
     *
     * @return int
     */
    public function getClassid()
    {
        return $this->container['classid'];
    }

    /**
     * Sets classid
     *
     * @param int $classid classid
     *
     * @return $this
     */
    public function setClassid($classid)
    {
        $this->container['classid'] = $classid;

        return $this;
    }

    /**
     * Gets dscp
     *
     * @return int
     */
    public function getDscp()
    {
        return $this->container['dscp'];
    }

    /**
     * Sets dscp
     *
     * @param int $dscp dscp
     *
     * @return $this
     */
    public function setDscp($dscp)
    {
        $this->container['dscp'] = $dscp;

        return $this;
    }

    /**
     * Gets sip
     *
     * @return string
     */
    public function getSip()
    {
        return $this->container['sip'];
    }

    /**
     * Sets sip
     *
     * @param string $sip sip
     *
     * @return $this
     */
    public function setSip($sip)
    {
        $this->container['sip'] = $sip;

        return $this;
    }

    /**
     * Gets sport_high
     *
     * @return int
     */
    public function getSportHigh()
    {
        return $this->container['sport_high'];
    }

    /**
     * Sets sport_high
     *
     * @param int $sport_high sport_high
     *
     * @return $this
     */
    public function setSportHigh($sport_high)
    {
        $this->container['sport_high'] = $sport_high;

        return $this;
    }

    /**
     * Gets sport_low
     *
     * @return int
     */
    public function getSportLow()
    {
        return $this->container['sport_low'];
    }

    /**
     * Sets sport_low
     *
     * @param int $sport_low sport_low
     *
     * @return $this
     */
    public function setSportLow($sport_low)
    {
        $this->container['sport_low'] = $sport_low;

        return $this;
    }

    /**
     * Gets ssm
     *
     * @return string
     */
    public function getSsm()
    {
        return $this->container['ssm'];
    }

    /**
     * Sets ssm
     *
     * @param string $ssm ssm
     *
     * @return $this
     */
    public function setSsm($ssm)
    {
        $this->container['ssm'] = $ssm;

        return $this;
    }

    /**
     * Gets svlan
     *
     * @return int
     */
    public function getSvlan()
    {
        return $this->container['svlan'];
    }

    /**
     * Sets svlan
     *
     * @param int $svlan svlan
     *
     * @return $this
     */
    public function setSvlan($svlan)
    {
        $this->container['svlan'] = $svlan;

        return $this;
    }

    /**
     * Gets os_version
     *
     * @return int
     */
    public function getOsVersion()
    {
        return $this->container['os_version'];
    }

    /**
     * Sets os_version
     *
     * @param int $os_version os_version
     *
     * @return $this
     */
    public function setOsVersion($os_version)
    {
        $this->container['os_version'] = $os_version;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets dip
     *
     * @return string
     */
    public function getDip()
    {
        return $this->container['dip'];
    }

    /**
     * Sets dip
     *
     * @param string $dip dip
     *
     * @return $this
     */
    public function setDip($dip)
    {
        $this->container['dip'] = $dip;

        return $this;
    }

    /**
     * Gets dport_low
     *
     * @return int
     */
    public function getDportLow()
    {
        return $this->container['dport_low'];
    }

    /**
     * Sets dport_low
     *
     * @param int $dport_low dport_low
     *
     * @return $this
     */
    public function setDportLow($dport_low)
    {
        $this->container['dport_low'] = $dport_low;

        return $this;
    }

    /**
     * Gets dport_high
     *
     * @return int
     */
    public function getDportHigh()
    {
        return $this->container['dport_high'];
    }

    /**
     * Sets dport_high
     *
     * @param int $dport_high dport_high
     *
     * @return $this
     */
    public function setDportHigh($dport_high)
    {
        $this->container['dport_high'] = $dport_high;

        return $this;
    }

    /**
     * Gets dsm
     *
     * @return string
     */
    public function getDsm()
    {
        return $this->container['dsm'];
    }

    /**
     * Sets dsm
     *
     * @param string $dsm dsm
     *
     * @return $this
     */
    public function setDsm($dsm)
    {
        $this->container['dsm'] = $dsm;

        return $this;
    }

    /**
     * Gets dvlan
     *
     * @return int
     */
    public function getDvlan()
    {
        return $this->container['dvlan'];
    }

    /**
     * Sets dvlan
     *
     * @param int $dvlan dvlan
     *
     * @return $this
     */
    public function setDvlan($dvlan)
    {
        $this->container['dvlan'] = $dvlan;

        return $this;
    }

    /**
     * Gets proto
     *
     * @return int
     */
    public function getProto()
    {
        return $this->container['proto'];
    }

    /**
     * Sets proto
     *
     * @param int $proto proto
     *
     * @return $this
     */
    public function setProto($proto)
    {
        $this->container['proto'] = $proto;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


