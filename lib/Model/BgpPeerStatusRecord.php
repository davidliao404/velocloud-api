<?php
/**
 * BgpPeerStatusRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BgpPeerStatusRecord Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BgpPeerStatusRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'bgp_peer_status_record';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timestamp' => '\DateTime',
        'state' => 'string',
        'msg_rcvd' => 'int',
        'pfx_rcvd' => 'int',
        'msg_sent' => 'int',
        'up_down_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'timestamp' => 'date-time',
        'state' => null,
        'msg_rcvd' => null,
        'pfx_rcvd' => null,
        'msg_sent' => null,
        'up_down_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'timestamp',
        'state' => 'state',
        'msg_rcvd' => 'msgRcvd',
        'pfx_rcvd' => 'pfxRcvd',
        'msg_sent' => 'msgSent',
        'up_down_time' => 'upDownTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'state' => 'setState',
        'msg_rcvd' => 'setMsgRcvd',
        'pfx_rcvd' => 'setPfxRcvd',
        'msg_sent' => 'setMsgSent',
        'up_down_time' => 'setUpDownTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'state' => 'getState',
        'msg_rcvd' => 'getMsgRcvd',
        'pfx_rcvd' => 'getPfxRcvd',
        'msg_sent' => 'getMsgSent',
        'up_down_time' => 'getUpDownTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_IDLE = 'IDLE';
    const STATE_CONNECT = 'CONNECT';
    const STATE_ACTIVE = 'ACTIVE';
    const STATE_OPENSENT = 'OPENSENT';
    const STATE_OPENCONFIRM = 'OPENCONFIRM';
    const STATE_ESTABLISHED = 'ESTABLISHED';
    const STATE_CLEARING = 'CLEARING';
    const STATE_IDLEADMIN = 'IDLEADMIN';
    const STATE_IDLEPRFXCT = 'IDLEPRFXCT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_IDLE,
            self::STATE_CONNECT,
            self::STATE_ACTIVE,
            self::STATE_OPENSENT,
            self::STATE_OPENCONFIRM,
            self::STATE_ESTABLISHED,
            self::STATE_CLEARING,
            self::STATE_IDLEADMIN,
            self::STATE_IDLEPRFXCT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['msg_rcvd'] = isset($data['msg_rcvd']) ? $data['msg_rcvd'] : null;
        $this->container['pfx_rcvd'] = isset($data['pfx_rcvd']) ? $data['pfx_rcvd'] : null;
        $this->container['msg_sent'] = isset($data['msg_sent']) ? $data['msg_sent'] : null;
        $this->container['up_down_time'] = isset($data['up_down_time']) ? $data['up_down_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets msg_rcvd
     *
     * @return int
     */
    public function getMsgRcvd()
    {
        return $this->container['msg_rcvd'];
    }

    /**
     * Sets msg_rcvd
     *
     * @param int $msg_rcvd msg_rcvd
     *
     * @return $this
     */
    public function setMsgRcvd($msg_rcvd)
    {
        $this->container['msg_rcvd'] = $msg_rcvd;

        return $this;
    }

    /**
     * Gets pfx_rcvd
     *
     * @return int
     */
    public function getPfxRcvd()
    {
        return $this->container['pfx_rcvd'];
    }

    /**
     * Sets pfx_rcvd
     *
     * @param int $pfx_rcvd pfx_rcvd
     *
     * @return $this
     */
    public function setPfxRcvd($pfx_rcvd)
    {
        $this->container['pfx_rcvd'] = $pfx_rcvd;

        return $this;
    }

    /**
     * Gets msg_sent
     *
     * @return int
     */
    public function getMsgSent()
    {
        return $this->container['msg_sent'];
    }

    /**
     * Sets msg_sent
     *
     * @param int $msg_sent msg_sent
     *
     * @return $this
     */
    public function setMsgSent($msg_sent)
    {
        $this->container['msg_sent'] = $msg_sent;

        return $this;
    }

    /**
     * Gets up_down_time
     *
     * @return int
     */
    public function getUpDownTime()
    {
        return $this->container['up_down_time'];
    }

    /**
     * Sets up_down_time
     *
     * @param int $up_down_time up_down_time
     *
     * @return $this
     */
    public function setUpDownTime($up_down_time)
    {
        $this->container['up_down_time'] = $up_down_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


