<?php
/**
 * RoleGetUserTypeRolesResultItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RoleGetUserTypeRolesResultItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoleGetUserTypeRolesResultItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'role_get_user_type_roles_result_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'operator_id' => 'int',
        'network_id' => 'int',
        'enterprise_id' => 'int',
        'enterprise_proxy_id' => 'int',
        'name' => 'string',
        'user_type' => 'string',
        'from_user_type' => 'string',
        'is_super' => 'int',
        'description' => 'string',
        'precedence' => 'int',
        'modified' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created' => 'date-time',
        'operator_id' => null,
        'network_id' => null,
        'enterprise_id' => null,
        'enterprise_proxy_id' => null,
        'name' => null,
        'user_type' => null,
        'from_user_type' => null,
        'is_super' => null,
        'description' => null,
        'precedence' => null,
        'modified' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'operator_id' => 'operatorId',
        'network_id' => 'networkId',
        'enterprise_id' => 'enterpriseId',
        'enterprise_proxy_id' => 'enterpriseProxyId',
        'name' => 'name',
        'user_type' => 'userType',
        'from_user_type' => 'fromUserType',
        'is_super' => 'isSuper',
        'description' => 'description',
        'precedence' => 'precedence',
        'modified' => 'modified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'operator_id' => 'setOperatorId',
        'network_id' => 'setNetworkId',
        'enterprise_id' => 'setEnterpriseId',
        'enterprise_proxy_id' => 'setEnterpriseProxyId',
        'name' => 'setName',
        'user_type' => 'setUserType',
        'from_user_type' => 'setFromUserType',
        'is_super' => 'setIsSuper',
        'description' => 'setDescription',
        'precedence' => 'setPrecedence',
        'modified' => 'setModified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'operator_id' => 'getOperatorId',
        'network_id' => 'getNetworkId',
        'enterprise_id' => 'getEnterpriseId',
        'enterprise_proxy_id' => 'getEnterpriseProxyId',
        'name' => 'getName',
        'user_type' => 'getUserType',
        'from_user_type' => 'getFromUserType',
        'is_super' => 'getIsSuper',
        'description' => 'getDescription',
        'precedence' => 'getPrecedence',
        'modified' => 'getModified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const USER_TYPE_OPERATOR = 'OPERATOR';
    const USER_TYPE_MSP = 'MSP';
    const USER_TYPE_PARTNER = 'PARTNER';
    const USER_TYPE_ENTERPRISE = 'ENTERPRISE';
    const USER_TYPE_END_USER = 'END_USER';
    const USER_TYPE_CUSTOM = 'CUSTOM';
    const FROM_USER_TYPE_OPERATOR = 'OPERATOR';
    const FROM_USER_TYPE_MSP = 'MSP';
    const FROM_USER_TYPE_PARTNER = 'PARTNER';
    const FROM_USER_TYPE_ENTERPRISE = 'ENTERPRISE';
    const FROM_USER_TYPE_END_USER = 'END_USER';
    const FROM_USER_TYPE_CUSTOM = 'CUSTOM';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserTypeAllowableValues()
    {
        return [
            self::USER_TYPE_OPERATOR,
            self::USER_TYPE_MSP,
            self::USER_TYPE_PARTNER,
            self::USER_TYPE_ENTERPRISE,
            self::USER_TYPE_END_USER,
            self::USER_TYPE_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFromUserTypeAllowableValues()
    {
        return [
            self::FROM_USER_TYPE_OPERATOR,
            self::FROM_USER_TYPE_MSP,
            self::FROM_USER_TYPE_PARTNER,
            self::FROM_USER_TYPE_ENTERPRISE,
            self::FROM_USER_TYPE_END_USER,
            self::FROM_USER_TYPE_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['operator_id'] = isset($data['operator_id']) ? $data['operator_id'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['enterprise_id'] = isset($data['enterprise_id']) ? $data['enterprise_id'] : null;
        $this->container['enterprise_proxy_id'] = isset($data['enterprise_proxy_id']) ? $data['enterprise_proxy_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['user_type'] = isset($data['user_type']) ? $data['user_type'] : null;
        $this->container['from_user_type'] = isset($data['from_user_type']) ? $data['from_user_type'] : null;
        $this->container['is_super'] = isset($data['is_super']) ? $data['is_super'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['precedence'] = isset($data['precedence']) ? $data['precedence'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUserTypeAllowableValues();
        if (!in_array($this->container['user_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'user_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFromUserTypeAllowableValues();
        if (!in_array($this->container['from_user_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'from_user_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getUserTypeAllowableValues();
        if (!in_array($this->container['user_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getFromUserTypeAllowableValues();
        if (!in_array($this->container['from_user_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets operator_id
     *
     * @return int
     */
    public function getOperatorId()
    {
        return $this->container['operator_id'];
    }

    /**
     * Sets operator_id
     *
     * @param int $operator_id operator_id
     *
     * @return $this
     */
    public function setOperatorId($operator_id)
    {
        $this->container['operator_id'] = $operator_id;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int $network_id network_id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets enterprise_id
     *
     * @return int
     */
    public function getEnterpriseId()
    {
        return $this->container['enterprise_id'];
    }

    /**
     * Sets enterprise_id
     *
     * @param int $enterprise_id enterprise_id
     *
     * @return $this
     */
    public function setEnterpriseId($enterprise_id)
    {
        $this->container['enterprise_id'] = $enterprise_id;

        return $this;
    }

    /**
     * Gets enterprise_proxy_id
     *
     * @return int
     */
    public function getEnterpriseProxyId()
    {
        return $this->container['enterprise_proxy_id'];
    }

    /**
     * Sets enterprise_proxy_id
     *
     * @param int $enterprise_proxy_id enterprise_proxy_id
     *
     * @return $this
     */
    public function setEnterpriseProxyId($enterprise_proxy_id)
    {
        $this->container['enterprise_proxy_id'] = $enterprise_proxy_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return string
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param string $user_type user_type
     *
     * @return $this
     */
    public function setUserType($user_type)
    {
        $allowedValues = $this->getUserTypeAllowableValues();
        if (!is_null($user_type) && !in_array($user_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'user_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets from_user_type
     *
     * @return string
     */
    public function getFromUserType()
    {
        return $this->container['from_user_type'];
    }

    /**
     * Sets from_user_type
     *
     * @param string $from_user_type from_user_type
     *
     * @return $this
     */
    public function setFromUserType($from_user_type)
    {
        $allowedValues = $this->getFromUserTypeAllowableValues();
        if (!is_null($from_user_type) && !in_array($from_user_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'from_user_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['from_user_type'] = $from_user_type;

        return $this;
    }

    /**
     * Gets is_super
     *
     * @return int
     */
    public function getIsSuper()
    {
        return $this->container['is_super'];
    }

    /**
     * Sets is_super
     *
     * @param int $is_super is_super
     *
     * @return $this
     */
    public function setIsSuper($is_super)
    {
        $this->container['is_super'] = $is_super;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets precedence
     *
     * @return int
     */
    public function getPrecedence()
    {
        return $this->container['precedence'];
    }

    /**
     * Sets precedence
     *
     * @param int $precedence precedence
     *
     * @return $this
     */
    public function setPrecedence($precedence)
    {
        $this->container['precedence'] = $precedence;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


