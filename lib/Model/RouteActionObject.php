<?php
/**
 * RouteActionObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RouteActionObject Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RouteActionObject implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'route_action_object';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'interface' => 'string',
        'link_internal_logical_id' => 'string',
        'link_policy' => 'string',
        'route_cfg' => 'object',
        'route_policy' => 'string',
        'service_group' => 'string',
        'vlan_id' => 'int',
        'wanlink' => 'string',
        'link_cos_logical_id' => 'string',
        'link_outer_dscp_tag' => 'string',
        'link_inner_dscp_tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'interface' => null,
        'link_internal_logical_id' => null,
        'link_policy' => null,
        'route_cfg' => null,
        'route_policy' => null,
        'service_group' => null,
        'vlan_id' => null,
        'wanlink' => null,
        'link_cos_logical_id' => null,
        'link_outer_dscp_tag' => null,
        'link_inner_dscp_tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interface' => 'interface',
        'link_internal_logical_id' => 'linkInternalLogicalId',
        'link_policy' => 'linkPolicy',
        'route_cfg' => 'routeCfg',
        'route_policy' => 'routePolicy',
        'service_group' => 'serviceGroup',
        'vlan_id' => 'vlanId',
        'wanlink' => 'wanlink',
        'link_cos_logical_id' => 'linkCosLogicalId',
        'link_outer_dscp_tag' => 'linkOuterDscpTag',
        'link_inner_dscp_tag' => 'linkInnerDscpTag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interface' => 'setInterface',
        'link_internal_logical_id' => 'setLinkInternalLogicalId',
        'link_policy' => 'setLinkPolicy',
        'route_cfg' => 'setRouteCfg',
        'route_policy' => 'setRoutePolicy',
        'service_group' => 'setServiceGroup',
        'vlan_id' => 'setVlanId',
        'wanlink' => 'setWanlink',
        'link_cos_logical_id' => 'setLinkCosLogicalId',
        'link_outer_dscp_tag' => 'setLinkOuterDscpTag',
        'link_inner_dscp_tag' => 'setLinkInnerDscpTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interface' => 'getInterface',
        'link_internal_logical_id' => 'getLinkInternalLogicalId',
        'link_policy' => 'getLinkPolicy',
        'route_cfg' => 'getRouteCfg',
        'route_policy' => 'getRoutePolicy',
        'service_group' => 'getServiceGroup',
        'vlan_id' => 'getVlanId',
        'wanlink' => 'getWanlink',
        'link_cos_logical_id' => 'getLinkCosLogicalId',
        'link_outer_dscp_tag' => 'getLinkOuterDscpTag',
        'link_inner_dscp_tag' => 'getLinkInnerDscpTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['interface'] = isset($data['interface']) ? $data['interface'] : null;
        $this->container['link_internal_logical_id'] = isset($data['link_internal_logical_id']) ? $data['link_internal_logical_id'] : null;
        $this->container['link_policy'] = isset($data['link_policy']) ? $data['link_policy'] : null;
        $this->container['route_cfg'] = isset($data['route_cfg']) ? $data['route_cfg'] : null;
        $this->container['route_policy'] = isset($data['route_policy']) ? $data['route_policy'] : null;
        $this->container['service_group'] = isset($data['service_group']) ? $data['service_group'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
        $this->container['wanlink'] = isset($data['wanlink']) ? $data['wanlink'] : null;
        $this->container['link_cos_logical_id'] = isset($data['link_cos_logical_id']) ? $data['link_cos_logical_id'] : null;
        $this->container['link_outer_dscp_tag'] = isset($data['link_outer_dscp_tag']) ? $data['link_outer_dscp_tag'] : null;
        $this->container['link_inner_dscp_tag'] = isset($data['link_inner_dscp_tag']) ? $data['link_inner_dscp_tag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets interface
     *
     * @return string
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string $interface interface
     *
     * @return $this
     */
    public function setInterface($interface)
    {
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets link_internal_logical_id
     *
     * @return string
     */
    public function getLinkInternalLogicalId()
    {
        return $this->container['link_internal_logical_id'];
    }

    /**
     * Sets link_internal_logical_id
     *
     * @param string $link_internal_logical_id link_internal_logical_id
     *
     * @return $this
     */
    public function setLinkInternalLogicalId($link_internal_logical_id)
    {
        $this->container['link_internal_logical_id'] = $link_internal_logical_id;

        return $this;
    }

    /**
     * Gets link_policy
     *
     * @return string
     */
    public function getLinkPolicy()
    {
        return $this->container['link_policy'];
    }

    /**
     * Sets link_policy
     *
     * @param string $link_policy link_policy
     *
     * @return $this
     */
    public function setLinkPolicy($link_policy)
    {
        $this->container['link_policy'] = $link_policy;

        return $this;
    }

    /**
     * Gets route_cfg
     *
     * @return object
     */
    public function getRouteCfg()
    {
        return $this->container['route_cfg'];
    }

    /**
     * Sets route_cfg
     *
     * @param object $route_cfg route_cfg
     *
     * @return $this
     */
    public function setRouteCfg($route_cfg)
    {
        $this->container['route_cfg'] = $route_cfg;

        return $this;
    }

    /**
     * Gets route_policy
     *
     * @return string
     */
    public function getRoutePolicy()
    {
        return $this->container['route_policy'];
    }

    /**
     * Sets route_policy
     *
     * @param string $route_policy route_policy
     *
     * @return $this
     */
    public function setRoutePolicy($route_policy)
    {
        $this->container['route_policy'] = $route_policy;

        return $this;
    }

    /**
     * Gets service_group
     *
     * @return string
     */
    public function getServiceGroup()
    {
        return $this->container['service_group'];
    }

    /**
     * Sets service_group
     *
     * @param string $service_group service_group
     *
     * @return $this
     */
    public function setServiceGroup($service_group)
    {
        $this->container['service_group'] = $service_group;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int $vlan_id vlan_id
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets wanlink
     *
     * @return string
     */
    public function getWanlink()
    {
        return $this->container['wanlink'];
    }

    /**
     * Sets wanlink
     *
     * @param string $wanlink wanlink
     *
     * @return $this
     */
    public function setWanlink($wanlink)
    {
        $this->container['wanlink'] = $wanlink;

        return $this;
    }

    /**
     * Gets link_cos_logical_id
     *
     * @return string
     */
    public function getLinkCosLogicalId()
    {
        return $this->container['link_cos_logical_id'];
    }

    /**
     * Sets link_cos_logical_id
     *
     * @param string $link_cos_logical_id link_cos_logical_id
     *
     * @return $this
     */
    public function setLinkCosLogicalId($link_cos_logical_id)
    {
        $this->container['link_cos_logical_id'] = $link_cos_logical_id;

        return $this;
    }

    /**
     * Gets link_outer_dscp_tag
     *
     * @return string
     */
    public function getLinkOuterDscpTag()
    {
        return $this->container['link_outer_dscp_tag'];
    }

    /**
     * Sets link_outer_dscp_tag
     *
     * @param string $link_outer_dscp_tag link_outer_dscp_tag
     *
     * @return $this
     */
    public function setLinkOuterDscpTag($link_outer_dscp_tag)
    {
        $this->container['link_outer_dscp_tag'] = $link_outer_dscp_tag;

        return $this;
    }

    /**
     * Gets link_inner_dscp_tag
     *
     * @return string
     */
    public function getLinkInnerDscpTag()
    {
        return $this->container['link_inner_dscp_tag'];
    }

    /**
     * Sets link_inner_dscp_tag
     *
     * @param string $link_inner_dscp_tag link_inner_dscp_tag
     *
     * @return $this
     */
    public function setLinkInnerDscpTag($link_inner_dscp_tag)
    {
        $this->container['link_inner_dscp_tag'] = $link_inner_dscp_tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


