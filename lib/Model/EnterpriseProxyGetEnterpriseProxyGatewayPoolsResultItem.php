<?php
/**
 * EnterpriseProxyGetEnterpriseProxyGatewayPoolsResultItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnterpriseProxyGetEnterpriseProxyGatewayPoolsResultItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterpriseProxyGetEnterpriseProxyGatewayPoolsResultItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'enterprise_proxy_get_enterprise_proxy_gateway_pools_result_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'network_id' => 'int',
        'enterprise_proxy_id' => 'int',
        'created' => '\DateTime',
        'name' => 'string',
        'description' => 'string',
        'is_default' => 'bool',
        'hand_off_type' => 'string',
        'modified' => '\DateTime',
        'enterprises' => '\Swagger\Client\Model\Enterprise[]',
        'gateways' => '\Swagger\Client\Model\GatewayPoolGateway[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'network_id' => null,
        'enterprise_proxy_id' => null,
        'created' => 'date-time',
        'name' => null,
        'description' => null,
        'is_default' => null,
        'hand_off_type' => null,
        'modified' => 'date-time',
        'enterprises' => null,
        'gateways' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'network_id' => 'networkId',
        'enterprise_proxy_id' => 'enterpriseProxyId',
        'created' => 'created',
        'name' => 'name',
        'description' => 'description',
        'is_default' => 'isDefault',
        'hand_off_type' => 'handOffType',
        'modified' => 'modified',
        'enterprises' => 'enterprises',
        'gateways' => 'gateways'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'network_id' => 'setNetworkId',
        'enterprise_proxy_id' => 'setEnterpriseProxyId',
        'created' => 'setCreated',
        'name' => 'setName',
        'description' => 'setDescription',
        'is_default' => 'setIsDefault',
        'hand_off_type' => 'setHandOffType',
        'modified' => 'setModified',
        'enterprises' => 'setEnterprises',
        'gateways' => 'setGateways'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'network_id' => 'getNetworkId',
        'enterprise_proxy_id' => 'getEnterpriseProxyId',
        'created' => 'getCreated',
        'name' => 'getName',
        'description' => 'getDescription',
        'is_default' => 'getIsDefault',
        'hand_off_type' => 'getHandOffType',
        'modified' => 'getModified',
        'enterprises' => 'getEnterprises',
        'gateways' => 'getGateways'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HAND_OFF_TYPE_NONE = 'NONE';
    const HAND_OFF_TYPE_ALLOW = 'ALLOW';
    const HAND_OFF_TYPE_ONLY = 'ONLY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHandOffTypeAllowableValues()
    {
        return [
            self::HAND_OFF_TYPE_NONE,
            self::HAND_OFF_TYPE_ALLOW,
            self::HAND_OFF_TYPE_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['network_id'] = isset($data['network_id']) ? $data['network_id'] : null;
        $this->container['enterprise_proxy_id'] = isset($data['enterprise_proxy_id']) ? $data['enterprise_proxy_id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['hand_off_type'] = isset($data['hand_off_type']) ? $data['hand_off_type'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['enterprises'] = isset($data['enterprises']) ? $data['enterprises'] : null;
        $this->container['gateways'] = isset($data['gateways']) ? $data['gateways'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHandOffTypeAllowableValues();
        if (!in_array($this->container['hand_off_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'hand_off_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getHandOffTypeAllowableValues();
        if (!in_array($this->container['hand_off_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return int
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param int $network_id network_id
     *
     * @return $this
     */
    public function setNetworkId($network_id)
    {
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets enterprise_proxy_id
     *
     * @return int
     */
    public function getEnterpriseProxyId()
    {
        return $this->container['enterprise_proxy_id'];
    }

    /**
     * Sets enterprise_proxy_id
     *
     * @param int $enterprise_proxy_id enterprise_proxy_id
     *
     * @return $this
     */
    public function setEnterpriseProxyId($enterprise_proxy_id)
    {
        $this->container['enterprise_proxy_id'] = $enterprise_proxy_id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets hand_off_type
     *
     * @return string
     */
    public function getHandOffType()
    {
        return $this->container['hand_off_type'];
    }

    /**
     * Sets hand_off_type
     *
     * @param string $hand_off_type hand_off_type
     *
     * @return $this
     */
    public function setHandOffType($hand_off_type)
    {
        $allowedValues = $this->getHandOffTypeAllowableValues();
        if (!is_null($hand_off_type) && !in_array($hand_off_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'hand_off_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hand_off_type'] = $hand_off_type;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets enterprises
     *
     * @return \Swagger\Client\Model\Enterprise[]
     */
    public function getEnterprises()
    {
        return $this->container['enterprises'];
    }

    /**
     * Sets enterprises
     *
     * @param \Swagger\Client\Model\Enterprise[] $enterprises enterprises
     *
     * @return $this
     */
    public function setEnterprises($enterprises)
    {
        $this->container['enterprises'] = $enterprises;

        return $this;
    }

    /**
     * Gets gateways
     *
     * @return \Swagger\Client\Model\GatewayPoolGateway[]
     */
    public function getGateways()
    {
        return $this->container['gateways'];
    }

    /**
     * Sets gateways
     *
     * @param \Swagger\Client\Model\GatewayPoolGateway[] $gateways gateways
     *
     * @return $this
     */
    public function setGateways($gateways)
    {
        $this->container['gateways'] = $gateways;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


