<?php
/**
 * MonitoringGetAggregateEdgeLinkMetricsResultItemLink
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MonitoringGetAggregateEdgeLinkMetricsResultItemLink Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MonitoringGetAggregateEdgeLinkMetricsResultItemLink implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'monitoring_get_aggregate_edge_link_metrics_result_item_link';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enterprise_name' => 'string',
        'enterprise_id' => 'int',
        'edge_name' => 'string',
        'edge_serial_number' => 'string',
        'edge_ha_serial_number' => 'string',
        'edge_state' => 'string',
        'edge_last_contact' => '\DateTime',
        'edge_id' => 'int',
        'edge_system_up_since' => '\DateTime',
        'edge_service_up_since' => '\DateTime',
        'edge_model_number' => 'string',
        'isp' => 'string',
        'display_name' => 'string',
        'interface' => 'string',
        'link_id' => 'int',
        'link_state' => 'string',
        'link_last_active' => '\DateTime',
        'link_vpn_state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enterprise_name' => null,
        'enterprise_id' => null,
        'edge_name' => null,
        'edge_serial_number' => null,
        'edge_ha_serial_number' => null,
        'edge_state' => null,
        'edge_last_contact' => 'date-time',
        'edge_id' => null,
        'edge_system_up_since' => 'date-time',
        'edge_service_up_since' => 'date-time',
        'edge_model_number' => null,
        'isp' => null,
        'display_name' => null,
        'interface' => null,
        'link_id' => null,
        'link_state' => null,
        'link_last_active' => 'date-time',
        'link_vpn_state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enterprise_name' => 'enterpriseName',
        'enterprise_id' => 'enterpriseId',
        'edge_name' => 'edgeName',
        'edge_serial_number' => 'edgeSerialNumber',
        'edge_ha_serial_number' => 'edgeHASerialNumber',
        'edge_state' => 'edgeState',
        'edge_last_contact' => 'edgeLastContact',
        'edge_id' => 'edgeId',
        'edge_system_up_since' => 'edgeSystemUpSince',
        'edge_service_up_since' => 'edgeServiceUpSince',
        'edge_model_number' => 'edgeModelNumber',
        'isp' => 'isp',
        'display_name' => 'displayName',
        'interface' => 'interface',
        'link_id' => 'linkId',
        'link_state' => 'linkState',
        'link_last_active' => 'linkLastActive',
        'link_vpn_state' => 'linkVpnState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enterprise_name' => 'setEnterpriseName',
        'enterprise_id' => 'setEnterpriseId',
        'edge_name' => 'setEdgeName',
        'edge_serial_number' => 'setEdgeSerialNumber',
        'edge_ha_serial_number' => 'setEdgeHaSerialNumber',
        'edge_state' => 'setEdgeState',
        'edge_last_contact' => 'setEdgeLastContact',
        'edge_id' => 'setEdgeId',
        'edge_system_up_since' => 'setEdgeSystemUpSince',
        'edge_service_up_since' => 'setEdgeServiceUpSince',
        'edge_model_number' => 'setEdgeModelNumber',
        'isp' => 'setIsp',
        'display_name' => 'setDisplayName',
        'interface' => 'setInterface',
        'link_id' => 'setLinkId',
        'link_state' => 'setLinkState',
        'link_last_active' => 'setLinkLastActive',
        'link_vpn_state' => 'setLinkVpnState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enterprise_name' => 'getEnterpriseName',
        'enterprise_id' => 'getEnterpriseId',
        'edge_name' => 'getEdgeName',
        'edge_serial_number' => 'getEdgeSerialNumber',
        'edge_ha_serial_number' => 'getEdgeHaSerialNumber',
        'edge_state' => 'getEdgeState',
        'edge_last_contact' => 'getEdgeLastContact',
        'edge_id' => 'getEdgeId',
        'edge_system_up_since' => 'getEdgeSystemUpSince',
        'edge_service_up_since' => 'getEdgeServiceUpSince',
        'edge_model_number' => 'getEdgeModelNumber',
        'isp' => 'getIsp',
        'display_name' => 'getDisplayName',
        'interface' => 'getInterface',
        'link_id' => 'getLinkId',
        'link_state' => 'getLinkState',
        'link_last_active' => 'getLinkLastActive',
        'link_vpn_state' => 'getLinkVpnState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EDGE_STATE_NEVER_ACTIVATED = 'NEVER_ACTIVATED';
    const EDGE_STATE_DEGRADED = 'DEGRADED';
    const EDGE_STATE_OFFLINE = 'OFFLINE';
    const EDGE_STATE_DISABLED = 'DISABLED';
    const EDGE_STATE_EXPIRED = 'EXPIRED';
    const EDGE_STATE_CONNECTED = 'CONNECTED';
    const EDGE_MODEL_NUMBER_EDGE500 = 'edge500';
    const EDGE_MODEL_NUMBER_EDGE520 = 'edge520';
    const EDGE_MODEL_NUMBER_EDGE5_X0 = 'edge5X0';
    const EDGE_MODEL_NUMBER_EDGE510 = 'edge510';
    const EDGE_MODEL_NUMBER_EDGE840 = 'edge840';
    const EDGE_MODEL_NUMBER_EDGE1000 = 'edge1000';
    const EDGE_MODEL_NUMBER_EDGE1000QAT = 'edge1000qat';
    const EDGE_MODEL_NUMBER_VIRTUAL = 'virtual';
    const LINK_STATE_UNKNOWN = 'UNKNOWN';
    const LINK_STATE_STABLE = 'STABLE';
    const LINK_STATE_UNSTABLE = 'UNSTABLE';
    const LINK_STATE_DISCONNECTED = 'DISCONNECTED';
    const LINK_STATE_QUIET = 'QUIET';
    const LINK_STATE_INITIAL = 'INITIAL';
    const LINK_STATE_STANDBY = 'STANDBY';
    const LINK_VPN_STATE_UNKNOWN = 'UNKNOWN';
    const LINK_VPN_STATE_STABLE = 'STABLE';
    const LINK_VPN_STATE_UNSTABLE = 'UNSTABLE';
    const LINK_VPN_STATE_DEAD = 'DEAD';
    const LINK_VPN_STATE_STANDBY = 'STANDBY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEdgeStateAllowableValues()
    {
        return [
            self::EDGE_STATE_NEVER_ACTIVATED,
            self::EDGE_STATE_DEGRADED,
            self::EDGE_STATE_OFFLINE,
            self::EDGE_STATE_DISABLED,
            self::EDGE_STATE_EXPIRED,
            self::EDGE_STATE_CONNECTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEdgeModelNumberAllowableValues()
    {
        return [
            self::EDGE_MODEL_NUMBER_EDGE500,
            self::EDGE_MODEL_NUMBER_EDGE520,
            self::EDGE_MODEL_NUMBER_EDGE5_X0,
            self::EDGE_MODEL_NUMBER_EDGE510,
            self::EDGE_MODEL_NUMBER_EDGE840,
            self::EDGE_MODEL_NUMBER_EDGE1000,
            self::EDGE_MODEL_NUMBER_EDGE1000QAT,
            self::EDGE_MODEL_NUMBER_VIRTUAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkStateAllowableValues()
    {
        return [
            self::LINK_STATE_UNKNOWN,
            self::LINK_STATE_STABLE,
            self::LINK_STATE_UNSTABLE,
            self::LINK_STATE_DISCONNECTED,
            self::LINK_STATE_QUIET,
            self::LINK_STATE_INITIAL,
            self::LINK_STATE_STANDBY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkVpnStateAllowableValues()
    {
        return [
            self::LINK_VPN_STATE_UNKNOWN,
            self::LINK_VPN_STATE_STABLE,
            self::LINK_VPN_STATE_UNSTABLE,
            self::LINK_VPN_STATE_DEAD,
            self::LINK_VPN_STATE_STANDBY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enterprise_name'] = isset($data['enterprise_name']) ? $data['enterprise_name'] : null;
        $this->container['enterprise_id'] = isset($data['enterprise_id']) ? $data['enterprise_id'] : null;
        $this->container['edge_name'] = isset($data['edge_name']) ? $data['edge_name'] : null;
        $this->container['edge_serial_number'] = isset($data['edge_serial_number']) ? $data['edge_serial_number'] : null;
        $this->container['edge_ha_serial_number'] = isset($data['edge_ha_serial_number']) ? $data['edge_ha_serial_number'] : null;
        $this->container['edge_state'] = isset($data['edge_state']) ? $data['edge_state'] : null;
        $this->container['edge_last_contact'] = isset($data['edge_last_contact']) ? $data['edge_last_contact'] : null;
        $this->container['edge_id'] = isset($data['edge_id']) ? $data['edge_id'] : null;
        $this->container['edge_system_up_since'] = isset($data['edge_system_up_since']) ? $data['edge_system_up_since'] : null;
        $this->container['edge_service_up_since'] = isset($data['edge_service_up_since']) ? $data['edge_service_up_since'] : null;
        $this->container['edge_model_number'] = isset($data['edge_model_number']) ? $data['edge_model_number'] : null;
        $this->container['isp'] = isset($data['isp']) ? $data['isp'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['interface'] = isset($data['interface']) ? $data['interface'] : null;
        $this->container['link_id'] = isset($data['link_id']) ? $data['link_id'] : null;
        $this->container['link_state'] = isset($data['link_state']) ? $data['link_state'] : null;
        $this->container['link_last_active'] = isset($data['link_last_active']) ? $data['link_last_active'] : null;
        $this->container['link_vpn_state'] = isset($data['link_vpn_state']) ? $data['link_vpn_state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEdgeStateAllowableValues();
        if (!in_array($this->container['edge_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'edge_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['edge_id'] === null) {
            $invalidProperties[] = "'edge_id' can't be null";
        }
        $allowedValues = $this->getEdgeModelNumberAllowableValues();
        if (!in_array($this->container['edge_model_number'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'edge_model_number', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['isp'] === null) {
            $invalidProperties[] = "'isp' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['interface'] === null) {
            $invalidProperties[] = "'interface' can't be null";
        }
        $allowedValues = $this->getLinkStateAllowableValues();
        if (!in_array($this->container['link_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'link_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLinkVpnStateAllowableValues();
        if (!in_array($this->container['link_vpn_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'link_vpn_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getEdgeStateAllowableValues();
        if (!in_array($this->container['edge_state'], $allowedValues)) {
            return false;
        }
        if ($this->container['edge_id'] === null) {
            return false;
        }
        $allowedValues = $this->getEdgeModelNumberAllowableValues();
        if (!in_array($this->container['edge_model_number'], $allowedValues)) {
            return false;
        }
        if ($this->container['isp'] === null) {
            return false;
        }
        if ($this->container['display_name'] === null) {
            return false;
        }
        if ($this->container['interface'] === null) {
            return false;
        }
        $allowedValues = $this->getLinkStateAllowableValues();
        if (!in_array($this->container['link_state'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getLinkVpnStateAllowableValues();
        if (!in_array($this->container['link_vpn_state'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets enterprise_name
     *
     * @return string
     */
    public function getEnterpriseName()
    {
        return $this->container['enterprise_name'];
    }

    /**
     * Sets enterprise_name
     *
     * @param string $enterprise_name enterprise_name
     *
     * @return $this
     */
    public function setEnterpriseName($enterprise_name)
    {
        $this->container['enterprise_name'] = $enterprise_name;

        return $this;
    }

    /**
     * Gets enterprise_id
     *
     * @return int
     */
    public function getEnterpriseId()
    {
        return $this->container['enterprise_id'];
    }

    /**
     * Sets enterprise_id
     *
     * @param int $enterprise_id enterprise_id
     *
     * @return $this
     */
    public function setEnterpriseId($enterprise_id)
    {
        $this->container['enterprise_id'] = $enterprise_id;

        return $this;
    }

    /**
     * Gets edge_name
     *
     * @return string
     */
    public function getEdgeName()
    {
        return $this->container['edge_name'];
    }

    /**
     * Sets edge_name
     *
     * @param string $edge_name edge_name
     *
     * @return $this
     */
    public function setEdgeName($edge_name)
    {
        $this->container['edge_name'] = $edge_name;

        return $this;
    }

    /**
     * Gets edge_serial_number
     *
     * @return string
     */
    public function getEdgeSerialNumber()
    {
        return $this->container['edge_serial_number'];
    }

    /**
     * Sets edge_serial_number
     *
     * @param string $edge_serial_number edge_serial_number
     *
     * @return $this
     */
    public function setEdgeSerialNumber($edge_serial_number)
    {
        $this->container['edge_serial_number'] = $edge_serial_number;

        return $this;
    }

    /**
     * Gets edge_ha_serial_number
     *
     * @return string
     */
    public function getEdgeHaSerialNumber()
    {
        return $this->container['edge_ha_serial_number'];
    }

    /**
     * Sets edge_ha_serial_number
     *
     * @param string $edge_ha_serial_number edge_ha_serial_number
     *
     * @return $this
     */
    public function setEdgeHaSerialNumber($edge_ha_serial_number)
    {
        $this->container['edge_ha_serial_number'] = $edge_ha_serial_number;

        return $this;
    }

    /**
     * Gets edge_state
     *
     * @return string
     */
    public function getEdgeState()
    {
        return $this->container['edge_state'];
    }

    /**
     * Sets edge_state
     *
     * @param string $edge_state edge_state
     *
     * @return $this
     */
    public function setEdgeState($edge_state)
    {
        $allowedValues = $this->getEdgeStateAllowableValues();
        if (!is_null($edge_state) && !in_array($edge_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'edge_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['edge_state'] = $edge_state;

        return $this;
    }

    /**
     * Gets edge_last_contact
     *
     * @return \DateTime
     */
    public function getEdgeLastContact()
    {
        return $this->container['edge_last_contact'];
    }

    /**
     * Sets edge_last_contact
     *
     * @param \DateTime $edge_last_contact edge_last_contact
     *
     * @return $this
     */
    public function setEdgeLastContact($edge_last_contact)
    {
        $this->container['edge_last_contact'] = $edge_last_contact;

        return $this;
    }

    /**
     * Gets edge_id
     *
     * @return int
     */
    public function getEdgeId()
    {
        return $this->container['edge_id'];
    }

    /**
     * Sets edge_id
     *
     * @param int $edge_id edge_id
     *
     * @return $this
     */
    public function setEdgeId($edge_id)
    {
        $this->container['edge_id'] = $edge_id;

        return $this;
    }

    /**
     * Gets edge_system_up_since
     *
     * @return \DateTime
     */
    public function getEdgeSystemUpSince()
    {
        return $this->container['edge_system_up_since'];
    }

    /**
     * Sets edge_system_up_since
     *
     * @param \DateTime $edge_system_up_since edge_system_up_since
     *
     * @return $this
     */
    public function setEdgeSystemUpSince($edge_system_up_since)
    {
        $this->container['edge_system_up_since'] = $edge_system_up_since;

        return $this;
    }

    /**
     * Gets edge_service_up_since
     *
     * @return \DateTime
     */
    public function getEdgeServiceUpSince()
    {
        return $this->container['edge_service_up_since'];
    }

    /**
     * Sets edge_service_up_since
     *
     * @param \DateTime $edge_service_up_since edge_service_up_since
     *
     * @return $this
     */
    public function setEdgeServiceUpSince($edge_service_up_since)
    {
        $this->container['edge_service_up_since'] = $edge_service_up_since;

        return $this;
    }

    /**
     * Gets edge_model_number
     *
     * @return string
     */
    public function getEdgeModelNumber()
    {
        return $this->container['edge_model_number'];
    }

    /**
     * Sets edge_model_number
     *
     * @param string $edge_model_number edge_model_number
     *
     * @return $this
     */
    public function setEdgeModelNumber($edge_model_number)
    {
        $allowedValues = $this->getEdgeModelNumberAllowableValues();
        if (!is_null($edge_model_number) && !in_array($edge_model_number, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'edge_model_number', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['edge_model_number'] = $edge_model_number;

        return $this;
    }

    /**
     * Gets isp
     *
     * @return string
     */
    public function getIsp()
    {
        return $this->container['isp'];
    }

    /**
     * Sets isp
     *
     * @param string $isp isp
     *
     * @return $this
     */
    public function setIsp($isp)
    {
        $this->container['isp'] = $isp;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string $interface interface
     *
     * @return $this
     */
    public function setInterface($interface)
    {
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets link_id
     *
     * @return int
     */
    public function getLinkId()
    {
        return $this->container['link_id'];
    }

    /**
     * Sets link_id
     *
     * @param int $link_id link_id
     *
     * @return $this
     */
    public function setLinkId($link_id)
    {
        $this->container['link_id'] = $link_id;

        return $this;
    }

    /**
     * Gets link_state
     *
     * @return string
     */
    public function getLinkState()
    {
        return $this->container['link_state'];
    }

    /**
     * Sets link_state
     *
     * @param string $link_state link_state
     *
     * @return $this
     */
    public function setLinkState($link_state)
    {
        $allowedValues = $this->getLinkStateAllowableValues();
        if (!is_null($link_state) && !in_array($link_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'link_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_state'] = $link_state;

        return $this;
    }

    /**
     * Gets link_last_active
     *
     * @return \DateTime
     */
    public function getLinkLastActive()
    {
        return $this->container['link_last_active'];
    }

    /**
     * Sets link_last_active
     *
     * @param \DateTime $link_last_active link_last_active
     *
     * @return $this
     */
    public function setLinkLastActive($link_last_active)
    {
        $this->container['link_last_active'] = $link_last_active;

        return $this;
    }

    /**
     * Gets link_vpn_state
     *
     * @return string
     */
    public function getLinkVpnState()
    {
        return $this->container['link_vpn_state'];
    }

    /**
     * Sets link_vpn_state
     *
     * @param string $link_vpn_state link_vpn_state
     *
     * @return $this
     */
    public function setLinkVpnState($link_vpn_state)
    {
        $allowedValues = $this->getLinkVpnStateAllowableValues();
        if (!is_null($link_vpn_state) && !in_array($link_vpn_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'link_vpn_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['link_vpn_state'] = $link_vpn_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


