<?php
/**
 * EdgeObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdgeObject Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdgeObject implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'edge_object';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activation_key' => 'string',
        'activation_key_expires' => 'string',
        'activation_state' => 'string',
        'activation_time' => 'string',
        'alerts_enabled' => 'int',
        'build_number' => 'string',
        'created' => 'string',
        'description' => 'string',
        'device_family' => 'string',
        'device_id' => 'string',
        'dns_name' => 'string',
        'edge_hardware_id' => 'string',
        'edge_state' => 'string',
        'edge_state_time' => 'string',
        'endpoint_pki_mode' => 'string',
        'enterprise_id' => 'int',
        'ha_last_contact' => 'string',
        'ha_previous_state' => 'string',
        'ha_serial_number' => 'string',
        'ha_state' => 'string',
        'id' => 'int',
        'is_live' => 'int',
        'last_contact' => 'string',
        'logical_id' => 'string',
        'model_number' => 'string',
        'modified' => 'string',
        'name' => 'string',
        'operator_alerts_enabled' => 'int',
        'self_mac_address' => 'string',
        'serial_number' => 'string',
        'service_state' => 'string',
        'service_up_since' => 'string',
        'site_id' => 'int',
        'software_updated' => 'string',
        'software_version' => 'string',
        'system_up_since' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activation_key' => null,
        'activation_key_expires' => null,
        'activation_state' => null,
        'activation_time' => null,
        'alerts_enabled' => null,
        'build_number' => null,
        'created' => null,
        'description' => null,
        'device_family' => null,
        'device_id' => null,
        'dns_name' => null,
        'edge_hardware_id' => null,
        'edge_state' => null,
        'edge_state_time' => null,
        'endpoint_pki_mode' => null,
        'enterprise_id' => null,
        'ha_last_contact' => null,
        'ha_previous_state' => null,
        'ha_serial_number' => null,
        'ha_state' => null,
        'id' => null,
        'is_live' => null,
        'last_contact' => null,
        'logical_id' => null,
        'model_number' => null,
        'modified' => null,
        'name' => null,
        'operator_alerts_enabled' => null,
        'self_mac_address' => null,
        'serial_number' => null,
        'service_state' => null,
        'service_up_since' => null,
        'site_id' => null,
        'software_updated' => null,
        'software_version' => null,
        'system_up_since' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activation_key' => 'activationKey',
        'activation_key_expires' => 'activationKeyExpires',
        'activation_state' => 'activationState',
        'activation_time' => 'activationTime',
        'alerts_enabled' => 'alertsEnabled',
        'build_number' => 'buildNumber',
        'created' => 'created',
        'description' => 'description',
        'device_family' => 'deviceFamily',
        'device_id' => 'deviceId',
        'dns_name' => 'dnsName',
        'edge_hardware_id' => 'edgeHardwareId',
        'edge_state' => 'edgeState',
        'edge_state_time' => 'edgeStateTime',
        'endpoint_pki_mode' => 'endpointPkiMode',
        'enterprise_id' => 'enterpriseId',
        'ha_last_contact' => 'haLastContact',
        'ha_previous_state' => 'haPreviousState',
        'ha_serial_number' => 'haSerialNumber',
        'ha_state' => 'haState',
        'id' => 'id',
        'is_live' => 'isLive',
        'last_contact' => 'lastContact',
        'logical_id' => 'logicalId',
        'model_number' => 'modelNumber',
        'modified' => 'modified',
        'name' => 'name',
        'operator_alerts_enabled' => 'operatorAlertsEnabled',
        'self_mac_address' => 'selfMacAddress',
        'serial_number' => 'serialNumber',
        'service_state' => 'serviceState',
        'service_up_since' => 'serviceUpSince',
        'site_id' => 'siteId',
        'software_updated' => 'softwareUpdated',
        'software_version' => 'softwareVersion',
        'system_up_since' => 'systemUpSince'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activation_key' => 'setActivationKey',
        'activation_key_expires' => 'setActivationKeyExpires',
        'activation_state' => 'setActivationState',
        'activation_time' => 'setActivationTime',
        'alerts_enabled' => 'setAlertsEnabled',
        'build_number' => 'setBuildNumber',
        'created' => 'setCreated',
        'description' => 'setDescription',
        'device_family' => 'setDeviceFamily',
        'device_id' => 'setDeviceId',
        'dns_name' => 'setDnsName',
        'edge_hardware_id' => 'setEdgeHardwareId',
        'edge_state' => 'setEdgeState',
        'edge_state_time' => 'setEdgeStateTime',
        'endpoint_pki_mode' => 'setEndpointPkiMode',
        'enterprise_id' => 'setEnterpriseId',
        'ha_last_contact' => 'setHaLastContact',
        'ha_previous_state' => 'setHaPreviousState',
        'ha_serial_number' => 'setHaSerialNumber',
        'ha_state' => 'setHaState',
        'id' => 'setId',
        'is_live' => 'setIsLive',
        'last_contact' => 'setLastContact',
        'logical_id' => 'setLogicalId',
        'model_number' => 'setModelNumber',
        'modified' => 'setModified',
        'name' => 'setName',
        'operator_alerts_enabled' => 'setOperatorAlertsEnabled',
        'self_mac_address' => 'setSelfMacAddress',
        'serial_number' => 'setSerialNumber',
        'service_state' => 'setServiceState',
        'service_up_since' => 'setServiceUpSince',
        'site_id' => 'setSiteId',
        'software_updated' => 'setSoftwareUpdated',
        'software_version' => 'setSoftwareVersion',
        'system_up_since' => 'setSystemUpSince'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activation_key' => 'getActivationKey',
        'activation_key_expires' => 'getActivationKeyExpires',
        'activation_state' => 'getActivationState',
        'activation_time' => 'getActivationTime',
        'alerts_enabled' => 'getAlertsEnabled',
        'build_number' => 'getBuildNumber',
        'created' => 'getCreated',
        'description' => 'getDescription',
        'device_family' => 'getDeviceFamily',
        'device_id' => 'getDeviceId',
        'dns_name' => 'getDnsName',
        'edge_hardware_id' => 'getEdgeHardwareId',
        'edge_state' => 'getEdgeState',
        'edge_state_time' => 'getEdgeStateTime',
        'endpoint_pki_mode' => 'getEndpointPkiMode',
        'enterprise_id' => 'getEnterpriseId',
        'ha_last_contact' => 'getHaLastContact',
        'ha_previous_state' => 'getHaPreviousState',
        'ha_serial_number' => 'getHaSerialNumber',
        'ha_state' => 'getHaState',
        'id' => 'getId',
        'is_live' => 'getIsLive',
        'last_contact' => 'getLastContact',
        'logical_id' => 'getLogicalId',
        'model_number' => 'getModelNumber',
        'modified' => 'getModified',
        'name' => 'getName',
        'operator_alerts_enabled' => 'getOperatorAlertsEnabled',
        'self_mac_address' => 'getSelfMacAddress',
        'serial_number' => 'getSerialNumber',
        'service_state' => 'getServiceState',
        'service_up_since' => 'getServiceUpSince',
        'site_id' => 'getSiteId',
        'software_updated' => 'getSoftwareUpdated',
        'software_version' => 'getSoftwareVersion',
        'system_up_since' => 'getSystemUpSince'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTIVATION_STATE_UNASSIGNED = 'UNASSIGNED';
    const ACTIVATION_STATE_PENDING = 'PENDING';
    const ACTIVATION_STATE_ACTIVATED = 'ACTIVATED';
    const ACTIVATION_STATE_REACTIVATION_PENDING = 'REACTIVATION_PENDING';
    const EDGE_STATE_NEVER_ACTIVATED = 'NEVER_ACTIVATED';
    const EDGE_STATE_DEGRADED = 'DEGRADED';
    const EDGE_STATE_OFFLINE = 'OFFLINE';
    const EDGE_STATE_DISABLED = 'DISABLED';
    const EDGE_STATE_EXPIRED = 'EXPIRED';
    const EDGE_STATE_CONNECTED = 'CONNECTED';
    const ENDPOINT_PKI_MODE_DISABLED = 'CERTIFICATE_DISABLED';
    const ENDPOINT_PKI_MODE_OPTIONAL = 'CERTIFICATE_OPTIONAL';
    const ENDPOINT_PKI_MODE_REQUIRED = 'CERTIFICATE_REQUIRED';
    const HA_PREVIOUS_STATE_UNCONFIGURED = 'UNCONFIGURED';
    const HA_PREVIOUS_STATE_PENDING_INIT = 'PENDING_INIT';
    const HA_PREVIOUS_STATE_PENDING_CONFIRMATION = 'PENDING_CONFIRMATION';
    const HA_PREVIOUS_STATE_PENDING_CONFIRMED = 'PENDING_CONFIRMED';
    const HA_PREVIOUS_STATE_PENDING_DISSOCIATION = 'PENDING_DISSOCIATION';
    const HA_PREVIOUS_STATE_READY = 'READY';
    const HA_PREVIOUS_STATE_FAILED = 'FAILED';
    const HA_STATE_UNCONFIGURED = 'UNCONFIGURED';
    const HA_STATE_PENDING_INIT = 'PENDING_INIT';
    const HA_STATE_PENDING_CONFIRMATION = 'PENDING_CONFIRMATION';
    const HA_STATE_PENDING_CONFIRMED = 'PENDING_CONFIRMED';
    const HA_STATE_PENDING_DISSOCIATION = 'PENDING_DISSOCIATION';
    const HA_STATE_READY = 'READY';
    const HA_STATE_FAILED = 'FAILED';
    const MODEL_NUMBER_EDGE500 = 'edge500';
    const MODEL_NUMBER_EDGE520 = 'edge520';
    const MODEL_NUMBER_EDGE5_X0 = 'edge5X0';
    const MODEL_NUMBER_EDGE510 = 'edge510';
    const MODEL_NUMBER_EDGE840 = 'edge840';
    const MODEL_NUMBER_EDGE1000 = 'edge1000';
    const MODEL_NUMBER_EDGE1000QAT = 'edge1000qat';
    const MODEL_NUMBER_VIRTUAL = 'virtual';
    const SERVICE_STATE_IN_SERVICE = 'IN_SERVICE';
    const SERVICE_STATE_OUT_OF_SERVICE = 'OUT_OF_SERVICE';
    const SERVICE_STATE_PENDING_SERVICE = 'PENDING_SERVICE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivationStateAllowableValues()
    {
        return [
            self::ACTIVATION_STATE_UNASSIGNED,
            self::ACTIVATION_STATE_PENDING,
            self::ACTIVATION_STATE_ACTIVATED,
            self::ACTIVATION_STATE_REACTIVATION_PENDING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEdgeStateAllowableValues()
    {
        return [
            self::EDGE_STATE_NEVER_ACTIVATED,
            self::EDGE_STATE_DEGRADED,
            self::EDGE_STATE_OFFLINE,
            self::EDGE_STATE_DISABLED,
            self::EDGE_STATE_EXPIRED,
            self::EDGE_STATE_CONNECTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEndpointPkiModeAllowableValues()
    {
        return [
            self::ENDPOINT_PKI_MODE_DISABLED,
            self::ENDPOINT_PKI_MODE_OPTIONAL,
            self::ENDPOINT_PKI_MODE_REQUIRED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHaPreviousStateAllowableValues()
    {
        return [
            self::HA_PREVIOUS_STATE_UNCONFIGURED,
            self::HA_PREVIOUS_STATE_PENDING_INIT,
            self::HA_PREVIOUS_STATE_PENDING_CONFIRMATION,
            self::HA_PREVIOUS_STATE_PENDING_CONFIRMED,
            self::HA_PREVIOUS_STATE_PENDING_DISSOCIATION,
            self::HA_PREVIOUS_STATE_READY,
            self::HA_PREVIOUS_STATE_FAILED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHaStateAllowableValues()
    {
        return [
            self::HA_STATE_UNCONFIGURED,
            self::HA_STATE_PENDING_INIT,
            self::HA_STATE_PENDING_CONFIRMATION,
            self::HA_STATE_PENDING_CONFIRMED,
            self::HA_STATE_PENDING_DISSOCIATION,
            self::HA_STATE_READY,
            self::HA_STATE_FAILED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModelNumberAllowableValues()
    {
        return [
            self::MODEL_NUMBER_EDGE500,
            self::MODEL_NUMBER_EDGE520,
            self::MODEL_NUMBER_EDGE5_X0,
            self::MODEL_NUMBER_EDGE510,
            self::MODEL_NUMBER_EDGE840,
            self::MODEL_NUMBER_EDGE1000,
            self::MODEL_NUMBER_EDGE1000QAT,
            self::MODEL_NUMBER_VIRTUAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceStateAllowableValues()
    {
        return [
            self::SERVICE_STATE_IN_SERVICE,
            self::SERVICE_STATE_OUT_OF_SERVICE,
            self::SERVICE_STATE_PENDING_SERVICE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activation_key'] = isset($data['activation_key']) ? $data['activation_key'] : null;
        $this->container['activation_key_expires'] = isset($data['activation_key_expires']) ? $data['activation_key_expires'] : null;
        $this->container['activation_state'] = isset($data['activation_state']) ? $data['activation_state'] : null;
        $this->container['activation_time'] = isset($data['activation_time']) ? $data['activation_time'] : null;
        $this->container['alerts_enabled'] = isset($data['alerts_enabled']) ? $data['alerts_enabled'] : null;
        $this->container['build_number'] = isset($data['build_number']) ? $data['build_number'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['device_family'] = isset($data['device_family']) ? $data['device_family'] : null;
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
        $this->container['dns_name'] = isset($data['dns_name']) ? $data['dns_name'] : null;
        $this->container['edge_hardware_id'] = isset($data['edge_hardware_id']) ? $data['edge_hardware_id'] : null;
        $this->container['edge_state'] = isset($data['edge_state']) ? $data['edge_state'] : null;
        $this->container['edge_state_time'] = isset($data['edge_state_time']) ? $data['edge_state_time'] : null;
        $this->container['endpoint_pki_mode'] = isset($data['endpoint_pki_mode']) ? $data['endpoint_pki_mode'] : null;
        $this->container['enterprise_id'] = isset($data['enterprise_id']) ? $data['enterprise_id'] : null;
        $this->container['ha_last_contact'] = isset($data['ha_last_contact']) ? $data['ha_last_contact'] : null;
        $this->container['ha_previous_state'] = isset($data['ha_previous_state']) ? $data['ha_previous_state'] : null;
        $this->container['ha_serial_number'] = isset($data['ha_serial_number']) ? $data['ha_serial_number'] : null;
        $this->container['ha_state'] = isset($data['ha_state']) ? $data['ha_state'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_live'] = isset($data['is_live']) ? $data['is_live'] : null;
        $this->container['last_contact'] = isset($data['last_contact']) ? $data['last_contact'] : null;
        $this->container['logical_id'] = isset($data['logical_id']) ? $data['logical_id'] : null;
        $this->container['model_number'] = isset($data['model_number']) ? $data['model_number'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['operator_alerts_enabled'] = isset($data['operator_alerts_enabled']) ? $data['operator_alerts_enabled'] : null;
        $this->container['self_mac_address'] = isset($data['self_mac_address']) ? $data['self_mac_address'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['service_state'] = isset($data['service_state']) ? $data['service_state'] : null;
        $this->container['service_up_since'] = isset($data['service_up_since']) ? $data['service_up_since'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['software_updated'] = isset($data['software_updated']) ? $data['software_updated'] : null;
        $this->container['software_version'] = isset($data['software_version']) ? $data['software_version'] : null;
        $this->container['system_up_since'] = isset($data['system_up_since']) ? $data['system_up_since'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActivationStateAllowableValues();
        if (!in_array($this->container['activation_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'activation_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEdgeStateAllowableValues();
        if (!in_array($this->container['edge_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'edge_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEndpointPkiModeAllowableValues();
        if (!in_array($this->container['endpoint_pki_mode'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'endpoint_pki_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHaPreviousStateAllowableValues();
        if (!in_array($this->container['ha_previous_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ha_previous_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHaStateAllowableValues();
        if (!in_array($this->container['ha_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ha_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModelNumberAllowableValues();
        if (!in_array($this->container['model_number'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'model_number', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getServiceStateAllowableValues();
        if (!in_array($this->container['service_state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'service_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getActivationStateAllowableValues();
        if (!in_array($this->container['activation_state'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getEdgeStateAllowableValues();
        if (!in_array($this->container['edge_state'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getEndpointPkiModeAllowableValues();
        if (!in_array($this->container['endpoint_pki_mode'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getHaPreviousStateAllowableValues();
        if (!in_array($this->container['ha_previous_state'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getHaStateAllowableValues();
        if (!in_array($this->container['ha_state'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getModelNumberAllowableValues();
        if (!in_array($this->container['model_number'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getServiceStateAllowableValues();
        if (!in_array($this->container['service_state'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets activation_key
     *
     * @return string
     */
    public function getActivationKey()
    {
        return $this->container['activation_key'];
    }

    /**
     * Sets activation_key
     *
     * @param string $activation_key activation_key
     *
     * @return $this
     */
    public function setActivationKey($activation_key)
    {
        $this->container['activation_key'] = $activation_key;

        return $this;
    }

    /**
     * Gets activation_key_expires
     *
     * @return string
     */
    public function getActivationKeyExpires()
    {
        return $this->container['activation_key_expires'];
    }

    /**
     * Sets activation_key_expires
     *
     * @param string $activation_key_expires activation_key_expires
     *
     * @return $this
     */
    public function setActivationKeyExpires($activation_key_expires)
    {
        $this->container['activation_key_expires'] = $activation_key_expires;

        return $this;
    }

    /**
     * Gets activation_state
     *
     * @return string
     */
    public function getActivationState()
    {
        return $this->container['activation_state'];
    }

    /**
     * Sets activation_state
     *
     * @param string $activation_state activation_state
     *
     * @return $this
     */
    public function setActivationState($activation_state)
    {
        $allowedValues = $this->getActivationStateAllowableValues();
        if (!is_null($activation_state) && !in_array($activation_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'activation_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activation_state'] = $activation_state;

        return $this;
    }

    /**
     * Gets activation_time
     *
     * @return string
     */
    public function getActivationTime()
    {
        return $this->container['activation_time'];
    }

    /**
     * Sets activation_time
     *
     * @param string $activation_time activation_time
     *
     * @return $this
     */
    public function setActivationTime($activation_time)
    {
        $this->container['activation_time'] = $activation_time;

        return $this;
    }

    /**
     * Gets alerts_enabled
     *
     * @return int
     */
    public function getAlertsEnabled()
    {
        return $this->container['alerts_enabled'];
    }

    /**
     * Sets alerts_enabled
     *
     * @param int $alerts_enabled alerts_enabled
     *
     * @return $this
     */
    public function setAlertsEnabled($alerts_enabled)
    {
        $this->container['alerts_enabled'] = $alerts_enabled;

        return $this;
    }

    /**
     * Gets build_number
     *
     * @return string
     */
    public function getBuildNumber()
    {
        return $this->container['build_number'];
    }

    /**
     * Sets build_number
     *
     * @param string $build_number build_number
     *
     * @return $this
     */
    public function setBuildNumber($build_number)
    {
        $this->container['build_number'] = $build_number;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets device_family
     *
     * @return string
     */
    public function getDeviceFamily()
    {
        return $this->container['device_family'];
    }

    /**
     * Sets device_family
     *
     * @param string $device_family device_family
     *
     * @return $this
     */
    public function setDeviceFamily($device_family)
    {
        $this->container['device_family'] = $device_family;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string $device_id device_id
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets dns_name
     *
     * @return string
     */
    public function getDnsName()
    {
        return $this->container['dns_name'];
    }

    /**
     * Sets dns_name
     *
     * @param string $dns_name dns_name
     *
     * @return $this
     */
    public function setDnsName($dns_name)
    {
        $this->container['dns_name'] = $dns_name;

        return $this;
    }

    /**
     * Gets edge_hardware_id
     *
     * @return string
     */
    public function getEdgeHardwareId()
    {
        return $this->container['edge_hardware_id'];
    }

    /**
     * Sets edge_hardware_id
     *
     * @param string $edge_hardware_id edge_hardware_id
     *
     * @return $this
     */
    public function setEdgeHardwareId($edge_hardware_id)
    {
        $this->container['edge_hardware_id'] = $edge_hardware_id;

        return $this;
    }

    /**
     * Gets edge_state
     *
     * @return string
     */
    public function getEdgeState()
    {
        return $this->container['edge_state'];
    }

    /**
     * Sets edge_state
     *
     * @param string $edge_state edge_state
     *
     * @return $this
     */
    public function setEdgeState($edge_state)
    {
        $allowedValues = $this->getEdgeStateAllowableValues();
        if (!is_null($edge_state) && !in_array($edge_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'edge_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['edge_state'] = $edge_state;

        return $this;
    }

    /**
     * Gets edge_state_time
     *
     * @return string
     */
    public function getEdgeStateTime()
    {
        return $this->container['edge_state_time'];
    }

    /**
     * Sets edge_state_time
     *
     * @param string $edge_state_time edge_state_time
     *
     * @return $this
     */
    public function setEdgeStateTime($edge_state_time)
    {
        $this->container['edge_state_time'] = $edge_state_time;

        return $this;
    }

    /**
     * Gets endpoint_pki_mode
     *
     * @return string
     */
    public function getEndpointPkiMode()
    {
        return $this->container['endpoint_pki_mode'];
    }

    /**
     * Sets endpoint_pki_mode
     *
     * @param string $endpoint_pki_mode endpoint_pki_mode
     *
     * @return $this
     */
    public function setEndpointPkiMode($endpoint_pki_mode)
    {
        $allowedValues = $this->getEndpointPkiModeAllowableValues();
        if (!is_null($endpoint_pki_mode) && !in_array($endpoint_pki_mode, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'endpoint_pki_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['endpoint_pki_mode'] = $endpoint_pki_mode;

        return $this;
    }

    /**
     * Gets enterprise_id
     *
     * @return int
     */
    public function getEnterpriseId()
    {
        return $this->container['enterprise_id'];
    }

    /**
     * Sets enterprise_id
     *
     * @param int $enterprise_id enterprise_id
     *
     * @return $this
     */
    public function setEnterpriseId($enterprise_id)
    {
        $this->container['enterprise_id'] = $enterprise_id;

        return $this;
    }

    /**
     * Gets ha_last_contact
     *
     * @return string
     */
    public function getHaLastContact()
    {
        return $this->container['ha_last_contact'];
    }

    /**
     * Sets ha_last_contact
     *
     * @param string $ha_last_contact ha_last_contact
     *
     * @return $this
     */
    public function setHaLastContact($ha_last_contact)
    {
        $this->container['ha_last_contact'] = $ha_last_contact;

        return $this;
    }

    /**
     * Gets ha_previous_state
     *
     * @return string
     */
    public function getHaPreviousState()
    {
        return $this->container['ha_previous_state'];
    }

    /**
     * Sets ha_previous_state
     *
     * @param string $ha_previous_state ha_previous_state
     *
     * @return $this
     */
    public function setHaPreviousState($ha_previous_state)
    {
        $allowedValues = $this->getHaPreviousStateAllowableValues();
        if (!is_null($ha_previous_state) && !in_array($ha_previous_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ha_previous_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ha_previous_state'] = $ha_previous_state;

        return $this;
    }

    /**
     * Gets ha_serial_number
     *
     * @return string
     */
    public function getHaSerialNumber()
    {
        return $this->container['ha_serial_number'];
    }

    /**
     * Sets ha_serial_number
     *
     * @param string $ha_serial_number ha_serial_number
     *
     * @return $this
     */
    public function setHaSerialNumber($ha_serial_number)
    {
        $this->container['ha_serial_number'] = $ha_serial_number;

        return $this;
    }

    /**
     * Gets ha_state
     *
     * @return string
     */
    public function getHaState()
    {
        return $this->container['ha_state'];
    }

    /**
     * Sets ha_state
     *
     * @param string $ha_state ha_state
     *
     * @return $this
     */
    public function setHaState($ha_state)
    {
        $allowedValues = $this->getHaStateAllowableValues();
        if (!is_null($ha_state) && !in_array($ha_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ha_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ha_state'] = $ha_state;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_live
     *
     * @return int
     */
    public function getIsLive()
    {
        return $this->container['is_live'];
    }

    /**
     * Sets is_live
     *
     * @param int $is_live is_live
     *
     * @return $this
     */
    public function setIsLive($is_live)
    {
        $this->container['is_live'] = $is_live;

        return $this;
    }

    /**
     * Gets last_contact
     *
     * @return string
     */
    public function getLastContact()
    {
        return $this->container['last_contact'];
    }

    /**
     * Sets last_contact
     *
     * @param string $last_contact last_contact
     *
     * @return $this
     */
    public function setLastContact($last_contact)
    {
        $this->container['last_contact'] = $last_contact;

        return $this;
    }

    /**
     * Gets logical_id
     *
     * @return string
     */
    public function getLogicalId()
    {
        return $this->container['logical_id'];
    }

    /**
     * Sets logical_id
     *
     * @param string $logical_id logical_id
     *
     * @return $this
     */
    public function setLogicalId($logical_id)
    {
        $this->container['logical_id'] = $logical_id;

        return $this;
    }

    /**
     * Gets model_number
     *
     * @return string
     */
    public function getModelNumber()
    {
        return $this->container['model_number'];
    }

    /**
     * Sets model_number
     *
     * @param string $model_number model_number
     *
     * @return $this
     */
    public function setModelNumber($model_number)
    {
        $allowedValues = $this->getModelNumberAllowableValues();
        if (!is_null($model_number) && !in_array($model_number, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'model_number', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['model_number'] = $model_number;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return string
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param string $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operator_alerts_enabled
     *
     * @return int
     */
    public function getOperatorAlertsEnabled()
    {
        return $this->container['operator_alerts_enabled'];
    }

    /**
     * Sets operator_alerts_enabled
     *
     * @param int $operator_alerts_enabled operator_alerts_enabled
     *
     * @return $this
     */
    public function setOperatorAlertsEnabled($operator_alerts_enabled)
    {
        $this->container['operator_alerts_enabled'] = $operator_alerts_enabled;

        return $this;
    }

    /**
     * Gets self_mac_address
     *
     * @return string
     */
    public function getSelfMacAddress()
    {
        return $this->container['self_mac_address'];
    }

    /**
     * Sets self_mac_address
     *
     * @param string $self_mac_address self_mac_address
     *
     * @return $this
     */
    public function setSelfMacAddress($self_mac_address)
    {
        $this->container['self_mac_address'] = $self_mac_address;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets service_state
     *
     * @return string
     */
    public function getServiceState()
    {
        return $this->container['service_state'];
    }

    /**
     * Sets service_state
     *
     * @param string $service_state service_state
     *
     * @return $this
     */
    public function setServiceState($service_state)
    {
        $allowedValues = $this->getServiceStateAllowableValues();
        if (!is_null($service_state) && !in_array($service_state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_state'] = $service_state;

        return $this;
    }

    /**
     * Gets service_up_since
     *
     * @return string
     */
    public function getServiceUpSince()
    {
        return $this->container['service_up_since'];
    }

    /**
     * Sets service_up_since
     *
     * @param string $service_up_since service_up_since
     *
     * @return $this
     */
    public function setServiceUpSince($service_up_since)
    {
        $this->container['service_up_since'] = $service_up_since;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return int
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param int $site_id site_id
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets software_updated
     *
     * @return string
     */
    public function getSoftwareUpdated()
    {
        return $this->container['software_updated'];
    }

    /**
     * Sets software_updated
     *
     * @param string $software_updated software_updated
     *
     * @return $this
     */
    public function setSoftwareUpdated($software_updated)
    {
        $this->container['software_updated'] = $software_updated;

        return $this;
    }

    /**
     * Gets software_version
     *
     * @return string
     */
    public function getSoftwareVersion()
    {
        return $this->container['software_version'];
    }

    /**
     * Sets software_version
     *
     * @param string $software_version software_version
     *
     * @return $this
     */
    public function setSoftwareVersion($software_version)
    {
        $this->container['software_version'] = $software_version;

        return $this;
    }

    /**
     * Gets system_up_since
     *
     * @return string
     */
    public function getSystemUpSince()
    {
        return $this->container['system_up_since'];
    }

    /**
     * Sets system_up_since
     *
     * @param string $system_up_since system_up_since
     *
     * @return $this
     */
    public function setSystemUpSince($system_up_since)
    {
        $this->container['system_up_since'] = $system_up_since;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


