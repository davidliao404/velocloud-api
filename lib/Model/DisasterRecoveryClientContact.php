<?php
/**
 * DisasterRecoveryClientContact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DisasterRecoveryClientContact Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DisasterRecoveryClientContact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'disaster_recovery_client_contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_address' => 'string',
        'active_last_response_time' => '\DateTime',
        'client_logical_id' => 'string',
        'client_type' => 'string',
        'id' => 'int',
        'modified' => '\DateTime',
        'standby_address' => 'string',
        'standby_last_response_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_address' => null,
        'active_last_response_time' => 'date-time',
        'client_logical_id' => null,
        'client_type' => null,
        'id' => null,
        'modified' => 'date-time',
        'standby_address' => null,
        'standby_last_response_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_address' => 'activeAddress',
        'active_last_response_time' => 'activeLastResponseTime',
        'client_logical_id' => 'clientLogicalId',
        'client_type' => 'clientType',
        'id' => 'id',
        'modified' => 'modified',
        'standby_address' => 'standbyAddress',
        'standby_last_response_time' => 'standbyLastResponseTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_address' => 'setActiveAddress',
        'active_last_response_time' => 'setActiveLastResponseTime',
        'client_logical_id' => 'setClientLogicalId',
        'client_type' => 'setClientType',
        'id' => 'setId',
        'modified' => 'setModified',
        'standby_address' => 'setStandbyAddress',
        'standby_last_response_time' => 'setStandbyLastResponseTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_address' => 'getActiveAddress',
        'active_last_response_time' => 'getActiveLastResponseTime',
        'client_logical_id' => 'getClientLogicalId',
        'client_type' => 'getClientType',
        'id' => 'getId',
        'modified' => 'getModified',
        'standby_address' => 'getStandbyAddress',
        'standby_last_response_time' => 'getStandbyLastResponseTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CLIENT_TYPE_EDGE = 'EDGE';
    const CLIENT_TYPE_GATEWAY = 'GATEWAY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClientTypeAllowableValues()
    {
        return [
            self::CLIENT_TYPE_EDGE,
            self::CLIENT_TYPE_GATEWAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_address'] = isset($data['active_address']) ? $data['active_address'] : null;
        $this->container['active_last_response_time'] = isset($data['active_last_response_time']) ? $data['active_last_response_time'] : null;
        $this->container['client_logical_id'] = isset($data['client_logical_id']) ? $data['client_logical_id'] : null;
        $this->container['client_type'] = isset($data['client_type']) ? $data['client_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['standby_address'] = isset($data['standby_address']) ? $data['standby_address'] : null;
        $this->container['standby_last_response_time'] = isset($data['standby_last_response_time']) ? $data['standby_last_response_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['active_address'] === null) {
            $invalidProperties[] = "'active_address' can't be null";
        }
        if ($this->container['active_last_response_time'] === null) {
            $invalidProperties[] = "'active_last_response_time' can't be null";
        }
        if ($this->container['client_logical_id'] === null) {
            $invalidProperties[] = "'client_logical_id' can't be null";
        }
        if ($this->container['client_type'] === null) {
            $invalidProperties[] = "'client_type' can't be null";
        }
        $allowedValues = $this->getClientTypeAllowableValues();
        if (!in_array($this->container['client_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'client_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        if ($this->container['standby_address'] === null) {
            $invalidProperties[] = "'standby_address' can't be null";
        }
        if ($this->container['standby_last_response_time'] === null) {
            $invalidProperties[] = "'standby_last_response_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['active_address'] === null) {
            return false;
        }
        if ($this->container['active_last_response_time'] === null) {
            return false;
        }
        if ($this->container['client_logical_id'] === null) {
            return false;
        }
        if ($this->container['client_type'] === null) {
            return false;
        }
        $allowedValues = $this->getClientTypeAllowableValues();
        if (!in_array($this->container['client_type'], $allowedValues)) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['modified'] === null) {
            return false;
        }
        if ($this->container['standby_address'] === null) {
            return false;
        }
        if ($this->container['standby_last_response_time'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets active_address
     *
     * @return string
     */
    public function getActiveAddress()
    {
        return $this->container['active_address'];
    }

    /**
     * Sets active_address
     *
     * @param string $active_address active_address
     *
     * @return $this
     */
    public function setActiveAddress($active_address)
    {
        $this->container['active_address'] = $active_address;

        return $this;
    }

    /**
     * Gets active_last_response_time
     *
     * @return \DateTime
     */
    public function getActiveLastResponseTime()
    {
        return $this->container['active_last_response_time'];
    }

    /**
     * Sets active_last_response_time
     *
     * @param \DateTime $active_last_response_time active_last_response_time
     *
     * @return $this
     */
    public function setActiveLastResponseTime($active_last_response_time)
    {
        $this->container['active_last_response_time'] = $active_last_response_time;

        return $this;
    }

    /**
     * Gets client_logical_id
     *
     * @return string
     */
    public function getClientLogicalId()
    {
        return $this->container['client_logical_id'];
    }

    /**
     * Sets client_logical_id
     *
     * @param string $client_logical_id client_logical_id
     *
     * @return $this
     */
    public function setClientLogicalId($client_logical_id)
    {
        $this->container['client_logical_id'] = $client_logical_id;

        return $this;
    }

    /**
     * Gets client_type
     *
     * @return string
     */
    public function getClientType()
    {
        return $this->container['client_type'];
    }

    /**
     * Sets client_type
     *
     * @param string $client_type client_type
     *
     * @return $this
     */
    public function setClientType($client_type)
    {
        $allowedValues = $this->getClientTypeAllowableValues();
        if (!in_array($client_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'client_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['client_type'] = $client_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets standby_address
     *
     * @return string
     */
    public function getStandbyAddress()
    {
        return $this->container['standby_address'];
    }

    /**
     * Sets standby_address
     *
     * @param string $standby_address standby_address
     *
     * @return $this
     */
    public function setStandbyAddress($standby_address)
    {
        $this->container['standby_address'] = $standby_address;

        return $this;
    }

    /**
     * Gets standby_last_response_time
     *
     * @return \DateTime
     */
    public function getStandbyLastResponseTime()
    {
        return $this->container['standby_last_response_time'];
    }

    /**
     * Sets standby_last_response_time
     *
     * @param \DateTime $standby_last_response_time standby_last_response_time
     *
     * @return $this
     */
    public function setStandbyLastResponseTime($standby_last_response_time)
    {
        $this->container['standby_last_response_time'] = $standby_last_response_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


