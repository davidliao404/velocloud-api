<?php
/**
 * ControlPlaneDataGatewaySelection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ControlPlaneDataGatewaySelection Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ControlPlaneDataGatewaySelection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'control_plane_data_gatewaySelection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mode' => 'string',
        'primary' => 'string',
        'primary_detail' => '\Swagger\Client\Model\ControlPlaneDataGatewaySelectionPrimaryDetail',
        'secondary' => 'string',
        'secondary_detail' => '\Swagger\Client\Model\ControlPlaneDataGatewaySelectionPrimaryDetail',
        'super' => 'string',
        'super_detail' => '\Swagger\Client\Model\ControlPlaneDataGatewaySelectionPrimaryDetail'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mode' => null,
        'primary' => null,
        'primary_detail' => null,
        'secondary' => null,
        'secondary_detail' => null,
        'super' => null,
        'super_detail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mode' => 'mode',
        'primary' => 'primary',
        'primary_detail' => 'primaryDetail',
        'secondary' => 'secondary',
        'secondary_detail' => 'secondaryDetail',
        'super' => 'super',
        'super_detail' => 'superDetail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mode' => 'setMode',
        'primary' => 'setPrimary',
        'primary_detail' => 'setPrimaryDetail',
        'secondary' => 'setSecondary',
        'secondary_detail' => 'setSecondaryDetail',
        'super' => 'setSuper',
        'super_detail' => 'setSuperDetail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mode' => 'getMode',
        'primary' => 'getPrimary',
        'primary_detail' => 'getPrimaryDetail',
        'secondary' => 'getSecondary',
        'secondary_detail' => 'getSecondaryDetail',
        'super' => 'getSuper',
        'super_detail' => 'getSuperDetail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['primary'] = isset($data['primary']) ? $data['primary'] : null;
        $this->container['primary_detail'] = isset($data['primary_detail']) ? $data['primary_detail'] : null;
        $this->container['secondary'] = isset($data['secondary']) ? $data['secondary'] : null;
        $this->container['secondary_detail'] = isset($data['secondary_detail']) ? $data['secondary_detail'] : null;
        $this->container['super'] = isset($data['super']) ? $data['super'] : null;
        $this->container['super_detail'] = isset($data['super_detail']) ? $data['super_detail'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets primary
     *
     * @return string
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param string $primary primary
     *
     * @return $this
     */
    public function setPrimary($primary)
    {
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets primary_detail
     *
     * @return \Swagger\Client\Model\ControlPlaneDataGatewaySelectionPrimaryDetail
     */
    public function getPrimaryDetail()
    {
        return $this->container['primary_detail'];
    }

    /**
     * Sets primary_detail
     *
     * @param \Swagger\Client\Model\ControlPlaneDataGatewaySelectionPrimaryDetail $primary_detail primary_detail
     *
     * @return $this
     */
    public function setPrimaryDetail($primary_detail)
    {
        $this->container['primary_detail'] = $primary_detail;

        return $this;
    }

    /**
     * Gets secondary
     *
     * @return string
     */
    public function getSecondary()
    {
        return $this->container['secondary'];
    }

    /**
     * Sets secondary
     *
     * @param string $secondary secondary
     *
     * @return $this
     */
    public function setSecondary($secondary)
    {
        $this->container['secondary'] = $secondary;

        return $this;
    }

    /**
     * Gets secondary_detail
     *
     * @return \Swagger\Client\Model\ControlPlaneDataGatewaySelectionPrimaryDetail
     */
    public function getSecondaryDetail()
    {
        return $this->container['secondary_detail'];
    }

    /**
     * Sets secondary_detail
     *
     * @param \Swagger\Client\Model\ControlPlaneDataGatewaySelectionPrimaryDetail $secondary_detail secondary_detail
     *
     * @return $this
     */
    public function setSecondaryDetail($secondary_detail)
    {
        $this->container['secondary_detail'] = $secondary_detail;

        return $this;
    }

    /**
     * Gets super
     *
     * @return string
     */
    public function getSuper()
    {
        return $this->container['super'];
    }

    /**
     * Sets super
     *
     * @param string $super super
     *
     * @return $this
     */
    public function setSuper($super)
    {
        $this->container['super'] = $super;

        return $this;
    }

    /**
     * Gets super_detail
     *
     * @return \Swagger\Client\Model\ControlPlaneDataGatewaySelectionPrimaryDetail
     */
    public function getSuperDetail()
    {
        return $this->container['super_detail'];
    }

    /**
     * Sets super_detail
     *
     * @param \Swagger\Client\Model\ControlPlaneDataGatewaySelectionPrimaryDetail $super_detail super_detail
     *
     * @return $this
     */
    public function setSuperDetail($super_detail)
    {
        $this->container['super_detail'] = $super_detail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


