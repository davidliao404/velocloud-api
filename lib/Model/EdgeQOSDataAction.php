<?php
/**
 * EdgeQOSDataAction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdgeQOSDataAction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdgeQOSDataAction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'edgeQOSData_action';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'route_type' => 'string',
        'edge2_edge_route_action' => '\Swagger\Client\Model\RouteActionObject',
        'edge2_data_center_route_action' => '\Swagger\Client\Model\RouteActionObject',
        'edge2_cloud_route_action' => '\Swagger\Client\Model\RouteActionObject',
        'qo_s' => 'object',
        'sla' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'route_type' => null,
        'edge2_edge_route_action' => null,
        'edge2_data_center_route_action' => null,
        'edge2_cloud_route_action' => null,
        'qo_s' => null,
        'sla' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'route_type' => 'routeType',
        'edge2_edge_route_action' => 'edge2EdgeRouteAction',
        'edge2_data_center_route_action' => 'edge2DataCenterRouteAction',
        'edge2_cloud_route_action' => 'edge2CloudRouteAction',
        'qo_s' => 'QoS',
        'sla' => 'sla'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'route_type' => 'setRouteType',
        'edge2_edge_route_action' => 'setEdge2EdgeRouteAction',
        'edge2_data_center_route_action' => 'setEdge2DataCenterRouteAction',
        'edge2_cloud_route_action' => 'setEdge2CloudRouteAction',
        'qo_s' => 'setQoS',
        'sla' => 'setSla'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'route_type' => 'getRouteType',
        'edge2_edge_route_action' => 'getEdge2EdgeRouteAction',
        'edge2_data_center_route_action' => 'getEdge2DataCenterRouteAction',
        'edge2_cloud_route_action' => 'getEdge2CloudRouteAction',
        'qo_s' => 'getQoS',
        'sla' => 'getSla'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['route_type'] = isset($data['route_type']) ? $data['route_type'] : null;
        $this->container['edge2_edge_route_action'] = isset($data['edge2_edge_route_action']) ? $data['edge2_edge_route_action'] : null;
        $this->container['edge2_data_center_route_action'] = isset($data['edge2_data_center_route_action']) ? $data['edge2_data_center_route_action'] : null;
        $this->container['edge2_cloud_route_action'] = isset($data['edge2_cloud_route_action']) ? $data['edge2_cloud_route_action'] : null;
        $this->container['qo_s'] = isset($data['qo_s']) ? $data['qo_s'] : null;
        $this->container['sla'] = isset($data['sla']) ? $data['sla'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets route_type
     *
     * @return string
     */
    public function getRouteType()
    {
        return $this->container['route_type'];
    }

    /**
     * Sets route_type
     *
     * @param string $route_type route_type
     *
     * @return $this
     */
    public function setRouteType($route_type)
    {
        $this->container['route_type'] = $route_type;

        return $this;
    }

    /**
     * Gets edge2_edge_route_action
     *
     * @return \Swagger\Client\Model\RouteActionObject
     */
    public function getEdge2EdgeRouteAction()
    {
        return $this->container['edge2_edge_route_action'];
    }

    /**
     * Sets edge2_edge_route_action
     *
     * @param \Swagger\Client\Model\RouteActionObject $edge2_edge_route_action edge2_edge_route_action
     *
     * @return $this
     */
    public function setEdge2EdgeRouteAction($edge2_edge_route_action)
    {
        $this->container['edge2_edge_route_action'] = $edge2_edge_route_action;

        return $this;
    }

    /**
     * Gets edge2_data_center_route_action
     *
     * @return \Swagger\Client\Model\RouteActionObject
     */
    public function getEdge2DataCenterRouteAction()
    {
        return $this->container['edge2_data_center_route_action'];
    }

    /**
     * Sets edge2_data_center_route_action
     *
     * @param \Swagger\Client\Model\RouteActionObject $edge2_data_center_route_action edge2_data_center_route_action
     *
     * @return $this
     */
    public function setEdge2DataCenterRouteAction($edge2_data_center_route_action)
    {
        $this->container['edge2_data_center_route_action'] = $edge2_data_center_route_action;

        return $this;
    }

    /**
     * Gets edge2_cloud_route_action
     *
     * @return \Swagger\Client\Model\RouteActionObject
     */
    public function getEdge2CloudRouteAction()
    {
        return $this->container['edge2_cloud_route_action'];
    }

    /**
     * Sets edge2_cloud_route_action
     *
     * @param \Swagger\Client\Model\RouteActionObject $edge2_cloud_route_action edge2_cloud_route_action
     *
     * @return $this
     */
    public function setEdge2CloudRouteAction($edge2_cloud_route_action)
    {
        $this->container['edge2_cloud_route_action'] = $edge2_cloud_route_action;

        return $this;
    }

    /**
     * Gets qo_s
     *
     * @return object
     */
    public function getQoS()
    {
        return $this->container['qo_s'];
    }

    /**
     * Sets qo_s
     *
     * @param object $qo_s qo_s
     *
     * @return $this
     */
    public function setQoS($qo_s)
    {
        $this->container['qo_s'] = $qo_s;

        return $this;
    }

    /**
     * Gets sla
     *
     * @return object
     */
    public function getSla()
    {
        return $this->container['sla'];
    }

    /**
     * Sets sla
     *
     * @param object $sla sla
     *
     * @return $this
     */
    public function setSla($sla)
    {
        $this->container['sla'] = $sla;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


